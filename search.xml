<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>seaborn绘图学习笔记</title>
      <link href="/2022/09/18/seaborn%E7%BB%98%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/18/seaborn%E7%BB%98%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="熟悉seaborn的绘图基础"><a href="#熟悉seaborn的绘图基础" class="headerlink" title="熟悉seaborn的绘图基础"></a>熟悉seaborn的绘图基础</h1><h2 id="了解seaborn中的基础图形"><a href="#了解seaborn中的基础图形" class="headerlink" title="了解seaborn中的基础图形"></a>了解seaborn中的基础图形</h2><ul><li>seaborn库绘制的图形色彩、视觉令人耳目一新，通常将它视为Matplotlib库的补充，而不是替代物。seaborn库绘制的常用图形有散点图、折线图、热力图、条形图、箱线图、网格图等，在绘制这些图形之前需要掌握seaborn库的绘图基础，其中包括基础图形、绘图风格和调色板等。</li><li>在seaborn库中包含了大量常用的基础图形。以某企业人员离职率数据为例，分别使用Matplotlib库与seaborn库绘图不同薪资分布的散点图。</li></ul><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917180925172.png" alt="image-20220917180925172"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917180930668.png" alt="image-20220917180930668"></p><p><strong>不同薪资分布的散点图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">sns.set_style(&#123;<span class="string">&#x27;font.sans-serif&#x27;</span>:[<span class="string">&#x27;simhei&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">hr = pd.read_csv(<span class="string">&#x27;./data/hr.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = hr.head(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">color_map = <span class="built_in">dict</span>(<span class="built_in">zip</span>(data[<span class="string">&#x27;薪资&#x27;</span>].unique(), [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]))</span><br><span class="line"><span class="keyword">for</span> species, group <span class="keyword">in</span> data.groupby(<span class="string">&#x27;薪资&#x27;</span>):</span><br><span class="line">    plt.scatter(group[<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>],</span><br><span class="line">                group[<span class="string">&#x27;满意度&#x27;</span>],</span><br><span class="line">                color=color_map[species], alpha=<span class="number">0.4</span>,</span><br><span class="line">                edgecolors=<span class="literal">None</span>, label=species)</span><br><span class="line">plt.legend(frameon=<span class="literal">True</span>, title=<span class="string">&#x27;薪资&#x27;</span>) <span class="comment"># frameon 控制图例有无框</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;平均每个月工作时长（小时）&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;满意度水平&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;满意度水平与平均每个月工作小时&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917184145384.png" alt="image-20220917184145384"></p><p><strong>使用seaborn库绘图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, <span class="string">&#x27;满意度&#x27;</span>, data, hue=<span class="string">&#x27;薪资&#x27;</span>, fit_reg=<span class="literal">False</span>, height=<span class="number">4</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;平均每个月工作时长（小时）&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;满意度水平&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;满意度水平与平均每个月工作小时&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917184716387.png" alt="image-20220917184716387"></p><h2 id="了解seaborn的绘图风格"><a href="#了解seaborn的绘图风格" class="headerlink" title="了解seaborn的绘图风格"></a>了解seaborn的绘图风格</h2><ul><li>一个引人入胜、赏心悦目的图形不仅更容易挖掘数据中的细节，而且能有利于向读者交流分析，并使读者更容易被记住。</li><li>虽然Matplotlib库是高度可定制的，但是很难根据需求确定需要调整的参数，且调整比较复杂。而seaborn库包含了许多自定义主题和高级界面，可以用于控制Matplotlib图形的外观。例如，自定义一个偏移直线图像，用于展示绘图风格。</li></ul><p><strong>用偏移直线图像展示绘图风格</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">y1 = x + <span class="number">1</span></span><br><span class="line">y2 = x + <span class="number">3</span></span><br><span class="line">y3 = x + <span class="number">5</span></span><br><span class="line"><span class="comment"># 绘制3条不同的直线</span></span><br><span class="line"><span class="comment"># 第1部分</span></span><br><span class="line">plt.title(<span class="string">&#x27;Matplotlib库的绘图风格&#x27;</span>)</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y3)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2部分</span></span><br><span class="line"><span class="comment"># 使用seaborn库绘图</span></span><br><span class="line">sns.set_style(<span class="string">&#x27;darkgrid&#x27;</span>)  <span class="comment"># 全黑风格</span></span><br><span class="line">sns.set_style(&#123;<span class="string">&#x27;font.sans-serif&#x27;</span>:[<span class="string">&#x27;simhei&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>]&#125;)</span><br><span class="line">sns.lineplot(x, y1)</span><br><span class="line">sns.lineplot(x, y2)</span><br><span class="line">sns.lineplot(x, y3)</span><br><span class="line">plt.title(<span class="string">&#x27;seaborn库的绘图风格&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917181016921.png" alt="image-20220917181016921"></p><h3 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h3><ul><li>在seaborn库中含有darkgrid（灰色背景+白网格）、whitegrid（白色背景+黑网格）、dark（仅灰色背景）、white（仅白色背景）和ticks（坐标轴带刻度）5种预设的主题。其中，darkgrid与whitegrid主题有助于在绘图时进行定量信息的查找，dark与white主题有助于防止网格与表示数据的线条混淆，ticks主题有助于体现少量特殊的数据元素结构。</li><li>seaborn图形的默认主题为darkgrid。读者可以使用set_style函数修改主题及其默认参数。set_style函数的使用格式如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.set_style(style=<span class="literal">None</span>, rc=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>set_style函数只能修改axes_style函数显示的参数，axes_style函数可以达到临时设置图形样式的效果。如下</strong></p><p><strong>使用便宜直线展示各主体及修改默认参数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">y1 = x + <span class="number">1</span></span><br><span class="line">y2 = x + <span class="number">3</span></span><br><span class="line">y3 = x + <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showLine</span>(<span class="params">flip=<span class="number">1</span></span>):</span><br><span class="line">    sns.lineplot(x, y1)</span><br><span class="line">    sns.lineplot(x, y2)</span><br><span class="line">    sns.lineplot(x, y3)</span><br><span class="line">pic = plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;darkgrid&#x27;</span>):  <span class="comment"># 使用darkgrid主题</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;darkgrid&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;whitegrid&#x27;</span>):  <span class="comment"># 使用whitegrid主题</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;whitegrid&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;dark&#x27;</span>):  <span class="comment"># 使用dark主题</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;white&#x27;</span>):  <span class="comment"># 使用white主题</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;ticks&#x27;</span>):  <span class="comment"># 使用ticks主题</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;ticks&#x27;</span>)</span><br><span class="line">sns.set_style(style=<span class="string">&#x27;darkgrid&#x27;</span>, rc=&#123;<span class="string">&#x27;font.sans-serif&#x27;</span>: [<span class="string">&#x27;MicrosoftYaHei&#x27;</span>, <span class="string">&#x27;SimHei&#x27;</span>],</span><br><span class="line">                            <span class="string">&#x27;grid.color&#x27;</span>: <span class="string">&#x27;black&#x27;</span>&#125;)  <span class="comment"># 修改主题中参数</span></span><br><span class="line">pic.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">showLine()</span><br><span class="line">plt.title(<span class="string">&#x27;修改参数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917181947221.png" alt="image-20220917181947221"></p><h3 id="元素缩放"><a href="#元素缩放" class="headerlink" title="元素缩放"></a>元素缩放</h3><ul><li><p>在seaborn库中通过set_context函数可以设置输出图片元素的大小尺寸。set_context函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.set_context(context=<span class="literal">None</span>, font_scale=<span class="number">1</span>, rc=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>context参数可选择paper、notebook、talk和poster类型，默认为notebook。使用set_context函数只能修改plotting_context函数显示的参数，plotting_context函数通过调整参数改变图中标签、线条或其他元素的大小，但不会影响整体样式。</strong></p></li></ul><p><strong>使用偏移直线函数展示4种不同缩放类型的图形</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sns.<span class="built_in">set</span>()</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">y1 = x + <span class="number">1</span></span><br><span class="line">y2 = x + <span class="number">3</span></span><br><span class="line">y3 = x + <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showLine</span>(<span class="params">flip=<span class="number">1</span></span>):</span><br><span class="line">    sns.lineplot(x, y1)</span><br><span class="line">    sns.lineplot(x, y2)</span><br><span class="line">    sns.lineplot(x, y3)</span><br><span class="line">pic = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 恢复默认参数</span></span><br><span class="line">pic = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>), dpi=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">with</span> sns.plotting_context(<span class="string">&#x27;paper&#x27;</span>):  <span class="comment"># 选择paper类型</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;paper&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.plotting_context(<span class="string">&#x27;notebook&#x27;</span>):  <span class="comment"># 选择notebook类型</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;notebook&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.plotting_context(<span class="string">&#x27;talk&#x27;</span>):  <span class="comment"># 选择talk类型</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;talk&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> sns.plotting_context(<span class="string">&#x27;poster&#x27;</span>):  <span class="comment"># 选择poster类型</span></span><br><span class="line">    pic.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;poster&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917182152064.png" alt="image-20220917182152064"></p><h3 id="边框控制"><a href="#边框控制" class="headerlink" title="边框控制"></a>边框控制</h3><p>在seaborn库中，可以使用despine函数移除任意位置的边框，调节边框的位置，修剪边框的长短。despine函数的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seaborn.despine(fig=<span class="literal">None</span>, ax=<span class="literal">None</span>, top=<span class="literal">True</span>, right=<span class="literal">True</span>, left=<span class="literal">False</span>, bottom=<span class="literal">False</span>, offset=<span class="literal">None</span>, trim=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>despine函数的主要参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>top</td><td>接收bool，表示删除顶部边框。默认为True</td></tr><tr><td>right</td><td>接收bool，表示删除右侧边框。默认为True</td></tr><tr><td>left</td><td>接收bool，表示删除左侧边框。默认为False</td></tr><tr><td>bottom</td><td>接收bool，表示删除底部边框。默认为False</td></tr><tr><td>offset</td><td>接收int或dict，表示边框与轴的距离。无默认值</td></tr><tr><td>trim</td><td>接收bool，表示将边框限制为每个非扭曲轴上的最小和最大主刻度。默认为False</td></tr></tbody></table><p><strong>控制图形边框</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;white&#x27;</span>):</span><br><span class="line">    showLine()</span><br><span class="line">    sns.despine()  <span class="comment"># 默认无参数状态，就是删除上方和右方的边框</span></span><br><span class="line">    plt.title(<span class="string">&#x27;控制图形边框&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;white&#x27;</span>):</span><br><span class="line">    data = np.random.normal(size=(<span class="number">20</span>, <span class="number">6</span>)) + np.arange(<span class="number">6</span>) / <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    sns.boxplot(data=data)</span><br><span class="line">    sns.despine(offset=<span class="number">10</span>, left=<span class="literal">False</span>, bottom=<span class="literal">False</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;控制图形边框&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用despine函数可以绘制不同边框的图形以及改变坐标轴的距离。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917182251700.png" alt="image-20220917182251700"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917182256991.png" alt="image-20220917182256991"></p><h2 id="熟悉seaborn的调色板"><a href="#熟悉seaborn的调色板" class="headerlink" title="熟悉seaborn的调色板"></a>熟悉seaborn的调色板</h2><ul><li>颜色在可视化中非常重要，可用于代表各种特征，并且提高整个图的观赏性。如果有效地使用颜色，那么可以显示数据中的图案；如果颜色使用不当，那么将会隐藏数据中图案。由此可见，调色板是seaborn库中绘制图形的基础。</li><li>通常在不知道数据具体特征的情况下，将无法知道使用什么类型的调色板或颜色映射最优。因此，将使用定性调色板、连续调色板和离散调色板3种不同类型的调色板，用于区分使用color_palette函数。</li></ul><p>常用于调色板的函数及其作用如表所示。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>hls_palette</td><td>用于控制调色板颜色的亮度和饱和</td></tr><tr><td>xkcd_palette</td><td>使用xkcd颜色中的颜色名称创建调色板</td></tr><tr><td>cubehelix_palette</td><td>用于创建连续调色板</td></tr><tr><td>light_palette</td><td>用于创建颜色从浅色或深色的连续调色板</td></tr><tr><td>dark_palette</td><td>用于创建颜色从深色到深色混合的连续调色板</td></tr><tr><td>choose_light_palette</td><td>启动一个交互式小部件以创建一个浅色连续调色板</td></tr><tr><td>choose_dark_palette</td><td>启动一个交互式小部件以创建一个深色连续调色板</td></tr><tr><td>diverging_palette</td><td>用于创建离散调色板</td></tr><tr><td>choose_diverging_palette</td><td>启动交互式小部件选择不同的调色板，与diverging_palette函数功能相对应</td></tr><tr><td>color_palette</td><td>用于返回定义调色板的颜色列表或连续颜色图</td></tr><tr><td>set_palette</td><td>用于设置调色板，为所有图设置默认颜色周期</td></tr></tbody></table><h3 id="定性调色板"><a href="#定性调色板" class="headerlink" title="定性调色板"></a>定性调色板</h3><p>当需要区分没有固定顺序的数据离散区块时，定性（或分类）调色板是最佳选择。在导入seaborn库后，默认颜色将更改以10种颜色为一组的颜色。</p><p><strong>seaborn默认颜色</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette())</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917190759472.png" alt="image-20220917190759472"></p><p>默认颜色主题有’deep、muted、pastel、bright、dark和colorblind’几种不同的变化，默认为deep。</p><p><strong>导入颜色主题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">palette = sns.color_palette(<span class="string">&#x27;muted&#x27;</span>)</span><br><span class="line">sns.palplot(palette)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917190925535.png" alt="image-20220917190925535"></p><h4 id="使用圆形颜色系统"><a href="#使用圆形颜色系统" class="headerlink" title="使用圆形颜色系统"></a>使用圆形颜色系统</h4><ul><li>当有一个任意数量的类别需要区分时，最简单的方法是在圆形颜色空间中绘制均匀间隔的颜色（色调在保持亮度和饱和度不变的同时变化）。在需要使用比默认颜色循环中设置的颜色更多时，常使用圆形颜色系统设置图案颜色。最常用的方法是使用HLS（H表示色调、L表示亮度、S表示饱和度）颜色空间，这是一个RGB（R代表红色、G代表绿色、B代表蓝色）值的简单转换。</li></ul><p><strong>HLS颜色空间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;hls&#x27;</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917191129462.png" alt="image-20220917191129462"></p><p><strong>控制颜色亮度和饱和度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.hls_palette(<span class="number">8</span>, l=<span class="number">.5</span>, s=<span class="number">.8</span>))  <span class="comment"># l控制亮度，s控制饱和度</span></span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917191244463.png" alt="image-20220917191244463"></p><ul><li>由于人类视觉系统的工作方式，会导致在RGB度量上强度一致的颜色在视觉中并不平衡。例如，人们认为黄色和绿色是相对较亮的颜色，而蓝色则相对较暗，这可能会出现视觉系统与HLS系统不一致的问题。</li><li>为了解决这一问题，seaborn库提供了一个HUSL系统的接口，也使得选择均匀间隔的色彩变得更加容易，同时保持亮度和饱和度更加一致。</li></ul><p><strong>调节颜色亮度和饱和度在视觉上一致</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;husl&#x27;</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917191352656.png" alt="image-20220917191352656"></p><h4 id="使用xkcd颜色"><a href="#使用xkcd颜色" class="headerlink" title="使用xkcd颜色"></a>使用xkcd颜色</h4><p>xkcd是对随机的RGB颜色空间的命名，产生了954个颜色，可以随时通过xkcd_rgb字典装饰器调用，也可以通过xkcd_palette函数自定义调色板。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917182528847.png" alt="image-20220917182528847"></p><p><strong>xkcd颜色使用示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y1, sns.xkcd_rgb[<span class="string">&#x27;pale red&#x27;</span>], lw=<span class="number">3</span>) <span class="comment"># lw折线的粗细</span></span><br><span class="line">plt.plot(x, y2, sns.xkcd_rgb[<span class="string">&#x27;medium green&#x27;</span>], lw=<span class="number">3</span>)</span><br><span class="line">plt.plot(x, y3, sns.xkcd_rgb[<span class="string">&#x27;denim blue&#x27;</span>], lw=<span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;线条颜色示例&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果如上图所示</p><p><strong>自定义定性调色板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">&#x27;windows blue&#x27;</span>, <span class="string">&#x27;amber&#x27;</span>, <span class="string">&#x27;greyish&#x27;</span>, <span class="string">&#x27;faded green&#x27;</span>, <span class="string">&#x27;dusty purple&#x27;</span>]</span><br><span class="line">sns.palplot(sns.xkcd_palette(colors))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917191620460.png" alt="image-20220917191620460"></p><h3 id="连续调色板"><a href="#连续调色板" class="headerlink" title="连续调色板"></a>连续调色板</h3><p>在数据连续时，通常使用连续调色板。对于连续的数据，使用色调上有细微变化、在亮度和饱和度上有很大变化的调色板，将会自然地展现数据中相对重要的部分。</p><h4 id="Color-Brewer库"><a href="#Color-Brewer库" class="headerlink" title="Color Brewer库"></a>Color Brewer库</h4><p>在Color Brewer库中含有大量的连续调色板，以调色板中的主色（或颜色）命名。如果需要反转亮度渐变，那么可以为调色板名称添加后缀“_r”，即可实现。如果颜色鲜艳的线难以区分，那么seaborn库增加了一个允许创建没有动态范围的“dark”面板，只需在名称添加后缀“_d”，即可切换至“dark”面板。</p><p>在Color Brewer库中，连续调色板名称及渐变顺序如表所示。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>渐变顺序</strong></th><th><strong>名称</strong></th><th><strong>渐变顺序</strong></th><th><strong>名称</strong></th><th><strong>渐变顺序</strong></th></tr></thead><tbody><tr><td>YlOrRd</td><td>黄橙红</td><td>Purples</td><td>紫</td><td>Greys</td><td>白色</td></tr><tr><td>YlOrBr</td><td>黄橙棕</td><td>PuRd</td><td>紫红</td><td>Greens</td><td>绿</td></tr><tr><td>YlGnBu</td><td>黄绿蓝</td><td>PuBuGn</td><td>紫蓝绿</td><td>GnBu</td><td>绿蓝</td></tr><tr><td>YlGn</td><td>黄绿</td><td>PuBu</td><td>紫蓝</td><td>Bupu</td><td>蓝紫</td></tr><tr><td>Reds</td><td>红</td><td>OrRd</td><td>黄色</td><td>BuGn</td><td>蓝绿</td></tr><tr><td>RdPu</td><td>红紫</td><td>Oranges</td><td>黑色</td><td>Blues</td><td>蓝</td></tr></tbody></table><p><strong>绘制连续调色板、亮度反转及切换面板的示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;Greens&#x27;</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;YlOrRd_r&#x27;</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;YlOrRd_d&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917192036737.png" alt="image-20220917192036737"></p><h4 id="cubehelix调色板"><a href="#cubehelix调色板" class="headerlink" title="cubehelix调色板"></a>cubehelix调色板</h4><p>从cubehelix制作连续调色板，将产生一个具有线性增加或降低亮度的色图，这意味着映射信息会在保存为黑色和白色（为印刷）时或被一个色盲的人浏览时可以得以保留显示。在seaborn库中，可使用cubehelix_palette函数制作cubehelix调色板。 cubehelix_palette函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.cubehelix_palette(n_colors=<span class="number">6</span>, start=<span class="number">0</span>, rot=<span class="number">0.4</span>, gamma=<span class="number">1.0</span>, hue=<span class="number">0.8</span>, light=<span class="number">0.85</span>, dark=<span class="number">0.15</span>, reverse=<span class="literal">False</span>, as_cmap=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>cubehelix_palette函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>n_color</strong></td><td>接收int，表示调色板中颜色数目。默认为6</td></tr><tr><td><strong>start</strong></td><td>接收0~3的float，表示指定开始时的色调。默认为0</td></tr><tr><td><strong>rot</strong></td><td>接收float。表示指定在调色板旋转范围（次数）。默认为0.4</td></tr><tr><td><strong>light</strong></td><td>接收0~1的float，表示颜色明亮程度。默认为0.85</td></tr><tr><td><strong>dark</strong></td><td>接收0~1的float，表示颜色深暗程度。默认为0.15</td></tr><tr><td><strong>as_cmap</strong></td><td>接收bool，表示是否返回Matplotlib颜色映射对象。默认为False</td></tr></tbody></table><p><strong>使用cubehelix_palette函数生成颜色调色板并传入绘图函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">8</span>, start=<span class="number">1</span>, rot=<span class="number">0</span>))</span><br><span class="line">x, y = np.random.multivariate_normal([<span class="number">0</span>, <span class="number">0</span>], [[<span class="number">1</span>, -<span class="number">.5</span>], [-<span class="number">.5</span>, <span class="number">1</span>]], size=<span class="number">300</span>).T</span><br><span class="line">cmap = sns.cubehelix_palette(as_cmap=<span class="literal">True</span>)  <span class="comment"># 生产调色板对象</span></span><br><span class="line">sns.kdeplot(x, y, cmap=cmap, shade=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;连续调色板&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917192355486.png" alt="image-20220917192355486"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917192403792.png" alt="image-20220917192403792"></p><h4 id="自定义连续调色板"><a href="#自定义连续调色板" class="headerlink" title="自定义连续调色板"></a>自定义连续调色板</h4><ul><li>对于自定义连续调色板，可以调用light_palette函数和dark_palette函数进行单一颜色“播种”，种子可以产生单一颜色从浅色或深色的调色板。如果使用的是IPython notebook（供Jupyter notebooks使用的一个Jupyter内核组件），light_palette函数和dark_palette函数还可以分别与choose_light_palette函数和choose_dark_palette函数启动交互式小部件创建单一颜色的调色板。</li><li>任何有效的Matplotlib颜色都可以传递给light_palette函数和dark_palette函数，包括HLS颜色空间或HUSL颜色空间的RGB元组和xkcd颜色。</li></ul><p><strong>生成自定义调色板及传入绘图函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.light_palette(<span class="string">&#x27;blue&#x27;</span>))</span><br><span class="line">sns.palplot(sns.dark_palette(<span class="string">&#x27;yellow&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917192547453.png" alt="image-20220917192547453"></p><p><strong>使用husl颜色空间作为种子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pal = sns.dark_palette((<span class="number">200</span>, <span class="number">80</span>, <span class="number">60</span>), <span class="built_in">input</span>=<span class="string">&#x27;husl&#x27;</span>, reverse=<span class="literal">True</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line">sns.kdeplot(x, y, cmap=pal)</span><br><span class="line">plt.title(<span class="string">&#x27;自定义连续调色板&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917192702111.png" alt="image-20220917192702111"></p><h3 id="离散调色板"><a href="#离散调色板" class="headerlink" title="离散调色板"></a>离散调色板</h3><ul><li>离散调色板在用于大的、低的值和大的、高的值上都有非常重要的数据。数据中通常有一个定义明确的中点。例如，如果需要绘制某个基线时间点的温度变化，那么使用偏差色图显示相对减少的区域和相对增加的区域将会相对较好。</li><li>选择离散调色板的规则是，起始色调具有相似的亮度和饱和度，并且经过色调偏移后在中点处和谐的相遇。同时，需要尽量避免使用红色与绿色。</li></ul><h4 id="默认中较好的离散调色板"><a href="#默认中较好的离散调色板" class="headerlink" title="默认中较好的离散调色板"></a>默认中较好的离散调色板</h4><p>在Color Brewer库中有一组精心设计的离散颜色映射</p><p><strong>Color Brewer库中的离散调色板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;BrBG&#x27;</span>, <span class="number">7</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;RdBu_r&#x27;</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917193108162.png" alt="image-20220917193108162"></p><p>在Matplotlib库中内置了coolwarm离散调色板，但是他的中间值和极值之间的对比度较小。</p><p><strong>coolwarm离散调色板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&#x27;coolwarm&#x27;</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917193131268.png" alt="image-20220917193131268"></p><h4 id="自定义离散调色板"><a href="#自定义离散调色板" class="headerlink" title="自定义离散调色板"></a>自定义离散调色板</h4><p>在seaborn库中可以使用diverging_palette函数（及choose_diverging_palette函数交互式小部件）为离散数据创建自定义调色板。diverging_palette函数可使用HULS颜色空间创建不同的调色板。diverging_palette函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.diverging_palette(h_neg, h_pos, s=<span class="number">75</span>, l=<span class="number">50</span>, sep=<span class="number">1</span>, n=<span class="number">6</span>, center=<span class="string">&#x27;light&#x27;</span>, as_cmap=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>diverging_palette函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>h_neg</strong></td><td>接收0~359之间的float，表示调色板负面范围色调。无默认值</td></tr><tr><td><strong>h_pos</strong></td><td>接收0~359之间的float，表示调色板正面范围色调。无默认值</td></tr><tr><td><strong>s</strong></td><td>接收0~100之间的float，表示两个范围色调饱和度。默认为75</td></tr><tr><td><strong>l</strong></td><td>接收0~100之间的float，表示两个范围色调亮度。默认为50</td></tr><tr><td><strong>n</strong></td><td>接收int，表示调色板颜色数目。默认值为6</td></tr><tr><td><strong>center</strong></td><td>接收light或dark，表示调色板中心是明或暗。默认为light</td></tr><tr><td><strong>as_cmap</strong></td><td>接收bool，表示是否返回Matplotlib颜色映射对象。默认为False</td></tr></tbody></table><p><strong>使用diverging_palette函数自定义离散调色板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.diverging_palette(<span class="number">240</span>, <span class="number">10</span>, n=<span class="number">7</span>))</span><br><span class="line">sns.palplot(sns.diverging_palette(<span class="number">150</span>, <span class="number">275</span>, s=<span class="number">80</span>, l=<span class="number">55</span>, n=<span class="number">7</span>))</span><br><span class="line"><span class="comment"># 创建中间是暗色的调色板</span></span><br><span class="line">sns.palplot(sns.diverging_palette(<span class="number">250</span>, <span class="number">15</span>, s=<span class="number">75</span>, l=<span class="number">40</span>, n=<span class="number">7</span>, center=<span class="string">&#x27;dark&#x27;</span>))</span><br><span class="line"><span class="comment"># 通过sep参数控制中间区域渐变宽度</span></span><br><span class="line">sns.palplot(sns.diverging_palette(<span class="number">150</span>, <span class="number">275</span>, s=<span class="number">80</span>, l=<span class="number">55</span>, n=<span class="number">7</span>, sep=<span class="number">80</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917193433667.png" alt="image-20220917193433667"></p><h3 id="设置默认调色板"><a href="#设置默认调色板" class="headerlink" title="设置默认调色板"></a>设置默认调色板</h3><p>color_palette函数还有一个与之相对应的函数，即set_palette函数。set_palette函数接受与color_palette函数相同的参数，可更改默认的Matplotlib参数，更改后所有的调色板将变为设置调色板配置。使用set_palette函数设置调色板。</p><p><strong>使用set_palette函数设置调色板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">y1 = x + <span class="number">1</span></span><br><span class="line">y2 = x + <span class="number">3</span></span><br><span class="line">y3 = x + <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showLine</span>(<span class="params">flip=<span class="number">1</span></span>):</span><br><span class="line">    sns.lineplot(x, y1)</span><br><span class="line">    sns.lineplot(x, y2)</span><br><span class="line">    sns.lineplot(x, y3)</span><br><span class="line"><span class="comment"># 使用默认调色板</span></span><br><span class="line">showLine()</span><br><span class="line">plt.title(<span class="string">&#x27;默认调色板&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># sns.set_palette函数设置调色板</span></span><br><span class="line">sns.set_palette(<span class="string">&#x27;YlOrRd_d&#x27;</span>)</span><br><span class="line">showLine()</span><br><span class="line">plt.title(<span class="string">&#x27;使用set_palette设置调色板&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">sns.<span class="built_in">set</span>()  <span class="comment"># 恢复所有默认设置</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">pic = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">with</span> sns.color_palette(<span class="string">&#x27;PuBuGn_d&#x27;</span>):  <span class="comment"># 临时配置调色板</span></span><br><span class="line">    pic.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    showLine()</span><br><span class="line">    plt.title(<span class="string">&#x27;使用color_palette设置调色板&#x27;</span>)</span><br><span class="line">pic.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 使用默认调色板</span></span><br><span class="line">showLine()</span><br><span class="line">plt.title(<span class="string">&#x27;默认调色板&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917183007934.png" alt="image-20220917183007934"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917183012104.png" alt="image-20220917183012104"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917193759005.png" alt="image-20220917193759005"></p><h1 id="绘制关系图"><a href="#绘制关系图" class="headerlink" title="绘制关系图"></a>绘制关系图</h1><ul><li>关系图可用于了解数据集中变量间的相互关联，探查一个变量与另外一个或几个变量的相关关系。其中，最基本的关系图是散点图、折线图和热力图，使用简单且易于理解的数据表示方法，但可以表示复杂的数据集结构。</li><li>在seaborn库中提供了scatterplot函数、lineplot函数、heatmap函数、relplot函数，在Matplotlib库的基础上优化了绘制散点图、折线图和热力图，并且通过色调、大小、样式增强显示。</li></ul><h2 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h2><p>在seaborn库中，可以使用scatterplot函数绘制散点图。scatterplot函数的使用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.scatterplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, style=<span class="literal">None</span>, size=<span class="literal">None</span>, data=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, sizes=<span class="literal">None</span>, size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, markers=<span class="literal">True</span>, style_order=<span class="literal">None</span>, x_bins=<span class="literal">None</span>, y_bins=<span class="literal">None</span>, units=<span class="literal">None</span>, estimator=<span class="literal">None</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, alpha=<span class="literal">None</span>, x_jitter=<span class="literal">None</span>, y_jitter=<span class="literal">None</span>, legend=<span class="string">&#x27;auto&#x27;</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>scatterplot函数的主要参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应变量名，使用series将会在轴上显示名称。无默认值</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>hue</strong></td><td>接收data中变量名，表示传入分类变量，以颜色分类。默认为None</td></tr><tr><td><strong>size</strong></td><td>接收data中变量名，表示传入分类变量，以标记大小分类。默认为None</td></tr><tr><td><strong>sizes</strong></td><td>接收list、dict、tuple，表示确定不同级别的size，可以一一映射，也可以设置最大最小范围。默认为None</td></tr><tr><td><strong>style</strong></td><td>接收data中变量名，表示传入分类变量，以标记形状分类。默认为None</td></tr><tr><td><strong>markers</strong></td><td>接收bool、list、dict，表示确定不同级别的style。默认为None</td></tr><tr><td><strong>alpha</strong></td><td>接收float、auto，表示点的透明度。默认为auto</td></tr><tr><td><strong>legend</strong></td><td>接收brief、full、False，表示图形图例绘制形式。默认为auto</td></tr><tr><td><strong>palette</strong></td><td>接收调色板，表示改变默认绘图颜色。默认为None</td></tr></tbody></table><p>示例：绘制散点图</p><p>离职率（Dimission Rate）是企业用于衡量企业内部人力资源流动状况的一个重要指标，通过对离职率的分析，可以了解企业对员工的吸引和满意情况。而企业、评价分数、平均工作时间等各种因素都会对人员流动造成一定的影响。</p><p>人员离职率数据的字段说明如表所示。</p><table><thead><tr><th><strong>字段名称</strong></th><th><strong>字段含义</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>满意度</strong></td><td>员工满意程度，取值为0~1之间，得分越高代表员工对企业越满意</td><td>0.38</td></tr><tr><td><strong>评分</strong></td><td>最近一次的员工表现度评分，取值为为0~1之间，得分越高代表员工表现越好）</td><td>0.53</td></tr><tr><td><strong>总项目数</strong></td><td>员工做过的总项目数</td><td>2</td></tr><tr><td><strong>每月平均工作小时数</strong></td><td>每月的平均工作时长（单位：小时）</td><td>157</td></tr><tr><td><strong>工龄</strong></td><td>员工在公司的时间（单位：年）</td><td>3</td></tr><tr><td><strong>工作事故</strong></td><td>员工是否在职期间有过工伤（0表示没有，1表示有）</td><td>0</td></tr><tr><td><strong>离职</strong></td><td>是否离职（0表示在职，1表示离职）</td><td>1</td></tr><tr><td><strong>5****年内升职</strong></td><td>最近5年是否有过升职（0表示没有，1表示有）</td><td>0</td></tr><tr><td><strong>部门</strong></td><td>员工所属的部门，包括销售部、财务部、人力资源部、IT部、管理部、技术部、支持部、产品开发部、市场部、研发部</td><td>销售部</td></tr><tr><td><strong>薪资</strong></td><td>薪资的水平，包括低、中、高</td><td>低</td></tr></tbody></table><p>基于人员离职率数据，绘制散点图分析产品开发部已离职的员工的评分与平均工作时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用seaborn库绘图</span></span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>, &#123;<span class="string">&#x27;font.sans-serif&#x27;</span>:[<span class="string">&#x27;simhei&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">hr = pd.read_csv(<span class="string">&#x27;../data/hr.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># 提取部门为产品开发部、离职为1的数据</span></span><br><span class="line">product = hr.iloc[(hr[<span class="string">&#x27;部门&#x27;</span>].values==<span class="string">&#x27;产品开发部&#x27;</span>) &amp; (hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">1</span>), :]</span><br><span class="line">ax = sns.scatterplot(x=<span class="string">&#x27;评分&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, data=product)</span><br><span class="line">plt.title(<span class="string">&#x27;评价分数与平均工作时间散点图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917194648768.png" alt="image-20220917194648768"></p><p><strong>通过对点着色和改变标记来突显类别</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">markers = &#123;<span class="string">&#x27;低&#x27;</span> : <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;中&#x27;</span> : <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;高&#x27;</span> : <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line">sns.scatterplot(x=<span class="string">&#x27;评分&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>,</span><br><span class="line">                     hue=<span class="string">&#x27;薪资&#x27;</span>, style=<span class="string">&#x27;薪资&#x27;</span>, markers=markers, data=product)</span><br><span class="line">plt.title(<span class="string">&#x27;评价分数与平均工作时间散点图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917194925939.png" alt="image-20220917194925939"></p><p>当添加第3个分类变量时，可以通过对点着色（故称色调语义）和改变标记来显示分类变量，以突显每个类别。如图所示。</p><p>由图可知，在产品开发部已经离职的员工中，员工平均每个月工作时间越短，对员工的评价分数较低，员工薪水也相对较低；对员工评价分数较高，员工薪水大多数处于中薪阶段，高薪的人员较少。说明员工平均月工作时间不仅影响企业对员工的评分高低，也可能影响员工薪水的高低。<strong>除此之外，读者还可以使用markers参数根据自身的需求为分组点设置自定义的标记。</strong></p><h2 id="绘制折线图"><a href="#绘制折线图" class="headerlink" title="绘制折线图"></a>绘制折线图</h2><p>在seaborn库中，可以使用lineplot函数绘制折线图。默认情况下，会使用每个x值对应的多个y值的均值绘制折线，并显示该估计值的置信区间带。lineplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.lineplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, size=<span class="literal">None</span>, style=<span class="literal">None</span>, data=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, sizes=<span class="literal">None</span>, size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, dashes=<span class="literal">True</span>, markers=<span class="literal">None</span>, style_order=<span class="literal">None</span>, units=<span class="literal">None</span>, estimator=<span class="string">&#x27;mean&#x27;</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, seed=<span class="literal">None</span>, sort=<span class="literal">True</span>, err_style=<span class="string">&#x27;band&#x27;</span>, err_kws=<span class="literal">None</span>, legend=<span class="string">&#x27;auto&#x27;</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>lineplot函数的部分参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应变量名，使用series将会在轴上显示名称。无默认值</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>dashes</strong></td><td>接收bool、list、dict，表示确定不同级别的style。默认为True</td></tr><tr><td><strong>estimator</strong></td><td>接收pandas方法、可调用函数、None。表示y在同一x级别的聚合方法。默认为mean</td></tr><tr><td><strong>ci</strong></td><td>接收int、sd、None，表示使用estimator参数聚合的置信区间大小，sd表示数据标准差。默认为95</td></tr><tr><td><strong>n_boot</strong></td><td>接收int，表示计算置信区间的数。默认为1000</td></tr><tr><td><strong>sort</strong></td><td>接收bool，表示按照x和y变量排序或出现顺序排序。默认为True</td></tr><tr><td><strong>err_style</strong></td><td>接收band、bars，表示是否用半透明误差带或离散误差棒绘制置信区间。默认为band</td></tr><tr><td><strong>err_band</strong></td><td>接收dict，表示用于控制误差线条的参数。默认为None</td></tr></tbody></table><p>波士顿房价数据的字段说明如表所示。</p><table><thead><tr><th><strong>字段名称</strong></th><th><strong>字段含义</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>犯罪率</strong></td><td>波士顿城镇人均犯罪率</td><td>0.00632</td></tr><tr><td><strong>居住面积占比</strong></td><td>住房占地面积超过25000平方英尺的住宅用地比例</td><td>18.0</td></tr><tr><td><strong>商业用地占比</strong></td><td>每个城镇非零售业务的比例</td><td>2.31</td></tr><tr><td><strong>河流穿行</strong></td><td>是否被Charles河流穿过，1表示是，0表示否</td><td>0</td></tr><tr><td><strong>一氧化氮含量</strong></td><td>一氧化氮浓度（每千万份）</td><td>0.538</td></tr><tr><td><strong>房间数</strong></td><td>每间住宅的平均房间数</td><td>6.575</td></tr><tr><td><strong>住宅占比</strong></td><td>早于1940年建造的住宅单位比例</td><td>65.2</td></tr><tr><td><strong>平均距离</strong></td><td>距离5个就业中心区域的加权平均距离</td><td>4.0900</td></tr><tr><td><strong>可达性指数</strong></td><td>径向高速公路的可达性指数</td><td>1</td></tr><tr><td><strong>财产税</strong></td><td>每1万美元的全额物业税率</td><td>296</td></tr><tr><td><strong>学生与老师占比</strong></td><td>城镇中的学生与教师比例</td><td>15.3</td></tr><tr><td><strong>黑人指标</strong></td><td>城镇中的黑人比例指标</td><td>396.90</td></tr><tr><td><strong>低收入人群</strong></td><td>反映当地低收入人群占总人口的比例</td><td>4.98</td></tr><tr><td><strong>房屋价格</strong></td><td>自住房屋价格的中位数（单位：1000美元）</td><td>24.0</td></tr></tbody></table><p>基于波士顿房价数据，绘制房间数和房屋价格的折线图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boston = pd.read_csv(<span class="string">&#x27;./data/boston_house_prices.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">sns.lineplot(x=<span class="string">&#x27;房间数（间）&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, data=boston, ci=<span class="number">0</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;房间数与房屋价格&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917195638129.png" alt="image-20220917195638129"></p><p>由图可知，折线具有较大的波动性，但整体呈现向上的趋势，可以大致认为当房间数相对较少时，房屋价格也相对较低；当房间数相对较多时，房屋价格逐渐升高。</p><p>为分析IT部部门中员工工龄与评分的关系，基于人员离职率数据，绘制IT部部门员工工龄和年度评分折线图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IT = hr.iloc[hr[<span class="string">&#x27;部门&#x27;</span>].values==<span class="string">&#x27;IT部&#x27;</span>, :]</span><br><span class="line">sns.lineplot(x=<span class="string">&#x27;工龄（年）&#x27;</span>, y=<span class="string">&#x27;评分&#x27;</span>, hue=<span class="string">&#x27;离职&#x27;</span>, data=IT, ci=<span class="number">0</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;工龄与上年度评价&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917195748122.png" alt="image-20220917195748122"></p><p>由图可知，在离职为1的员工中，工龄在2<del>3时，评分逐渐降低；工龄在3</del>5时，员工评分随着工龄的增大而增大；工龄在5以上时，评分又相对降低。在离职为0的员工中，工龄在6到7之间的员工评分有大幅度的变动，其余工龄阶段的员工评分在0.7上下。</p><h2 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h2><p>矩阵图是一种通过多因素综合思考，探索问题的方法。从问题事项中寻找成对的因素群，分别排列成行和列，从而找出其中行与列的相关性或相关程度大小。使用矩阵图可以同时评估多个变量之间的相关关系，常见的矩阵图为热力图。</p><p>在seaborn库中，可以使用heatmap函数绘制热力图。heatmap函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.heatmap(data, vmin=<span class="literal">None</span>, vmax=<span class="literal">None</span>, cmap=<span class="literal">None</span>, center=<span class="literal">None</span>, robust=<span class="literal">False</span>, annot=<span class="literal">None</span>, fmt=<span class="string">&#x27;.2g&#x27;</span>, annot_kws=<span class="literal">None</span>, linewidths=<span class="number">0</span>, linecolor=<span class="string">&#x27;white&#x27;</span>, cbar=<span class="literal">True</span>, cbar_kws=<span class="literal">None</span>, cbar_ax=<span class="literal">None</span>, square=<span class="literal">False</span>, xticklabels=<span class="string">&#x27;auto&#x27;</span>, yticklabels=<span class="string">&#x27;auto&#x27;</span>, mask=<span class="literal">None</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>heatmap函数的主要参数及说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>data</strong></td><td>接收可转换为ndarray的二维矩形数据集，表示用于绘图的数据集。无默认值</td></tr><tr><td><strong>vmin<strong><strong>，</strong></strong>vmax</strong></td><td>接收float，表示颜色映射的值得范围。默认为None</td></tr><tr><td><strong>cmap</strong></td><td>接收色彩映射或颜色列表，表示数值到颜色空间的映射。默认为None</td></tr><tr><td><strong>center</strong></td><td>接收float，表示以0为中心发散颜色。默认为None</td></tr><tr><td><strong>robust</strong></td><td>接收bool，如果为True且vmin或vmax不存在，则使用鲁棒分位数表示映射范围。默认为False</td></tr><tr><td><strong>annot</strong></td><td>接收bool或矩形数据集，表示是否在每个单元格显示数值。默认为None</td></tr><tr><td><strong>fmt</strong></td><td>接收str，表示传递给FacetGrid的其他参数。默认为.2g</td></tr><tr><td><strong>linewidths</strong></td><td>接收float，表示划分每个单元的线宽。默认为0</td></tr><tr><td><strong>linecolor</strong></td><td>接收颜色str，表示划分每个单元的线条颜色。默认为white</td></tr><tr><td><strong>square</strong></td><td>接收bool，表示是否使每个单元格为方形。默认为False</td></tr></tbody></table><p>基于波士顿房价数据绘制热力图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">corr = boston.corr()  <span class="comment"># 特征的相关系数矩阵</span></span><br><span class="line">sns.heatmap(corr)</span><br><span class="line">plt.title(<span class="string">&#x27;特征矩阵热力图&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;1.png&quot;</span>,dpi=<span class="number">200</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917200100011.png" alt="image-20220917200100011"></p><p>为了更加细节的显示出数据特点，可以添加数据标记，即设置参数annot&#x3D;True，辅助增强显示效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">sns.heatmap(corr, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;特征矩阵热力图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><h2 id="绘制矩阵网格图"><a href="#绘制矩阵网格图" class="headerlink" title="绘制矩阵网格图"></a>绘制矩阵网格图</h2><p>当数据增加到中等维度甚至更多时，在一个绘图面绘制图形会显得相对“拥挤”。而将数据分成不同子集，在多个绘图面分别绘制图形将是一个较好的方法，这种绘图方式被称为网格图。Matplotlib库能够较好的使用子图，用于“手动”分组数据并绘制多个面图形，seaoren库在Matplotlib库的基础上直接使用数据集“自动”分组绘制网格图。但是，seaoren库绘制网格图要求数据必须是整洁的数据框形式。</p><p>PairGrid类可用于绘制数据中程度关系的网格图。PairGrid类将数据集中的每个变量映射到多个网格中的列和行，并可以使用不同的绘图函数绘制上三角和下三角的双变量图，显示数据集中每个变量的两两之间的相关关系。此外，还可以在对角线上显示每个变量的边缘分布。PairGrid类的基础使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.PairGrid(data, hue=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_kws=<span class="literal">None</span>, <span class="built_in">vars</span>=<span class="literal">None</span>, x_vars=<span class="literal">None</span>, y_vars=<span class="literal">None</span>, corner=<span class="literal">False</span>, diag_sharey=<span class="literal">True</span>, height=<span class="number">2.5</span>, aspect=<span class="number">1</span>, layout_pad=<span class="number">0.5</span>, despine=<span class="literal">True</span>, dropna=<span class="literal">True</span>, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>PairGrid类的部分参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>hue_kws</strong></td><td>接收param  dict，表示设置每个子图绘图元素的颜色变化（如散点图的标记颜色）。默认为None</td></tr><tr><td><strong>vars</strong></td><td>接收list，表示data中使用变量，否则使用所用numeric类型变量。默认为None</td></tr><tr><td><strong>{x<strong><strong>，</strong></strong>y}_vars</strong></td><td>接收list，表示选择行和列变量，即自定义图形。默认为None</td></tr><tr><td><strong>dropna</strong></td><td>接收bool，表示是否在删除含有缺失值得样本。默认为True</td></tr></tbody></table><p>PairGrid类同样在创建完网格图对象后，需要在每个绘图面绘制子图。PairGrid类中可使用以下5种函数进行区域绘图。</p><ul><li>map函数可在所有区域绘制图形。</li><li>map_lower与map_upper函数可分别在下三角与上三角区域绘制图形。</li><li>map_diag函数与map_offdiag函数可分别在对角线和非对角线区域绘制图形。</li></ul><p>基于波士顿房价数据绘制犯罪率、一氧化氮含量、房间数与房屋价格两两之间的相关性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(boston, <span class="built_in">vars</span>=[<span class="string">&#x27;犯罪率&#x27;</span>, <span class="string">&#x27;一氧化氮含量（ppm）&#x27;</span>, <span class="string">&#x27;房间数（间）&#x27;</span>, <span class="string">&#x27;房屋价格（千美元）&#x27;</span>])</span><br><span class="line">g = g.<span class="built_in">map</span>(plt.scatter)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;矩阵网格图&#x27;</span>, verticalalignment=<span class="string">&#x27;bottom&#x27;</span> , y=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD%20(1).png" alt="下载 (1)"></p><p>由图可知，房间数目与房价呈正相关，犯罪率与房价呈负相关。</p><p>PairGrid类可以用hue参数表示第3各类别变量。用销售部已离职的员工数据绘制不同颜色的数据子集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取部门为销售部，离职为1的数据</span></span><br><span class="line">sell = hr.iloc[(hr[<span class="string">&#x27;部门&#x27;</span>].values==<span class="string">&#x27;销售部&#x27;</span>) &amp; (hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">1</span>), :]</span><br><span class="line">g = sns.PairGrid(sell,</span><br><span class="line">                 <span class="built_in">vars</span>=[<span class="string">&#x27;满意度&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>],</span><br><span class="line">                 hue=<span class="string">&#x27;薪资&#x27;</span>, palette=<span class="string">&#x27;Set3&#x27;</span>)</span><br><span class="line">g = g.map_diag(sns.kdeplot)</span><br><span class="line">g = g.map_offdiag(plt.scatter)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;不同颜色的矩阵网格图&#x27;</span>, verticalalignment=<span class="string">&#x27;bottom&#x27;</span> , y=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917201153358.png" alt="image-20220917201153358"></p><p>在网格图中，满意度和评分表示了行和列，并使用了不同的颜色展示了薪资的不同类别</p><h2 id="绘制关系网格组合图"><a href="#绘制关系网格组合图" class="headerlink" title="绘制关系网格组合图"></a>绘制关系网格组合图</h2><p>relplot函数是基于FacetGrid类的，可以实现统一访scatterplot函数和lineplot函数绘制多图网格的关系图。relplot函数的使用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.relplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, size=<span class="literal">None</span>, style=<span class="literal">None</span>, data=<span class="literal">None</span>, row=<span class="literal">None</span>, col=<span class="literal">None</span>, col_wrap=<span class="literal">None</span>, row_order=<span class="literal">None</span>, col_order=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, sizes=<span class="literal">None</span>, size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, markers=<span class="literal">None</span>, dashes=<span class="literal">None</span>, style_order=<span class="literal">None</span>, legend=<span class="string">&#x27;auto&#x27;</span>, kind=<span class="string">&#x27;scatter&#x27;</span>, height=<span class="number">5</span>, aspect=<span class="number">1</span>, facet_kws=<span class="literal">None</span>, units=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>relplot函数通过kind参数选择要使用的绘图函数，通过col和row参数控制网格图的行列。relplot函数的部分参数及说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收data中变量名。只能是定量变量。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>row<strong><strong>，</strong></strong>col</strong></td><td>接收data中变量名，表示传入分类变量，决定网格图的分面。默认为None</td></tr><tr><td><strong>row_order<strong><strong>，</strong></strong>col_order</strong></td><td>接收list，表示传入分类变量类别名称列表并以此为顺序。默认为None</td></tr><tr><td><strong>kind</strong></td><td>接收scatter、line，表示选择绘图函数。默认为scatter</td></tr><tr><td><strong>height</strong></td><td>接收scalar，表示网格图的高度。默认为5</td></tr><tr><td><strong>aspect</strong></td><td>接收scalar，表示网格图的宽度。默认为1</td></tr><tr><td><strong>facet_kws</strong></td><td>接收dict，表示传递给FacetGrid的其他参数。默认为None</td></tr></tbody></table><p>人员离职率数据，根据销售部已离职的员工数据，通过relplot函数绘制单构面散点图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sell = hr.iloc[(hr[<span class="string">&#x27;部门&#x27;</span>].values==<span class="string">&#x27;销售部&#x27;</span>) &amp; (hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">1</span>), :]</span><br><span class="line">sns.relplot(x=<span class="string">&#x27;满意度&#x27;</span>, y=<span class="string">&#x27;评分&#x27;</span>, hue=<span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">            data=sell)</span><br><span class="line">plt.title(<span class="string">&#x27;满意度水平与上年度评价&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917201541079.png" alt="image-20220917201541079"></p><p>由图可知，在销售部部门且已经离职的员工中，人员评估分数越高，员工对公司的满意度越高。</p><p>根据部门为IT部的数据，传入分类变量薪资和工作事故到col和row中，绘制网格图，设置col_wrap参数可以控制列数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">&#x27;满意度&#x27;</span>, y=<span class="string">&#x27;评分&#x27;</span>, hue=<span class="string">&#x27;5年内升职&#x27;</span>, row=<span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">            col=<span class="string">&#x27;工作事故&#x27;</span>, data=IT)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">sns.relplot(x=<span class="string">&#x27;满意度&#x27;</span>, y=<span class="string">&#x27;评分&#x27;</span>, hue=<span class="string">&#x27;5年内升职&#x27;</span>, col=<span class="string">&#x27;工作事故&#x27;</span>,</span><br><span class="line">            col_wrap=<span class="number">1</span>, data=IT)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD%20(2).png" alt="下载 (2)"></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD%20(3).png" alt="下载 (3)"></p><h1 id="绘制分类图"><a href="#绘制分类图" class="headerlink" title="绘制分类图"></a>绘制分类图</h1><p>在seaborn库中的分类图将分类变量每个级别的每个观察结果显示出来，显示每个观察分布的抽象表示，即使用分类数据进行绘图。分类图包括了条形图、单变量分布图、分类散点图、增强箱线图和分类网格组合图。</p><h2 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h2><p>在seaborn库中，可以使用barplot函数绘制条形图。barplot函数的基本使用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.barplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, estimator=&lt;function mean&gt;, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, units=<span class="literal">None</span>, seed=<span class="literal">None</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, palette=<span class="literal">None</span>, saturation=<span class="number">0.75</span>, errcolor=<span class="string">&#x27;.26&#x27;</span>, errwidth=<span class="literal">None</span>, capsize=<span class="literal">None</span>, dodge=<span class="literal">True</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>barplot函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应变量名，使用series将会在轴上显示名称。无默认值</td></tr><tr><td><strong>hue</strong></td><td>接收data中变量名，表示传入分类变量，以颜色分类。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame、array或list  of arrays，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>order</strong></td><td>接收lists  of strings，表示绘制分类级别。默认值为None</td></tr><tr><td><strong>color</strong></td><td>接收特定str或包含颜色字符串的array，表示所有元素的颜色或渐变调色板的种子。默认为None</td></tr><tr><td><strong>palette</strong></td><td>接收调色板、list或dict，表示用于改变默认绘图颜色。默认为None</td></tr></tbody></table><p>基于人员离职率数据，使用barplot函数绘制各部门人员总数条形图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码4-29</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">boston = pd.read_csv(<span class="string">&#x27;./data/boston_house_prices.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">hr = pd.read_csv(<span class="string">&#x27;./data/hr.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用seaborn库绘图</span></span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>, &#123;<span class="string">&#x27;font.sans-serif&#x27;</span>:[<span class="string">&#x27;simhei&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># 设置正常显示负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">count = hr[<span class="string">&#x27;部门&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line">sns.barplot(x=count.index, y=count.values)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;部门&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各部门人数对比&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917203314608.png" alt="image-20220917203314608"></p><p>由图可知，销售部部门的人数相对较多，管理部部门的人数相对较少。</p><p>当条形图需要显示每个类别中的观察数量，而不是计算第二个变量的统计量时，可以使用计数图实现。计数图可以认为是应用于到分类变量，比较类别间计数差的直方图。</p><p>在seaborn库中，可以使用countplot函数绘制计数图。countplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.countplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, palette=<span class="literal">None</span>, saturation=<span class="number">0.75</span>, dodge=<span class="literal">True</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>countplot函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应变量名，使用series将会在轴上显示名称。无默认值</td></tr><tr><td><strong>hue</strong></td><td>接收data中变量名，表示传入分类变量，以颜色分类。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>color</strong></td><td>接收特定str或包含颜色字符串的array，表示图形的颜色。默认为None</td></tr><tr><td><strong>palette</strong></td><td>接收调色板，表示用于改变默认绘图颜色。默认为None</td></tr></tbody></table><p>countplot函数不能同时输入x与y参数，只能分开输入在不同轴上显示，且计数图没有误差棒。基于人员离职率数据绘制x轴与y轴显示数据的计数图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;工龄（年）&#x27;</span>, data=hr)</span><br><span class="line">plt.title(<span class="string">&#x27;x轴显示数据的计数图&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;计数&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">sns.countplot(y=<span class="string">&#x27;工龄（年）&#x27;</span>, data=hr)</span><br><span class="line">plt.title(<span class="string">&#x27;y轴显示数据的计数图&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;计数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917203702156.png" alt="image-20220917203702156"></p><p>由图可知，不同工龄的员工数量，其中工龄为3的员工数量最多，其次是工龄为2和4的，工龄为7、8、10的员工数量都相对较少，说明了公司员工在工作到一定时间后有离职的情况。</p><p>根据某个类别，绘制多酚类嵌套的计数图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=<span class="string">&#x27;5年内升职&#x27;</span>, hue=<span class="string">&#x27;薪资&#x27;</span>, data=hr, palette=<span class="string">&#x27;Set2&#x27;</span>)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;多变量散点图&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/" alt="image-20220917203923193"></p><p>由图可知，大多数不同薪资的员工在5年内均未有升职的情况。</p><h2 id="绘制单变量分布图"><a href="#绘制单变量分布图" class="headerlink" title="绘制单变量分布图"></a>绘制单变量分布图</h2><p>直方图是一种对数据分布情况的图形表示，是一种二维统计图表，它的两个坐标分别是统计样本和该样本对应的某个属性的度量，以长条图（bar）的形式具体表现。直方图即为单变量分布图。在seaborn库中，可以使用distplot函数绘制单变量分布。distplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.distplot(a=<span class="literal">None</span>, bins=<span class="literal">None</span>, hist=<span class="literal">True</span>, kde=<span class="literal">True</span>, rug=<span class="literal">False</span>, fit=<span class="literal">None</span>, hist_kws=<span class="literal">None</span>, kde_kws=<span class="literal">None</span>, rug_kws=<span class="literal">None</span>, fit_kws=<span class="literal">None</span>, color=<span class="literal">None</span>, vertical=<span class="literal">False</span>, norm_hist=<span class="literal">False</span>, axlabel=<span class="literal">None</span>, label=<span class="literal">None</span>, ax=<span class="literal">None</span>, x=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>distplot函数的部分参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>a</strong></td><td>接收series、list、array，表示观察的数据。如果是具有name属性的series对象，则该名称将用于标记数据轴。默认为None</td></tr><tr><td><strong>bins</strong></td><td>接收int，表示长方形数目，如hist函数bins参数。默认为None</td></tr><tr><td><strong>hist</strong></td><td>接收bool，表示是否绘制直方图。默认为True</td></tr><tr><td><strong>kde</strong></td><td>接收bool，表示是否绘制高斯核密度估计。默认为True</td></tr><tr><td><strong>rug</strong></td><td>接收bool，表示是否添加分布观测刻度。默认为False</td></tr><tr><td><strong>fit</strong></td><td>接收随机变量对象，用于拟合分布。默认为None</td></tr><tr><td><strong>color</strong></td><td>接收特定str，表示除拟合曲线外的所有内容颜色。默认为None</td></tr><tr><td><strong>{hist<strong><strong>，</strong></strong>kde<strong><strong>，</strong></strong>rug<strong><strong>，</strong></strong>fit}_kws</strong></td><td>接收字典，表示底层绘图函数的关键字参数。默认为None</td></tr></tbody></table><p>基于波士顿房价数据绘制单变量分布图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(boston[<span class="string">&#x27;财产税&#x27;</span>], kde=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;单变量的分布图&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;数量&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917204356369.png" alt="image-20220917204356369"></p><p>由图可知，每1万美元的全额物业税率，即财产税，主要集中在200<del>400和600</del>700区间，且在200~400区间的数量相关较大。</p><h2 id="绘制分类散点图"><a href="#绘制分类散点图" class="headerlink" title="绘制分类散点图"></a>绘制分类散点图</h2><h3 id="stripplot函数"><a href="#stripplot函数" class="headerlink" title="stripplot函数"></a>stripplot函数</h3><p>使用stripplot函数绘制分布散点图，是显示分类变量级别中某些定量变量的值的一种简单方法。分类散点图可以单独的显示，但是有时候也可以作为其他分类图的辅助，用于显示所有的观察结果和基本分布。stripplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.stripplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, jitter=<span class="literal">True</span>, dodge=<span class="literal">False</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, palette=<span class="literal">None</span>, size=<span class="number">5</span>, edgecolor=<span class="string">&#x27;gray&#x27;</span>, linewidth=<span class="number">0</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>stripplot函数的部分参数及说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y<strong><strong>，</strong></strong>hue</strong></td><td>接收data中变量名，表示选入的绘图变量，hue传入分类变量，以颜色分类。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame、array、list、series，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>order<strong><strong>，</strong></strong>hue_order</strong></td><td>接收str、list，表示指定绘图分类级别。默认为None</td></tr><tr><td><strong>jitter</strong></td><td>接收float、True、1，表示添加均匀随机噪声（仅改变图形）优化图形显示。默认为True</td></tr><tr><td><strong>dodge</strong></td><td>接收bool，表示当使用分类嵌套时是否沿着分类轴分离。默认为False</td></tr><tr><td><strong>orient</strong></td><td>接收v、h，表示图形的方向。默认为None</td></tr></tbody></table><p><strong>绘制简单水平分布散点图来分析销售部已离职员工每月平均工作小时数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sale = hr.iloc[(hr[<span class="string">&#x27;部门&#x27;</span>].values==<span class="string">&#x27;销售部&#x27;</span>) &amp; (hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">1</span>), :]</span><br><span class="line">sns.stripplot(x=sale[<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;简单水平分布散点图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917204744404.png" alt="image-20220917204744404"></p><p>由图可知，销售部已离职的员工每个月的工作时间大致可分为两个时间段，分别是125-165小时和210-250小时。</p><p>通过分类变量对条带进行分组，并添加随机噪声抖动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取离职为1的数据</span></span><br><span class="line">hr1 = hr.iloc[hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">1</span>, :]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, data=hr1)  <span class="comment"># 默认添加随机噪声</span></span><br><span class="line">plt.title(<span class="string">&#x27;默认随机噪声抖动&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>,</span><br><span class="line">                 data=hr1, jitter=<span class="literal">False</span>)  <span class="comment"># 不添加随机噪声</span></span><br><span class="line">plt.title(<span class="string">&#x27;无随机噪声抖动&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917205018724.png" alt="image-20220917205018724"></p><p>添加噪声抖动与不添加噪声抖动的图形不一致，没有添加噪声的图形相对较平缓。</p><p>绘制图形来分析高新在职的员工在5年内是否晋升与平均每月工作时长的关系，并使用多分类功能，将一个分类变量嵌套进另一个分类变量。以颜色显示第二个分类条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取高薪在职的数据</span></span><br><span class="line">hr2 = hr.iloc[(hr[<span class="string">&#x27;薪资&#x27;</span>].values==<span class="string">&#x27;高&#x27;</span>) &amp; (hr[<span class="string">&#x27;离职&#x27;</span>].values==<span class="number">0</span>), :]</span><br><span class="line">sns.stripplot(x=<span class="string">&#x27;5年内升职&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>,</span><br><span class="line">              hue=<span class="string">&#x27;部门&#x27;</span>, data=hr2, jitter=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;前5年是否晋升与平均每月工作时长&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917205343874.png" alt="image-20220917205343874"></p><p>由图可知，在高薪在职的员工中，近5年得到晋升的员工相对较少，大多数部门的员工没有得到晋升，这样容易导致企业员工的流动，增加企业员工的离职率。</p><p>修改dodge参数，使变量沿分类轴方向分类，而不是覆盖重叠。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">13</span>))</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同部门的平均每月工作时长&#x27;</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, hue=<span class="string">&#x27;5年内升职&#x27;</span>, data=hr2)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, hue=<span class="string">&#x27;5年内升职&#x27;</span>, </span><br><span class="line">              data=hr2, dodge=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD%20(2).png" alt="下载 (2)"> </p><p>由运行结果可知，修改dodge参数之后，变量沿分类轴方向分类，而不是覆盖重叠，这将会使分类更加清晰。</p><h3 id="swarmplot函数"><a href="#swarmplot函数" class="headerlink" title="swarmplot函数"></a>swarmplot函数</h3><p><strong>stripplot函数添加随机噪声增加图形抖动以及将变量沿着分类轴绘制后，仍然有重叠的可能。而使用swarmplot函数可以避免这种情况，能够绘制出具有非重叠点的分类散点图。</strong>swarmplot函数的使用格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.swarmplot(x=None, y=None, hue=None, data=None, order=None, hue_order=None, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=&#x27;gray&#x27;, linewidth=0, ax=None, **kwargs)</span><br></pre></td></tr></table></figure><p>swarmplot函数和stripplot函数在参数上基本一致，只是swarmplot函数缺少了jitter函数。因为swarmplot函数显示的是分布密度，所以不需要添加抖动项。</p><p>基于人员离职率数据，根据高薪在职的员工数据，使用swarmplot函数绘制简单的分布密度散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>, data=hr2)</span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同部门的平均每月工作时长&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917205907141.png" alt="image-20220917205907141"></p><p>传入hue参数添加多个嵌套的分类变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=<span class="string">&#x27;部门&#x27;</span>, y=<span class="string">&#x27;每月平均工作小时数（小时）&#x27;</span>,</span><br><span class="line">                 hue=<span class="string">&#x27;5年内升职&#x27;</span>, data=hr2)</span><br><span class="line">plt.xticks(rotation=<span class="number">30</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同部门的平均每月工作时长&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220917210013445.png" alt="image-20220917210013445"></p><h2 id="绘制增强散点图"><a href="#绘制增强散点图" class="headerlink" title="绘制增强散点图"></a>绘制增强散点图</h2><p>传统的箱线图对四分位数以外的数据信息提供很少，当数据量变得很大时，会显示大量极端值，忽略了部分信息，使用增强箱线图能较好解决这两个问题。增强箱线图类似于绘制分布的非参数表示的箱形图，其中所有特征对应于实际值。它通过绘制更多的分位数，提供了有关分布形状的更多信息，特别是在尾部。</p><p>在seaborn库中，可以使用boxenplot函数绘制增强箱线图。boxenplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.boxenplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, palette=<span class="literal">None</span>, saturation=<span class="number">0.75</span>, width=<span class="number">0.8</span>, dodge=<span class="literal">True</span>, k_depth=<span class="string">&#x27;tukey&#x27;</span>, linewidth=<span class="literal">None</span>, scale=<span class="string">&#x27;exponential&#x27;</span>, outlier_prop=<span class="number">0.007</span>, trust_alpha=<span class="number">0.05</span>, showfliers=<span class="literal">True</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>boxenplot函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应变量名，使用series将会在轴上显示名称。无默认值</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>orient</strong></td><td>接收v或h，表示绘图的方向（垂直或水平），默认为None</td></tr><tr><td><strong>k_depth</strong></td><td>接收proportion、tukey、trustworthy，表示不同的箱盒数量，被扩展的比例。默认为tukey</td></tr><tr><td><strong>scale</strong></td><td>接收linear、exponential、area，表示显示箱盒宽度的方法。默认为exponential</td></tr><tr><td><strong>ax</strong></td><td>接收series，表示轴对象以绘制图形，否则使用当前轴。默认为None</td></tr></tbody></table><p>波士顿房价数据绘制普通箱线图与增强箱线图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&#x27;普通箱线图&#x27;</span>)</span><br><span class="line">boston[<span class="string">&#x27;房间数(取整)&#x27;</span>] = boston[<span class="string">&#x27;房间数（间）&#x27;</span>].<span class="built_in">map</span>(math.floor)  <span class="comment"># 对房间数取整</span></span><br><span class="line">sns.boxplot(x=<span class="string">&#x27;房间数(取整)&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, </span><br><span class="line">            data=boston, orient=<span class="string">&#x27;v&#x27;</span>, ax=axes[<span class="number">0</span>])  <span class="comment"># 普通</span></span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&#x27;增强箱线图&#x27;</span>)</span><br><span class="line">sns.boxenplot(x=<span class="string">&#x27;房间数(取整)&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, </span><br><span class="line">              data=boston, orient=<span class="string">&#x27;v&#x27;</span>, ax=axes[<span class="number">1</span>])  <span class="comment"># 增强</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220918160335199.png" alt="image-20220918160335199"></p><p>由图可知，房间数目与房价有密切关系，房间数目少，房价低；房间数目多，则房价就明显升高。增强箱线图显示了更广的分位数，并通过宽度展示出对应的分布，从而接纳了更多的异常值信息，减少了信息损失。</p><h2 id="绘制分类网格组合图"><a href="#绘制分类网格组合图" class="headerlink" title="绘制分类网格组合图"></a>绘制分类网格组合图</h2><p>分类网格组合图可在数据集中绘制成对关系。pairplot函数将构建一个轴网络，以便于每一个数值变量映射到多个轴的网格中的列和行。</p><p>pairplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.pairplot(data, hue=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, palette=<span class="literal">None</span>, <span class="built_in">vars</span>=<span class="literal">None</span>, x_vars=<span class="literal">None</span>, y_vars=<span class="literal">None</span>, kind=<span class="string">&#x27;scatter&#x27;</span>, diag_kind=<span class="string">&#x27;auto&#x27;</span>, markers=<span class="literal">None</span>, height=<span class="number">2.5</span>, aspect=<span class="number">1</span>, corner=<span class="literal">False</span>, dropna=<span class="literal">False</span>, plot_kws=<span class="literal">None</span>, diag_kws=<span class="literal">None</span>, grid_kws=<span class="literal">None</span>, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>pairplot函数通过kind参数选择要使用的绘图函数，通过col和row参数控制网格图的行列。其部分参数及说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>data</strong></td><td>接收DataFrame，表示用于绘图的数据集。默认为None</td></tr><tr><td><strong>hue</strong></td><td>接收str，表示使用指定变量为分类变量画图。默认为None</td></tr><tr><td><strong>hue_order</strong></td><td>接收str，表示在调色板中订购色调变量的级别，默认为None</td></tr><tr><td><strong>palette</strong></td><td>接收dict、调色板，表示映射hue变量的颜色集。如果是字典，则键应为hue变量中的值，默认为None</td></tr><tr><td><strong>vars</strong></td><td>接收numeric类型的变量list，表示data需要使用的变量。默认为None</td></tr><tr><td><strong>x_vars<strong><strong>，</strong></strong>y_vars</strong></td><td>接收numeric类型的变量list，表示用于图的行和列。默认为None</td></tr><tr><td><strong>kind</strong></td><td>接收scatter、kde、hist、reg，表示选择绘图函数。默认为scatter</td></tr><tr><td><strong>height</strong></td><td>接收scalar，表示网格图的高度。默认为2.5</td></tr><tr><td><strong>aspect</strong></td><td>接收scalar，表示网格图的宽度。默认为1</td></tr><tr><td><strong>dropna</strong></td><td>接收bool、optional，表示是否剔除缺失值。默认为False</td></tr></tbody></table><p>基于波士顿房价数据，通过pairplot函数绘制多变量之间的关系图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(boston[[<span class="string">&#x27;犯罪率&#x27;</span>, <span class="string">&#x27;一氧化氮含量（ppm）&#x27;</span>, <span class="string">&#x27;房间数（间）&#x27;</span>, <span class="string">&#x27;低收入人群&#x27;</span>, <span class="string">&#x27;房屋价格（千美元）&#x27;</span>]])</span><br><span class="line">plt.suptitle(<span class="string">&#x27;多变量散点图&#x27;</span>, verticalalignment=<span class="string">&#x27;bottom&#x27;</span>, y=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><p>由图可知，犯罪率、一氧化氮含量、房间数、低收入人群、房屋价格几个字段的两两之间的相关关系，以及在对角线上显示了犯罪率、一氧化氮含量、房间数、低收入人群、房屋价格的分布情况。</p><p>根据销售部已离职的员工数据，绘制指定分类变量的散点图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hr3 = sale[[<span class="string">&#x27;满意度&#x27;</span>, <span class="string">&#x27;总项目数&#x27;</span>, <span class="string">&#x27;工龄（年）&#x27;</span>, <span class="string">&#x27;薪资&#x27;</span>]]</span><br><span class="line">sns.pairplot(hr3, hue=<span class="string">&#x27;薪资&#x27;</span>)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;多变量分类散点图&#x27;</span>, verticalalignment=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/%E4%B8%8B%E8%BD%BD%20(1).png" alt="下载 (1)"></p><h1 id="绘制回归图"><a href="#绘制回归图" class="headerlink" title="绘制回归图"></a>绘制回归图</h1><p>线性回归是利用数理统计中回归分析确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。在seaborn库中，常见的回归图包括线性回归拟合图、线性回归网格组合图。</p><h2 id="线性回归拟合图"><a href="#线性回归拟合图" class="headerlink" title="线性回归拟合图"></a>线性回归拟合图</h2><p>在seaborn库中，可以使用regplot函数绘制线性回归拟合图。regplot函数的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.regplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, data=<span class="literal">None</span>, x_estimator=<span class="literal">None</span>, x_bins=<span class="literal">None</span>, x_ci=<span class="string">&#x27;ci&#x27;</span>, scatter=<span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, units=<span class="literal">None</span>, order=<span class="number">1</span>, logistic=<span class="literal">False</span>, lowess=<span class="literal">False</span>, robust=<span class="literal">False</span>, logx=<span class="literal">False</span>, x_partial=<span class="literal">None</span>, y_partial=<span class="literal">None</span>, truncate=<span class="literal">False</span>, dropna=<span class="literal">True</span>, x_jitter=<span class="literal">None</span>, y_jitter=<span class="literal">None</span>, label=<span class="literal">None</span>, color=<span class="literal">None</span>, marker=<span class="string">&#x27;o&#x27;</span>, scatter_kws=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, ax=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>regplot主要参数及说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x<strong><strong>，</strong></strong>y</strong></td><td>接收array、str、series，表示输入变量、字符串应该是data中对应列名，使用series将会在轴上显示名称。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示传入数据，列为特征。默认为None</td></tr><tr><td><strong>x_estimator</strong></td><td>接收可调用的映射向量。应用于每一个x值并绘制估计图形，如果输入x_ci，将会绘制一个置信区间。默认为None</td></tr><tr><td><strong>x_ci</strong></td><td>接收ci、sd、0到100的int，表示离散值集中趋势的置信区间大小。默认为ci</td></tr><tr><td><strong>ci</strong></td><td>接收0到100的int，表示y轴置信区间大小。默认为95</td></tr><tr><td><strong>scatter</strong></td><td>接收bool，表示是否绘制散点图。默认为True</td></tr><tr><td><strong>logistic</strong></td><td>接收bool，表示是否使用逻辑回归。默认为False</td></tr><tr><td><strong>lowess</strong></td><td>接收bool，表示是否使用局域回归。默认为False</td></tr><tr><td><strong>robust</strong></td><td>接收bool，表示是否使用稳定回归。默认为False</td></tr><tr><td><strong>logx</strong></td><td>接收bool，表示是否使用对数回归。默认为False</td></tr><tr><td><strong>{x,y}_jitter</strong></td><td>接收float，表示设置均匀随机噪声添加到x或y变量中，只改变图形外观。默认为None</td></tr></tbody></table><p>基于波士顿房价数据，利用regplot函数绘制修改置信区间ci参数前后的线性回归拟合图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码4-42</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>, &#123;<span class="string">&#x27;font.sans-serif&#x27;</span>:[<span class="string">&#x27;simhei&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">boston = pd.read_csv(<span class="string">&#x27;../data/boston_house_prices.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&#x27;修改前的线性回归拟合图&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&#x27;修改后的线性回归拟合图&#x27;</span>)</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;房间数（间）&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, data=boston, ax=axes[<span class="number">0</span>])</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;房间数（间）&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, data=boston, ci=<span class="number">50</span>, ax=axes[<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220918170703197.png" alt="image-20220918170703197"></p><p>由图可知，房间数和房屋价格成线性相关关系。其中，修改置信区间ci参数前后得到的线性回归拟合图一致，准确度也不相同。</p><h2 id="绘制线性回归网格组合图"><a href="#绘制线性回归网格组合图" class="headerlink" title="绘制线性回归网格组合图"></a>绘制线性回归网格组合图</h2><p>在seaborn库中，可以使用lmplot函数绘制线性回归网格组合图。lmplot函数与regplot函数有相似的使用格式，lmplot函数的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seaborn.lmplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, data=<span class="literal">None</span>, hue=<span class="literal">None</span>, col=<span class="literal">None</span>, row=<span class="literal">None</span>, palette=<span class="literal">None</span>, col_wrap=<span class="literal">None</span>, height=<span class="number">5</span>, aspect=<span class="number">1</span>, markers=<span class="string">&#x27;o&#x27;</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>, hue_order=<span class="literal">None</span>, col_order=<span class="literal">None</span>, row_order=<span class="literal">None</span>, legend=<span class="literal">True</span>, legend_out=<span class="literal">True</span>, x_estimator=<span class="literal">None</span>, x_bins=<span class="literal">None</span>, x_ci=<span class="string">&#x27;ci&#x27;</span>, scatter=<span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, units=<span class="literal">None</span>, seed=<span class="literal">None</span>, order=<span class="number">1</span>, logistic=<span class="literal">False</span>, lowess=<span class="literal">False</span>, robust=<span class="literal">False</span>, logx=<span class="literal">False</span>, x_partial=<span class="literal">None</span>, y_partial=<span class="literal">None</span>, truncate=<span class="literal">True</span>, x_jitter=<span class="literal">None</span>, y_jitter=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>lmplot函数是将regplot函数与FacetGrid类结合，能够绘制3变量的图形及修改全局高宽比，但是lmplot函数输入数据只能是数据的特征名。lmplot函数的常用参数及其说明如表所示。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>hue, col, row</strong></td><td>接收str，表示定义数据子集变量，将在不同构面绘图。默认为None</td></tr><tr><td><strong>data</strong></td><td>接收DataFrame，表示传入数据，列为特征。默认为None</td></tr><tr><td><strong>palette</strong></td><td>接收调色板名称、list、dict，表示用于hue变量不同类别的颜色。默认为None</td></tr><tr><td><strong>height</strong></td><td>接收float，表示每个刻面的高度。默认为5</td></tr><tr><td><strong>aspect</strong></td><td>接收float，表示每个刻面的宽度。默认为1</td></tr><tr><td><strong>share{x, y}</strong></td><td>接收bool、col、row，表示是否共享x轴或y轴。默认为True</td></tr></tbody></table><p>基于波士顿房价数据，以河流穿行为类别绘制低收入人群与房屋价格两个变量的回归网格组合图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">&#x27;低收入人群&#x27;</span>, y=<span class="string">&#x27;房屋价格（千美元）&#x27;</span>, col=<span class="string">&#x27;河流穿行&#x27;</span>, data=boston)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220918170937055.png" alt="image-20220918170937055"></p><p>由图可知，无论是否被河流穿过，变量低收入人群与变量房屋价格呈现较密切的线性拟合趋势，且绝大部分都是分布在未被河流穿过的情况下。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用于数据可视化的数据预处理</title>
      <link href="/2022/09/16/%E7%94%A8%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2022/09/16/%E7%94%A8%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h1><p>数据的读取是进行数据预处理、数据建模和分析的基础。对于不同的数据文件，pandas提供了不同函数进行读取。</p><p>pandas内置了10余种读写函数。常见的数据文件格式有3种形式，分别是CSV文件、Excel文件和数据库。</p><h2 id="读取CSV文件数据"><a href="#读取CSV文件数据" class="headerlink" title="读取CSV文件数据"></a>读取CSV文件数据</h2><p>CSV文件是以纯文本形式存储表格数据（数字和文本）。</p><p>CSV文件由任意数目的记录组成，记录间以某种换行符分隔。每条记录由字段组成，字段间的分隔符是其他字符或字符串，最常见的是逗号或制表符。</p><p>CSV文件是一种通用的、相对简单的文件格式，被用户、商业和科学广泛应用。</p><p>pandas提供了read_csv函数，用于读取CSV文件；提供了to_csv函数，用于将结构化数据写入CSV文件，以实现数据存储。</p><h3 id="csv文件读取"><a href="#csv文件读取" class="headerlink" title="csv文件读取"></a>csv文件读取</h3><p><strong>read_csv函数的基本使用格式如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_csv(filepath_or_buffer, sep=<span class="string">&#x27;\t&#x27;</span>, header=<span class="string">&#x27;infer&#x27;</span>, names=<span class="literal">None</span>, index_col=<span class="literal">None</span>, dtype=<span class="literal">None</span>, engine=<span class="literal">None</span>, nrows=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>filepath</strong></td><td>接收str，代表文件路径。无默认值</td></tr><tr><td><strong>sep</strong></td><td>接收str，代表分隔符。默认为“,”</td></tr><tr><td><strong>header</strong></td><td>接收int或sequence，表示将某行数据作为列名。默认为infer，表示自动识别</td></tr><tr><td><strong>names</strong></td><td>接收array，表示列名。默认为None</td></tr><tr><td><strong>index_col</strong></td><td>接收int、sequence或False，表示索引列的位置，取值为sequence则代表多重索引。默认为None</td></tr><tr><td><strong>dtype</strong></td><td>接收dict，代表写入的数据类型（列名为key，数据格式为values）。默认为None</td></tr><tr><td><strong>engine</strong></td><td>接收C或Python，代表数据解析引擎。默认为C</td></tr><tr><td><strong>nrows</strong></td><td>接收int，表示读取前n行。默认为None</td></tr></tbody></table><p><strong>使用read_csv函数读取销售流水记录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用read_csv函数读取销售流水记录</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data1 = pd.read_csv(<span class="string">&quot;./data/销售流水记录1.csv&quot;</span>,encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用read_csv函数读取的销售流水记录表的长度为：&quot;</span>,<span class="built_in">len</span>(data1))</span><br><span class="line"><span class="comment"># 使用read_csv函数读取的销售流水记录表的长度为： 611200</span></span><br></pre></td></tr></table></figure><p><strong>更改参数来读取销售流水记录表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data2 = pd.read_csv(<span class="string">&quot;./data/销售流水记录2.csv&quot;</span>,header=<span class="literal">None</span>,encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用read_csv函数读取的销售流水记录表的长度为：&quot;</span>,<span class="built_in">len</span>(data2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列名为None时订单信息表：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data2.iloc[<span class="number">0</span>:<span class="number">5</span>,<span class="number">0</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915172407966.png" alt="image-20220915172407966"></p><p><strong>使用utf-8解析销售流水记录表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data3 = pd.read_csv(<span class="string">&#x27;./data/销售流水记录2.csv&#x27;</span>,header=<span class="literal">None</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0xbc in position 158: invalid start byte</span></span><br></pre></td></tr></table></figure><h3 id="csv文件存储"><a href="#csv文件存储" class="headerlink" title="csv文件存储"></a>csv文件存储</h3><p>文本文件的存储和读取类似，结构化数据可以通过pandas中的to_csv函数实现以csv文件格式存储文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*DataFrame.to_csv**(**path_or_buf**=<span class="literal">None</span>,* *sep**=<span class="string">&#x27;,&#x27;</span>,* *na_rep**=<span class="string">&#x27;&#x27;</span>, columns=<span class="literal">None</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>,* *index_label**=<span class="literal">None</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="literal">None</span>)*</span><br></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>path_or_buf</strong></td><td>接收str，表示文件路径。无默认值</td></tr><tr><td><strong>sep</strong></td><td>接收str，表示分隔符。默认为“,”</td></tr><tr><td><strong>na_rep</strong></td><td>接收str，表示缺失值。默认为“”</td></tr><tr><td><strong>columns</strong></td><td>接收list，表示写出的列名。默认为None</td></tr><tr><td><strong>header</strong></td><td>接收boolean，表示是否将列名写出。默认为True</td></tr><tr><td><strong>index</strong></td><td>接收boolean，表示是否将行名（索引）写出。默认为True</td></tr><tr><td><strong>index_labels</strong></td><td>接收sequence，表示索引名。默认为None</td></tr><tr><td><strong>mode</strong></td><td>接收特定str，表示数据写入模式。默认为w</td></tr><tr><td><strong>encoding</strong></td><td>接收特定str，表示存储文件的编码格式。默认为None</td></tr></tbody></table><p><strong>使用to_csv函数将销售流水记录表写入CSV文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;销售流水记录表写入文本文件前目录内文件列表为：\n&#x27;</span>,os.listdir(<span class="string">&#x27;./tmp/&#x27;</span>))</span><br><span class="line">data1.to_csv(<span class="string">&#x27;./tmp/SaleInfo.csv&#x27;</span>,sep=<span class="string">&#x27;;&#x27;</span>,index=<span class="literal">False</span>) <span class="comment"># 将data1以CSV格式存储</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;销售流水记录表写入文本文件后目录内文件列表为：\n&#x27;</span>,os.listdir(<span class="string">&#x27;./tmp/&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915172809360.png" alt="image-20220915172809360"></p><h2 id="读取Excel文件数据"><a href="#读取Excel文件数据" class="headerlink" title="读取Excel文件数据"></a>读取Excel文件数据</h2><h3 id="excel文件读取"><a href="#excel文件读取" class="headerlink" title="excel文件读取"></a>excel文件读取</h3><p>pandas提供了read_excel函数来读取“xls”“xlsx”两种Excel文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*pandas.read_excel**(io,* *sheetname**=<span class="number">0</span>, header=<span class="number">0</span>,* *index_col**=<span class="literal">None</span>, names=<span class="literal">None</span>,* *dtype**=<span class="literal">None</span>)*</span><br></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>io</strong></td><td>接收str，表示文件路径。无默认值</td></tr><tr><td><strong>sheetname</strong></td><td>接收str、int，表示Excel表内数据的分表位置。默认为0</td></tr><tr><td><strong>header</strong></td><td>接收int或sequence，表示将某行数据作为列名。默认为infer，表示自动识别</td></tr><tr><td><strong>names</strong></td><td>接收int、sequence或False，表示索引列的位置，取值为sequence则代表多重索引。默认为None</td></tr><tr><td><strong>index_col</strong></td><td>接收int、sequence或False，表示索引列的位置，取值为sequence则代表多重索引。默认为None</td></tr><tr><td><strong>dtype</strong></td><td>接收dict，表示写入的数据类型（列名为key，数据格式为values）。默认为None</td></tr></tbody></table><p><strong>使用read_excel函数读取折扣信息表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data3 = pd.read_excel(<span class="string">&#x27;./data/折扣信息表.xlsx&#x27;</span>) <span class="comment"># 读取折扣信息表的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data3信息长度为：&#x27;</span>,<span class="built_in">len</span>(data3))</span><br><span class="line"><span class="comment">#data3信息长度为： 11420</span></span><br></pre></td></tr></table></figure><h3 id="excel文件存储"><a href="#excel文件存储" class="headerlink" title="excel文件存储"></a>excel文件存储</h3><p>将文件存储为Excel文件，可以使用to_excel方法。其语法格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*DataFrame.to_excel**(**excel_writer**=<span class="literal">None</span>,* *sheetname**=<span class="literal">None</span>,* *na_rep**=<span class="string">&#x27;&#x27;</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>,* *index_label**=<span class="literal">None</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="literal">None</span>)*</span><br></pre></td></tr></table></figure><p>to_excel函数和to_csv函数的常用参数基本一致，区别之处在于指定存储文件的文件路径参数名称为excel_writer，并且没有sep参数。此外，还增加了一个sheetnames参数，用于指定存储的Excel Sheet的名称，默认为sheet1。</p><p><strong>使用to_excel函数将折扣信息表存储为excel文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data3.to_excel(<span class="string">&#x27;./tmp/data_save.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data3写入Excel文件后目录内文件列表为：\n&#x27;</span>,os.listdir(<span class="string">&#x27;./tmp/&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915173201563.png" alt="image-20220915173201563"></p><h2 id="读取数据库数据"><a href="#读取数据库数据" class="headerlink" title="读取数据库数据"></a>读取数据库数据</h2><h3 id="数据库数据读取"><a href="#数据库数据读取" class="headerlink" title="数据库数据读取"></a>数据库数据读取</h3><p>pandas提供了读取与存储关系型数据库数据的函数与方法。除了pandas库外，还需要使用SQLAlchemy库建立对应的数据库连接。SQLAlchemy配合相应数据库的Python连接工具，使用create_engine函数，建立一个数据库连接。</p><p>creat_engine中填入的是一个连接字符串。在使用Python的SQLAlchemy时，MySQL和Oracle数据库连接字符串的格式如下：</p><p>   <strong>数据库产品名+连接工具名：&#x2F;&#x2F;用户名:密码@数据库IP地址:数据库端口号&#x2F;数据库名称？charset &#x3D;数据库     数据编码</strong></p><p><strong>read_sql_table只能够读取数据库的某一个表格，不能实现查询的操作。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_sql_table(table_name, con, schema=<span class="literal">None</span>, index_col=<span class="literal">None</span>, coerce_float=<span class="literal">True</span>, columns=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>read_sql_query则只能实现查询操作，不能直接读取数据库中的某个表。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_sql_query(sql, con, index_col=<span class="literal">None</span>, coerce_float=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>read_sql是两者的综合，既能够读取数据库中的某一个表，也能够实现查询操作。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_sql(sql, con, index_col=<span class="literal">None</span>, coerce_float=<span class="literal">True</span>, columns=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sql</strong> <strong>or</strong> <strong>table_name</strong></td><td>接收str，表示读取的数据的表名或sql语句。无默认值</td></tr><tr><td><strong>con</strong></td><td>接收数据库连接，表示数据库连接信息。无默认值</td></tr><tr><td><strong>index_col</strong></td><td>接收int、sequence或False，表示设定的列作为行名，如果是一个数列，那么是多重索引。默认为None</td></tr><tr><td><strong>coerce_float</strong></td><td>接收boolean，表示将数据库中的decimal类型的数据转换为pandas中的float64类型的数据。默认为True</td></tr><tr><td><strong>columns</strong></td><td>接收list，表示读取数据的列名。默认为None</td></tr></tbody></table><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>将DataFrame数据写入数据库中，同样也要依赖SQLAlchemy的数据库连接。数据库数据读取有3个函数，但数据存储则只有一个to_sql()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.to_sql(name, con, schema=<span class="literal">None</span>, if_exists=<span class="string">&#x27;fail&#x27;</span>, index=<span class="literal">True</span>, index_label=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>name</strong></td><td>接收str，表示数据库表名。无默认值</td></tr><tr><td><strong>con</strong></td><td>接收数据库连接，表示数据库连接信息。无默认值</td></tr><tr><td><strong>if_exists</strong></td><td>接收fail、replace、append。fail表示如果表名存在那么不执行写入操作；replace表示如果存在，那么将原数据库表删除，再重新创建；append则表示在原数据库表的基础上追加数据。默认为fail</td></tr><tr><td><strong>index</strong></td><td>接收boolean，表示是否将行索引作为数据传入数据库。默认True</td></tr><tr><td><strong>index_label</strong></td><td>接收str或sequence，表示是否引用索引名称，如果index参数为True，此参数为None，那么使用默认名称。如果为多重索引，那么必须使用sequence形式。默认为None</td></tr><tr><td><strong>dtype</strong></td><td>接收dict，表示写入的数据类型（列名为key，数据格式为values）。默认为None</td></tr></tbody></table><h1 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h1><h2 id="检验数据"><a href="#检验数据" class="headerlink" title="检验数据"></a>检验数据</h2><h3 id="一致性检验"><a href="#一致性检验" class="headerlink" title="一致性检验"></a>一致性检验</h3><p>数据的不一致性是指各类数据的矛盾性、不相容性。数据不一致是数据冗余、并发控制不当或各种故障、错误造成的。对数据进行分析时需要对数据进行一致性检验，检查数据中是否存在不一致的值。</p><h4 id="时间检验"><a href="#时间检验" class="headerlink" title="时间检验"></a>时间检验</h4><p>时间不一致是指数据在合并或联立后时间字段出现时间范围、时间粒度、时间格式和时区不一致等情况。</p><p>时间范围不一致通常是不同表的时间字段中所包含的时间的取值范围不一致。如下两张表的时间字段的取值范围分别为2020年3月2日至2020年3月29日和2020年3月15日至2020年4月18日，此时如果需要联立两张表，那么需要对时间字段进行补全，否则将会产生大量的空值或导致报错。</p><table><thead><tr><th><strong>create_time_1</strong></th><th><strong>create_time_2</strong></th></tr></thead><tbody><tr><td>2020-03-02  09:36:00</td><td>2020-03-15  11:37:00</td></tr><tr><td>2020-03-03  10:31:00</td><td>2020-03-16  10:43:00</td></tr><tr><td>……</td><td>……</td></tr><tr><td>2020-03-28  14:15:00</td><td>2020-04-17  18:23:00</td></tr><tr><td>2020-03-29  20:28:00</td><td>2020-04-18  22:45:00</td></tr></tbody></table><p>时间粒度不一致通常是由于在数据采集时没有设置统一的采集频率，如系统升级后采集频率发生了改变，或不同系统间的采集频率不一致，导致采集到的数据的时间粒度不一致。</p><table><thead><tr><th><strong>cresat_time_1</strong></th><th><strong>cresat_time_2</strong></th></tr></thead><tbody><tr><td>2020&#x2F;07&#x2F;20  12:44:00</td><td>2020&#x2F;8&#x2F;7  15:11:30</td></tr><tr><td>2020&#x2F;07&#x2F;20  12:45:00</td><td>2020&#x2F;8&#x2F;7  15:12:00</td></tr><tr><td>2020&#x2F;07&#x2F;20  12:46:00</td><td>2020&#x2F;8&#x2F;7  15:12:30</td></tr><tr><td>2020&#x2F;07&#x2F;20  12:47:00</td><td>2020&#x2F;8&#x2F;7  15:13:00</td></tr><tr><td>2020&#x2F;07&#x2F;20  12:49:00</td><td>2020&#x2F;8&#x2F;7  15:13:30</td></tr><tr><td>2020&#x2F;07&#x2F;20  12:50:00</td><td>2020&#x2F;8&#x2F;7  15:14:00</td></tr></tbody></table><p>时间格式不一致通常是不同系统之间设置时间字段时的采用的格式不一致导致时间格式不一致的情况，尤其是当系统中的时间字段使用字符串格式的时候。</p><table><thead><tr><th><strong>order_time1</strong></th><th><strong>order_time2</strong></th></tr></thead><tbody><tr><td>2020-09-01  11:25:00</td><td>20201003122600</td></tr><tr><td>2020-09-01  11:30:00</td><td>20201003123100</td></tr><tr><td>2020-09-01  11:34:00</td><td>20201003123600</td></tr><tr><td>2020-09-01  11:41:00</td><td>20201003125100</td></tr><tr><td>2020-09-01  11:45:00</td><td>20201003125500</td></tr></tbody></table><p>时区不一致通常是由于在数据传输时的设置不合理，所以导致时间字段出现不一致的情况，如由于在设置海外的服务器时没有修改时区，所以导致数据在传输回本地的服务器时因时区差异造成时间不一致。</p><table><thead><tr><th><strong>local_sever_time</strong></th><th><strong>global_sever_time</strong></th></tr></thead><tbody><tr><td>2020&#x2F;08&#x2F;07  12:12:30</td><td>2020&#x2F;08&#x2F;07  17:12:30</td></tr><tr><td>2020&#x2F;08&#x2F;07  12:13:00</td><td>2020&#x2F;08&#x2F;07  17:13:00</td></tr><tr><td>2020&#x2F;08&#x2F;07  12:13:30</td><td>2020&#x2F;08&#x2F;07  17:13:30</td></tr><tr><td>2020&#x2F;08&#x2F;07  12:14:00</td><td>2020&#x2F;08&#x2F;07  17:14:00</td></tr><tr><td>2020&#x2F;08&#x2F;07  12:14:30</td><td>2020&#x2F;08&#x2F;07  17:14:30</td></tr></tbody></table><h4 id="字段信息校验"><a href="#字段信息校验" class="headerlink" title="字段信息校验"></a>字段信息校验</h4><p>同名异义：两个名称相同的字段所代表的实际意义不一致。</p><pre><code>  如下表所示，数据源A中的ID字段和数据源B中的ID字段分别描述的是商品编号和订单编号，即描述的是不同的实体。</code></pre><table><thead><tr><th><strong>ID_A</strong></th><th><strong>ID_B</strong></th></tr></thead><tbody><tr><td>2003117399</td><td>1014000141</td></tr><tr><td>2003117402</td><td>1014000141</td></tr><tr><td>2003117403</td><td>4722000342</td></tr><tr><td>2003117407</td><td>4722000342</td></tr><tr><td>2003117412</td><td>4722000342</td></tr></tbody></table><p>异名同义：两个名称不同的字段所代表的实际意义是一致的。</p><p>   如下表所示，数据源A中的sales_dt字段和数据源B中的sales_date字段都描述的为销售日期，即A.sales_dt＝B.sales_date。</p><table><thead><tr><th><strong>A.sales_dt</strong></th><th><strong>B.sales_date</strong></th></tr></thead><tbody><tr><td>2020&#x2F;3&#x2F;02</td><td>2020&#x2F;3&#x2F;02</td></tr><tr><td>2020&#x2F;3&#x2F;04</td><td>2020&#x2F;3&#x2F;04</td></tr><tr><td>2020&#x2F;3&#x2F;11</td><td>2020&#x2F;3&#x2F;11</td></tr><tr><td>2020&#x2F;3&#x2F;19</td><td>2020&#x2F;3&#x2F;19</td></tr><tr><td>2020&#x2F;3&#x2F;24</td><td>2020&#x2F;3&#x2F;24</td></tr></tbody></table><h3 id="缺失值检验"><a href="#缺失值检验" class="headerlink" title="缺失值检验"></a>缺失值检验</h3><ul><li>缺失值是指数据中由于缺少信息而造成的数据的聚类、分组或截断。缺失值按缺失的分布模式可以分为完全随机缺失、随机缺失和完全非随机缺失。</li><li>完全随机缺失（Missing Completely At Random，MCAR）指的是数据的缺失是随机的，数据的缺失不依赖于任何不完全变量或完全变量；</li><li>随机缺失（Missing At Random，MAR）指的是数据的缺失不是完全随机的，即该类数据的缺失依赖于其他完全变量；</li><li>完全非随机缺失（Missing Not At Random，MNAR）指的是数据的缺失依赖于不完全变量自身。</li></ul><p><strong>在Python中，可以利用下表所示的缺失值校验函数检测数据中是否存在缺失值。</strong></p><table><thead><tr><th><strong>函数名</strong></th><th><strong>函数功能</strong></th><th><strong>所属扩展库</strong></th><th><strong>格式</strong></th><th><strong>参数及返回值</strong></th></tr></thead><tbody><tr><td><strong>isnull</strong></td><td>判断是否空值</td><td>pandas</td><td>D.isnull()或pandas.isnull(D)</td><td>参数为DataFrame或pandas的Series对象，返回的是一个布尔类型的DataFrame或Series</td></tr><tr><td><strong>notnull</strong></td><td>判断是否非空值</td><td>pandas</td><td>D.notnull()或pandas.notnull(D)</td><td>参数为DataFrame或pandas的Series对象，返回的是一个布尔类型的DataFrame或Series</td></tr><tr><td><strong>count</strong></td><td>非空元素计算</td><td></td><td>D.count()</td><td>参数为DataFrame或pandas的Series对象，返回的是DataFrame中每一列非空值个数或Series对象的非空值个数</td></tr></tbody></table><p><strong>缺失值识别与缺失率统计</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data = pd.read_excel(<span class="string">&quot;./data/data.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data中元素是否为空值的布尔型DataFrame为：\n&quot;</span>,data.isnull())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data中元素是否为非空值的布尔型DataFrame为:\n&quot;</span>,data.notnull())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data中每个特征对应的非空值数为：\n&quot;</span>,data.count())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data中每个特征对应的缺失率为:\n&quot;</span>,<span class="number">1</span>-data.count()/<span class="built_in">len</span>(data))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915184055848.png" alt="image-20220915184055848"></p><h3 id="异常值检验"><a href="#异常值检验" class="headerlink" title="异常值检验"></a>异常值检验</h3><ul><li>异常值是指样本中的个别值，其数值明显偏离所属样本的其余观测值。</li><li>假设数据服从正态分布，一组数据中若与平均值的偏差超过两倍标准差的数据则为异常值，称为四分位距准则（IQR）；与平均值的偏差超过3倍标准差的数据则为高度异常的异常值，称为<em>3σ</em>  原则。</li><li>在实际测量中，异常值的产生一般是由于疏忽、失误或突然发生的不该发生的原因造成的，如读错、记错、仪器示值突然跳动、突然震动、操作失误等。因为异常值的存在会歪曲测量结果，所以需要检测数据中是否存在异常值。</li></ul><p><strong>在Python中可以利用下表中的函数进行异常值检测。</strong></p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915174517575.png" alt="image-20220915174517575"></p><p><strong>检测元组array中的异常值及其所占比例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = (<span class="number">18.02</span>, <span class="number">63.77</span>, <span class="number">79.52</span>, <span class="number">29.89</span>, <span class="number">68.86</span>, <span class="number">54.49</span>, <span class="number">92.59</span>, <span class="number">376.04</span>, <span class="number">5.92</span>, <span class="number">83.75</span>, <span class="number">70.12</span>, <span class="number">459.38</span>,</span><br><span class="line">       <span class="number">82.96</span>, <span class="number">37.81</span>, <span class="number">65.08</span>, <span class="number">59.07</span>, <span class="number">47.56</span>, <span class="number">86.96</span>, <span class="number">38.38</span>, <span class="number">1100.34</span>, <span class="number">7.98</span>, <span class="number">2.82</span>, <span class="number">74.76</span>, <span class="number">87.64</span>,</span><br><span class="line">       <span class="number">67.90</span>, <span class="number">89.9</span>, <span class="number">2000.67</span>)</span><br><span class="line"><span class="comment"># 利用箱线图的IQR准则对异常值进行检测</span></span><br><span class="line">Percentile = np.percentile(arr,[<span class="number">0</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">100</span>]) <span class="comment"># 计算百分位数</span></span><br><span class="line">IQR = Percentile[<span class="number">3</span>] - Percentile[<span class="number">1</span>] <span class="comment"># 计算箱线图IQR</span></span><br><span class="line">UpLimit = Percentile[<span class="number">3</span>] + IQR * <span class="number">1.5</span> <span class="comment"># 计算临界值上界</span></span><br><span class="line">arrayownLimit = Percentile[<span class="number">1</span>] - IQR * <span class="number">1.5</span> <span class="comment"># 计算临界值下界</span></span><br><span class="line"><span class="comment"># 判断异常值，大于上届或小于下界的值即为异常值为：</span></span><br><span class="line">abnormal = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr <span class="keyword">if</span> i &gt; UpLimit <span class="keyword">or</span> i &lt; arrayownLimit]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;箱线图的IQR准则检测出的异常值为：\n&quot;</span>,abnormal)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;箱线图的IQR准则检测出的异常值比例为：\n&quot;</span>,<span class="built_in">len</span>(abnormal)/<span class="built_in">len</span>(arr))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915190827220.png" alt="image-20220915190827220"></p><p><strong>利用3σ原则对异常值进行检测</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array_mean = np.array(arr).mean() <span class="comment"># 计算平均值</span></span><br><span class="line">array_sarray = np.array(arr).std() <span class="comment"># 计算标准差</span></span><br><span class="line">array_cha = arr - array_mean <span class="comment"># 计算元素与平均值之差</span></span><br><span class="line"><span class="comment"># 返回异常值所在位置</span></span><br><span class="line">ind = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array_cha)) <span class="keyword">if</span> np.<span class="built_in">abs</span>(array_cha[i])&gt;array_sarray] <span class="comment"># abs取绝对值</span></span><br><span class="line">abnormal = [arr[i] <span class="keyword">for</span> i <span class="keyword">in</span> ind] <span class="comment"># 返回异常值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3σ原则检测出的Array中的异常值为:\n&quot;</span>,abnormal)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3σ原则检测出的异常值比例为：\n&quot;</span>,<span class="built_in">len</span>(abnormal)/<span class="built_in">len</span>(arr))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915190906881.png" alt="image-20220915190906881"></p><h2 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h2><ul><li>数据重复会导致数据的方差变小，数据分布发生较大变化。</li><li>数据缺失会导致样本信息减少，不仅增加了数据分析的难度，而且会导致数据分析的结果产生偏差。</li><li>异常值则会产生“伪回归”。</li><li>因此需要对数据进行检测，观察数据种是否含有重复值、缺失值和异常值，并且需要对这些数据进行相应的处理。</li></ul><h3 id="重复值处理"><a href="#重复值处理" class="headerlink" title="重复值处理"></a>重复值处理</h3><h4 id="记录重复"><a href="#记录重复" class="headerlink" title="记录重复"></a>记录重复</h4><p>记录重复是指一个或多个特征的某条记录的值完全相同。可以通过列表（list）和集合（set）进行去重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用列表（list)和集合（set）去重</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;./data/销售流水记录1.csv&#x27;</span>,encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用列表（list）去重</span></span><br><span class="line"><span class="comment"># 定义去重函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delRep</span>(<span class="params">list1</span>):</span><br><span class="line">    list2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> list2:</span><br><span class="line">            list2.append(i)</span><br><span class="line">    <span class="keyword">return</span> list2</span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line">sku_names = <span class="built_in">list</span>(data1[<span class="string">&#x27;sku_name&#x27;</span>]) <span class="comment"># 将sku_name从数据库中提取出来</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去重前商品总数为：&quot;</span>,<span class="built_in">len</span>(sku_names))</span><br><span class="line">sku_name = delRep(sku_names) <span class="comment"># 使用自定义的去重函数去重</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用列表（list）去重后的商品的总数为：&quot;</span>,<span class="built_in">len</span>(sku_name))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>去重前商品总数为： 611200<br>使用列表（list）去重后的商品的总数为： 10427</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用集合（set去重）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去重前商品总数为：&quot;</span>,<span class="built_in">len</span>(sku_names))</span><br><span class="line">sku_name_set = <span class="built_in">set</span>(sku_names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用列表（list）去重后的商品的总数为：&quot;</span>,<span class="built_in">len</span>(sku_name_set))</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>去重前商品总数为： 611200<br>使用列表（list）去重后的商品的总数为： 10427</p><p><strong>注意：set去重速度快list去重许多倍</strong></p><p>pandas提供了一个名为drop_duplicates()的去重方法。该方法只对DataFrame或Series类型有效。<strong>这种方法不会改变数据原始排列。且兼具代码简洁和运行稳定的特点</strong>，drop_duplicates()方法的基本使用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame(Series).drop_duplicates(self, subset=<span class="literal">None</span>, keep=<span class="string">&#x27;first&#x27;</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>subset</strong></td><td>接收str或sequence，表示进行去重的列。默认为None，表示全部列</td></tr><tr><td><strong>keep</strong></td><td>接收特定str，表示重复时保留第几个数据。first：保留第一个；last：保留最后一个；false：只要有重复都不保留；默认为first</td></tr><tr><td><strong>inplace</strong></td><td>接收boolean,表示是否在原表上进行操作。默认为False</td></tr></tbody></table><p><strong>使用drop_duplicates()方法对sku_name列进行去重操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sku_name_pandas = data1[<span class="string">&#x27;sku_name&#x27;</span>].drop_duplicates() <span class="comment"># 对sku_names去重</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;drop_duplicates()方法去重后的商品的总数为：&quot;</span>,<span class="built_in">len</span>(sku_name))</span><br><span class="line"><span class="comment"># drop_duplicates()方法去重后的商品的总数为： 10427</span></span><br></pre></td></tr></table></figure><p><strong>使用drop_duplicates()方法对多列进行去重操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重之前销售流水记录表的形状为：&#x27;</span>,data1.shape)</span><br><span class="line">shapeDet = data1.drop_duplicates(subset=[<span class="string">&#x27;order_id&#x27;</span>,<span class="string">&#x27;sku_id&#x27;</span>]).shape</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;依照订单编号，商品编号去重之后销售流水记录表大小为：&quot;</span>,shapeDet)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p>去重之前销售流水记录表的形状为： (611200, 10)<br>依照订单编号，商品编号去重之后销售流水记录表大小为： (608176, 10)</p><h4 id="特征重复"><a href="#特征重复" class="headerlink" title="特征重复"></a>特征重复</h4><p>特征重复是指存在一个或多个特征名称不同，但数据完全相同的情况。结合相关的数学和统计学知识，去除连续型特征重复可以利用特征间的相似度将两个相似度为1的特征去除一个。在pandas中相似度的计算方法为corr，使用该方法计算相似度时，默认为“pearson”法，可以通过“method”参数调节。目前，还支持“spearman”法和“kendall”法。</p><p><strong>求出sku_prc和sku_sale_prc两列数据的相似度矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corrDet = data1[[<span class="string">&#x27;sku_prc&#x27;</span>,<span class="string">&#x27;sku_sale_prc&#x27;</span>]].corr(method=<span class="string">&#x27;kendall&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标价和卖价的kendall相似度为：\n&quot;</span>,corrDet)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915221431171.png" alt="image-20220915221431171"></p><p><strong>求出sku_name、sku_prc和sku_sale_prc三个特征的相似度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corrDet1 = data1[[<span class="string">&#x27;sku_name&#x27;</span>,<span class="string">&#x27;sku_prc&#x27;</span>,<span class="string">&#x27;sku_sale_prc&#x27;</span>]].corr(method=<span class="string">&#x27;pearson&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;商品名称、标价和卖价的pearson相似度为：\n&quot;</span>,corrDet1)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915221508444.png" alt="image-20220915221508444"></p><p><strong>通过相似矩阵去重存在一个弊端：只能对数值型重复特征进行去重；类别型特征之间无法通过计算相似系数衡量相似度，因此无法根据相似矩阵对其进行去重处理。由上述例子可知求三个特征相似度最终只存在2x2的相似度矩阵。</strong></p><p><strong>使用DataFrame.equals()方法进行特征去重</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">FeatureEquals</span>(<span class="params">df</span>):</span><br><span class="line">    dfEquals = pd.DataFrame([],columns=df.columns,index=df.columns)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> df.columns:</span><br><span class="line">            dfEquals.loc[i,j] = df.loc[:,i].equals(df.loc[:,j])</span><br><span class="line">    <span class="keyword">return</span> dfEquals</span><br><span class="line"><span class="comment"># 应用上述函数</span></span><br><span class="line">detEquals = FeatureEquals(data1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data1的特征相等矩阵的前5行5列为：\n&quot;</span>,detEquals.iloc[:<span class="number">5</span>,:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915222249157.png" alt="image-20220915222249157"></p><p><strong>通过遍历的方式进行数据筛选</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历所有数据</span></span><br><span class="line">lenDet = detEquals.shape[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(detEquals.shape)</span><br><span class="line">dupCol = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(lenDet):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>,lenDet):</span><br><span class="line">        <span class="keyword">if</span> detEquals.iloc[k,l]&amp;(detEquals.columns[l] <span class="keyword">not</span> <span class="keyword">in</span> dupCol):</span><br><span class="line">            dupCol.append(detEquals.columns[l])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行去重操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需要删除的列为：&quot;</span>,dupCol)</span><br><span class="line">data1.drop(dupCol,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除多余列后detail的特征数目为：&quot;</span>,data1.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>(10, 10)<br>需要删除的列为： []<br>删除多余列后detail的特征数目为： 10</p><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><h4 id="删除法"><a href="#删除法" class="headerlink" title="删除法"></a>删除法</h4><p>删除法是指将含有缺失值的特征或记录删除。删除法分为删除观测记录和删除特征两种，它属于利用减少样本量换取信息完整度的一种方法，是一种最简单的缺失值处理方法。pandas中提供了简便的删除缺失值的方法dropna()。该方法的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame.dropna(self, axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>axis</strong></td><td>接收0或1，表示轴向，0为删除观测记录（行），1为删除特征（列）。默认为0</td></tr><tr><td><strong>how</strong></td><td>接收特定str，表示删除的形式。any表示只要有缺失值存在就执行删除操作。all表示当且仅当全部为缺失值时执行删除操作。默认为any</td></tr><tr><td><strong>subset</strong></td><td>接收类array数据，表示进行去重的列∕行。默认为None，表示所有列∕行</td></tr><tr><td><strong>inplace</strong></td><td>接收boolean，表示是否在原表上进行操作。默认为False</td></tr></tbody></table><p><strong>使用dropna()方法删除缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除含缺失值的列前detail的形状为：&quot;</span>,data1.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除含缺失值的列后detail的形状为：&quot;</span>,data1.dropna(axis=<span class="number">1</span>,how=<span class="string">&#x27;any&#x27;</span>).shape)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>去除含缺失值的列前detail的形状为： (611200, 10)<br>去除含缺失值的列后detail的形状为： (611200, 9)</p><p>当how参数取值为’any’时，删除了一个特征，说明这个特征存在缺失值。若how参数不取‘any’，而取‘all’，则表示当整个特征全部为缺失值时才会执行删除操作。</p><h4 id="替换法"><a href="#替换法" class="headerlink" title="替换法"></a>替换法</h4><p>是指用一个特定的值替换缺失值。特征可分为数值型和类别型，两者出现缺失值时的处理方法也是不同的。缺失值所在特征为数值型时，通常利用其均值、中位数和众数等描述其集中趋势的统计量代替缺失值；缺失值所在特征为类别型时，则选择使用众数替换缺失值。pandas库中提供了缺失值替换的方法名为fillna()，其基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame.fillna(value=<span class="literal">None</span>, method=<span class="literal">None</span>, axis=<span class="literal">None</span>, inplace=<span class="literal">False</span>, limit=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>value</strong></td><td>接收scalar、dict、Series或DataFrame，表示用于替换缺失值的值。无默认值</td></tr><tr><td><strong>method</strong></td><td>接收特定str，backfill或bfill表示使用下一个非缺失值填补缺失值；pad或ffill表示使用上一个非缺失值填补缺失值。默认为None</td></tr><tr><td><strong>axis</strong></td><td>接收0或1，表示轴向。默认为1</td></tr><tr><td><strong>inplace</strong></td><td>接收boolean，表示是否在原表上进行操作。默认为False</td></tr><tr><td><strong>limit</strong></td><td>接收int，表示填补缺失值个数上限，超过则不进行填补。默认为None</td></tr></tbody></table><p><strong>使用fillna()方法替换缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data1每个特征缺失的数目为：\n&quot;</span>,data1.isnull().<span class="built_in">sum</span>())</span><br><span class="line">data1 = data1.fillna(method=<span class="string">&#x27;pad&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data1每个特征缺失的数目为：\n&quot;</span>,data1.isnull().<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915223649178.png" alt="image-20220915223649178"></p><h4 id="插值法"><a href="#插值法" class="headerlink" title="插值法"></a>插值法</h4><ul><li>删除法简单易行，但是会引起数据结构变动，样本减少；</li><li>替换法使用难度较低，但是会影响数据的标准差，导致信息量变动。</li><li>在面对数据缺失问题时，除了这两种方法之外，还有一种常用的方法——插值法。</li></ul><p>常用的插值法有线性插值、多项式插值和样条插值等。</p><ul><li>线性插值是一种较为简单的插值方法，它针对已知的值求出线性方程，通过求解线性方程得到缺失值；</li><li>多项式插值是利用已知的值拟合一个多项式，使得现有的数据满足这个多项式，再利用这个多项式求解缺失值，常见的多项式插值法有拉格朗日插值和牛顿插值等；</li><li>样条插值是以可变样条作出一条经过一系列点的光滑曲线的插值方法，插值样条由一些多项式组成，每一个多项式都是由相邻两个数据点决定，这样可以保证两个相邻多项式及其导数在连接处连续。</li></ul><p>pandas提供了对应的名为interpolate的插值方法，能够进行上述部分插值操作，但是SciPy的interpolate模块更加全面。</p><p><strong>线性插值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> interp1d</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])  <span class="comment"># 创建自变量x</span></span><br><span class="line">y1 = np.array([<span class="number">3</span>, <span class="number">17</span>, <span class="number">129</span>, <span class="number">251</span>, <span class="number">433</span>, <span class="number">1025</span>, <span class="number">2001</span>])  <span class="comment"># 创建因变量y1</span></span><br><span class="line">y2 = np.array([<span class="number">5</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">26</span>, <span class="number">32</span>])  <span class="comment"># 创建因变量y2</span></span><br><span class="line">LinearInsValue1 = interp1d(x, y1, kind=<span class="string">&#x27;linear&#x27;</span>)  <span class="comment"># 线性插值拟合x, y1</span></span><br><span class="line">LinearInsValue2 = interp1d(x, y2, kind=<span class="string">&#x27;linear&#x27;</span>)  <span class="comment"># 线性插值拟合x, y2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用线性插值y1为：&#x27;</span>, LinearInsValue1([<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用线性插值y2为：&#x27;</span>, LinearInsValue2([<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当x为3、7、9时，使用线性插值y1为： [  73.  729. 1513.]<br>当x为3、7、9时，使用线性插值y2为： [11. 23. 29.]</p><p><strong>拉格朗日插值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> lagrange</span><br><span class="line">LargeInsValue1 = lagrange(x, y1)  <span class="comment"># 拉格朗日插值拟合x, y1</span></span><br><span class="line">LargeInsValue2 = lagrange(x, y2)  <span class="comment"># 拉格朗日插值拟合x, y2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用拉格朗日插值y1为：&#x27;</span>, LargeInsValue1([<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用拉格朗日插值y2为：&#x27;</span>, LargeInsValue2([<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>当x为3、7、9时，使用拉格朗日插值y1为： [  55.  687. 1459.]<br>当x为3、7、9时，使用拉格朗日插值y2为： [11. 23. 29.]</p><p><strong>样条插值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> splrep, splev</span><br><span class="line">tck1 = splrep(x, y1)</span><br><span class="line">x_new = np.array([<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">SplineInsValue1 = splev(x_new, tck1)  <span class="comment"># 样条插值拟合x, y1</span></span><br><span class="line">tck2 = splrep(x, y2)</span><br><span class="line">SplineInsValue2 = splev(x_new, tck2)  <span class="comment"># 样条插值拟合x, y2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用样条插值y1为：&#x27;</span>, SplineInsValue1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当x为3、7、9时，使用样条插值y2为：&#x27;</span>, SplineInsValue2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>当x为3、7、9时，使用样条插值y1为： [  55.  687. 1459.]<br>当x为3、7、9时，使用样条插值y2为： [11. 23. 29.]</p><p>其中有：</p><p>$$<br>y_1&#x3D;2x^{3}+1<br>$$</p><p>$$<br>y_2&#x3D;3x+2<br>$$</p><h3 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h3><p>异常值的存在对数据分析十分危险，如果计算分析过程的数据有异常值，那么会对结果会产生不良影响，从而导致分析结果产生偏差乃至错误。异常值的处理通常有4种方式：</p><ul><li><p>删除含有异常值的记录；</p></li><li><p>将异常值视为缺失值，按缺失值的处理方式进行处理；</p></li><li><p>用平均值修正异常值；</p></li><li><p>某些情况下，异常值恰恰体现了非常重要的信息，这时，可以不处理，保留异常值。</p></li></ul><h2 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h2><ul><li>数据可视化的实际开发中，数据种类比较繁多，并频繁出现用不同的表存储不同类型的数据，但表和表之间又有联系；</li><li>当数据量大时，将会使用不同的表收集不同时段的数据，这样随着数据量的增加，表的数量也会增加。</li><li>如果将有关联的数据整合在一张表中，那么在对数据进行可视化和分析工作时，将会大大提高工作效率。</li><li>合并数据的方法可分为堆叠合并、主键合并和重叠合并。</li></ul><h3 id="堆叠合并数据"><a href="#堆叠合并数据" class="headerlink" title="堆叠合并数据"></a>堆叠合并数据</h3><p>堆叠就是简单地将两个表拼在一起，也被称作轴向连接、绑定或连接。依照连接轴的方向，数据堆叠可分为横向堆叠和纵向堆叠。</p><h4 id="横向堆叠"><a href="#横向堆叠" class="headerlink" title="横向堆叠"></a>横向堆叠</h4><p>横向堆叠，即将两个表在X轴向拼接在一起，可以使用concat函数完成。concat函数的基本使用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pandas.concat(objs, axis=<span class="number">0</span>, join=<span class="string">&#x27;outer&#x27;</span>, join_axes=<span class="literal">None</span>, ignore_index=<span class="literal">False</span>, keys=<span class="literal">None</span>, levels=<span class="literal">None</span>, names=<span class="literal">None</span>,    </span><br><span class="line">verify_integrity=<span class="literal">False</span>, copy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>objs</strong></td><td>接收多个Series、DataFrame、Panel的组合，表示参与链接的pandas对象的列表的组合。无默认值</td></tr><tr><td><strong>axis</strong></td><td>接收0或1，表示连接的轴向。默认为0</td></tr><tr><td><strong>join</strong></td><td>接收inner或outer，表示其他轴向上的索引是按交集（inner）还是并集（outer）进行合并。默认为outer</td></tr><tr><td><strong>join_axes</strong></td><td>接收Index对象，表示用于其他n-1条轴的索引，不执行并集／交集运算</td></tr><tr><td><strong>ignore_index</strong></td><td>接收boolean，表示是否不保留连接轴上的索引，产生一组新索引range(total_length)。默认为False</td></tr><tr><td><strong>keys</strong></td><td>接收sequence，表示与连接对象有关的值，用于形成连接轴向上的层次化索引。默认为None</td></tr><tr><td><strong>levels</strong></td><td>接收包含多个sequence的list，表示在指定keys参数后，指定用作层次化索引各级别上的索引。默认为None</td></tr><tr><td><strong>names</strong></td><td>接收list，表示在设置了keys和levels参数后，用于创建分层级别的名称。默认为None</td></tr><tr><td><strong>verify_integrity</strong></td><td>接收boolearn，表示是否检查结果对象新轴上的重复情况，如果发现则引发异常。默认为False</td></tr></tbody></table><p><strong>当axis&#x3D;1时，concat做行对齐</strong>，然后将不同列名称的两张或多张表合并。当两个表索引不完全一样时，可以使用join参数选择是内连接还是外连接。在内连接的情况下，仅仅返回索引重叠部分。在外连接的情况下，则显示索引的并集部分数据，不足的地方则使用空值填补，其原理示意如图所示。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915182542295.png" alt="image-20220915182542295"></p><p><strong>索引完全相同时使用concat函数进行横向堆叠</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">data1 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>, <span class="string">&#x27;A4&#x27;</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>], <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>,<span class="string">&#x27;C3&#x27;</span>, <span class="string">&#x27;C4&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>, <span class="string">&#x27;D4&#x27;</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">data2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;B8&#x27;</span>], <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D4&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>, <span class="string">&#x27;D8&#x27;</span>], <span class="string">&#x27;F&#x27;</span>: [<span class="string">&#x27;F2&#x27;</span>, <span class="string">&#x27;F4&#x27;</span>,<span class="string">&#x27;F6&#x27;</span>, <span class="string">&#x27;F8&#x27;</span>]&#125;,</span><br><span class="line">    index=[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内连接合并后的数据框为：\n&#x27;</span>, pd.concat([data1, data2], axis=<span class="number">1</span>, join=<span class="string">&#x27;inner&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;外连接合并后的数据框为：\n&#x27;</span>, pd.concat([data1, data2], axis=<span class="number">1</span>, join=<span class="string">&#x27;outer&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915224902326.png" alt="image-20220915224902326"></p><h4 id="纵向堆叠"><a href="#纵向堆叠" class="headerlink" title="纵向堆叠"></a>纵向堆叠</h4><p>对比横向堆叠，纵向堆叠是将两个数据表在Y轴向上拼接。append()方法和concat函数两者都可以实现纵向堆叠。</p><p>append()方法用于纵向合并两张表。但是append()方法实现纵向表堆叠有一个前提条件，那就是两张表的列名需要完全一致。append()方法的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame.append(self, other, ignore_index=<span class="literal">False</span>, verify_integrity=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>other</strong></td><td>接收DataFrame或Series，表示要添加的新数据。无默认值</td></tr><tr><td><strong>ignore_index</strong></td><td>接收boolean。如果输入True，会对新生成的DataFrame使用新的索引（自动产生）而忽略原来数据的索引。默认为False</td></tr><tr><td><strong>verify_integrity</strong></td><td>接收boolean。如果输入True，那么当ignore_index为False时，会检查添加的数据索引是否冲突，如果冲突，则会添加失败。默认为False</td></tr></tbody></table><p><strong>使用concat函数时，在默认情况下，即axis&#x3D;0时，concat做列对齐</strong>，将不同行索引的两张或多张表纵向合并。在两张表的列名并不完全相同的情况下，可join参数取值为inner时，返回的仅仅是列名交集所代表的列，取值为outer时，返回的是两者列名的并集所代表的列，其原理示意如图所示。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915182718546.png" alt="image-20220915182718546"></p><p><strong>表名完全相同时使用concat函数进行纵向堆叠</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内连接纵向合并后的数据框为：\n&#x27;</span>, pd.concat([data1, data2], axis=<span class="number">0</span>, join=<span class="string">&#x27;inner&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;外连接纵向合并后的数据框为：\n&#x27;</span>, pd.concat([data1, data2], axis=<span class="number">0</span>, join=<span class="string">&#x27;outer&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915225047064.png" alt="image-20220915225047064"></p><p><strong>使用append()方法进行纵向表堆叠</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;./data/销售流水记录1.csv&#x27;</span>, encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;堆叠前data1数据框的大小：&#x27;</span>, data1.shape)</span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;./data/销售流水记录2.csv&#x27;</span>, encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;堆叠前data2数据框的大小：&#x27;</span>, data2.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;append纵向堆叠后的数据框大小为：&#x27;</span>, data1.append(data2).shape)</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>堆叠前data1数据框的大小： (611200, 10)<br>堆叠前data2数据框的大小： (610655, 10)<br>append纵向堆叠后的数据框大小为： (1221855, 10)</p><h3 id="主键合并"><a href="#主键合并" class="headerlink" title="主键合并"></a>主键合并</h3><p>主键合并，即通过一个或多个键将两个数据集的行连接起来，类似于SQL中的join。针对同一个主键存在两张包含不同字段的表，将其根据某几个字段一一对应拼接起来，结果集列数为两个元数据的列数和减去连接键的数量，如图所示。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915182745828.png" alt="image-20220915182745828"></p><p>pandas库中的merge函数和join()方法都可以实现主键合并，但两者的实现方式并不相同。</p><p>merge函数的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.merge(left, right, how=<span class="string">&#x27;inner&#x27;</span>, on=<span class="literal">None</span>, left_on=<span class="literal">None</span>, right_on=<span class="literal">None</span>, left_index=<span class="literal">False</span>, right_index=<span class="literal">False</span>, sort=<span class="literal">False</span>, suffixes=(<span class="string">&#x27;_x&#x27;</span>, <span class="string">&#x27;_y&#x27;</span>), copy=<span class="literal">True</span>, indicator=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>和数据库的join一样，merge函数也有左连接（left）、右连接（right）、内连接（inner）和外连接（outer），但比起数据库SQL语言中的join和merge函数还有其自身独到之处，如可以在合并过程中对数据集中的数据进行排序等。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>left</strong></td><td>接收DataFrame或Series，表示要添加的新数据。无默认值</td></tr><tr><td><strong>right</strong></td><td>接收DataFrame或Series，表示要添加的新数据。无默认值</td></tr><tr><td><strong>how</strong></td><td>接收inner、outer、left、right，表示数据的连接方式。默认为inner</td></tr><tr><td><strong>on</strong></td><td>接收str或sequence，表示两个数据合并的主键（必须一致）。默认为None</td></tr><tr><td><strong>left_on</strong></td><td>接收str或sequence，表示left参数接收数据用于合并的主键。默认为None</td></tr><tr><td><strong>right_on</strong></td><td>接收str或sequence，表示right参数接收数据用于合并的主键。默认为None</td></tr><tr><td><strong>left_index</strong></td><td>接收boolean，表示是否将left参数接收数据的index作为连接主键。默认为False</td></tr><tr><td><strong>right_index</strong></td><td>接收boolean，表示是否将right参数接收数据的index作为连接主键。默认为False</td></tr><tr><td><strong>sort</strong></td><td>接收boolean，表示是否根据连接键对合并后的数据进行排序。默认为False</td></tr><tr><td><strong>suffixes</strong></td><td>接收接收tuple，表示用于追加到left和right参数接收数据重叠列名的尾缀默认为(‘_x’,  ‘_y’)</td></tr></tbody></table><p><strong>使用merge函数合并数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;./data/销售流水记录1.csv&#x27;</span>, encoding=<span class="string">&#x27;gb18030&#x27;</span>, low_memory=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;销售流水记录表的原始形状为：&#x27;</span>, data1.shape)</span><br><span class="line">goods_info = pd.read_excel(<span class="string">&#x27;./data/商品信息表.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;商品信息表的原始形状为：&#x27;</span>, goods_info.shape)</span><br><span class="line">sale_detail = pd.merge(data1, goods_info, on=<span class="string">&#x27;sku_id&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;销售流水记录表和商品信息表主键合并后的形状为：&#x27;</span>, sale_detail.shape)</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>销售流水记录表的原始形状为： (611200, 10)<br>商品信息表的原始形状为： (6570, 8)<br>销售流水记录表和商品信息表主键合并后的形状为： (611111, 17)</p><p>主键合并除了使用merge函数以外，join()方法也可以实现部分主键合并的功能，但是join()方法使用时，两个主键的名字必须相同，其基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame.join(self, other, on=<span class="literal">None</span>, how=<span class="string">&#x27;left&#x27;</span>, lsuffix=<span class="string">&#x27;&#x27;</span>, rsuffix=<span class="string">&#x27;&#x27;</span>, sort=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>left</strong></td><td>接收DataFrame或Series，表示要添加的新数据。无默认值</td></tr><tr><td><strong>other</strong></td><td>接收DataFrame、Series或包含了多个DataFrame的list，表示参与连接的其他DataFrame。无默认值</td></tr><tr><td><strong>on</strong></td><td>接收列名或包含列名的list或tuple，表示用于连接的列名。默认为None</td></tr><tr><td><strong>how</strong></td><td>接收特定str。inner代表内连接；outer代表外连接；left和right分别代表左连接和右连接。默认为inner</td></tr><tr><td><strong>lsuffix</strong></td><td>接收str，表示用于追加到左侧重叠列名的末尾。无默认值</td></tr><tr><td><strong>rsuffix</strong></td><td>接收str，表示用于追加到右侧重叠列名的末尾。无默认值</td></tr><tr><td><strong>sort</strong></td><td>根据连接键对合并后的数据进行排序，默认为True</td></tr></tbody></table><p><strong>使用join()方法实现主键合并</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sale_detail2 = data1.join(goods_info, on=<span class="string">&#x27;sku_id&#x27;</span>, rsuffix=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;销售流水记录表和商品信息表join合并后的形状为：&#x27;</span>, sale_detail2.shape)</span><br><span class="line"><span class="comment"># 销售流水记录表和商品信息表join合并后的形状为： (611200, 18)</span></span><br></pre></td></tr></table></figure><h3 id="重叠合并数据"><a href="#重叠合并数据" class="headerlink" title="重叠合并数据"></a>重叠合并数据</h3><p>数据分析和处理过程中偶尔会出现两份数据的内容几乎一致的情况，但是某些特征在其中一张表上是完整的，而在另外一张表上的数据则是缺失的。这时除了将数据一对一比较，然后进行填充的方法外，还有一种方法就是重叠合并。pandas库提供了combine_first()方法进行重叠数据合并，其原理如图所示</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915183007697.png" alt="image-20220915183007697"></p><p>combine_first()方法的基本使用格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame.combine_first(other)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>other</strong></td><td>接收DataFrame，表示参与重叠合并的另一个DataFrame。无默认值</td></tr></tbody></table><p><strong>重叠合并</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 生成两个数据框</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">2.</span>, np.nan, <span class="number">1.</span>, np.nan], <span class="string">&#x27;b&#x27;</span>: [np.nan, <span class="number">6.</span>, np.nan, <span class="number">8.</span>],</span><br><span class="line"><span class="string">&#x27;c&#x27;</span>: <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>)&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">6.</span>, <span class="number">2.</span>, np.nan, <span class="number">1.</span>, <span class="number">8.</span>], <span class="string">&#x27;b&#x27;</span>: [np.nan, <span class="number">2.</span>, <span class="number">5.</span>, <span class="number">8.</span>, <span class="number">9.</span>]&#125;)</span><br><span class="line"><span class="comment"># 采取不同的方式</span></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\ndf1.combine_first(df2)的结果：\n&#x27;</span>, df1.combine_first(df2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\ndf2.combine_first(df1)的结果：\n&#x27;</span>, df2.combine_first(df1))</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/image-20220915225926424.png" alt="image-20220915225926424"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章主要以销售流水记录表数据为例子，实现了读取数据、处理不符合可视化要求的数据，即校验数据、清洗数据、合并数据等内容。</p><ul><li><strong>读取数据</strong>，主要介绍了借助Pandas库，读取csv，Excel，mysql三种常见的数据文件。</li><li><strong>校验数据，</strong>主要介绍了一致性检验、缺失值检验以及异常值的检验。</li><li><strong>清洗数据，</strong>主要介绍了重复值、缺失值以及异常值的常见处理方式。</li><li><strong>合并数据，</strong>主要介绍了堆叠合并数据、主键合并数据以及重叠合并数据。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts学习笔记</title>
      <link href="/2022/09/14/pyecharts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/14/pyecharts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://pyecharts.org/#/zh-cn/intro">pyecharts简介</a></p><p>可能需要用到的文件。</p><p><a href="https://www.aliyundrive.com/s/C1NtQ8s2twe">点击此处下载</a> 提取码ik09</p><h1 id="pyechart绘图基础"><a href="#pyechart绘图基础" class="headerlink" title="pyechart绘图基础"></a>pyechart绘图基础</h1><h2 id="初始配置项"><a href="#初始配置项" class="headerlink" title="初始配置项"></a>初始配置项</h2><p>初始配置项是在初始化对象中进行配置的，可以设置画布的长与宽、网页标题、图表主题、背景色等。初始配置项是通过options模块中的InitOpts类实现的，可以使用init_opts作为参数传递。InitOpts类的使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InitOpts</span>(width=<span class="string">&#x27;900px&#x27;</span>, height=<span class="string">&#x27;500px&#x27;</span>,chart_id=<span class="literal">None</span>,renderer=RenderType.CANVAS, page_title=<span class="string">&#x27;Awesome-pyecharts&#x27;</span>, theme=<span class="string">&#x27;white&#x27;</span>, bg_color=<span class="literal">None</span>, js_host=<span class="string">&#x27;&#x27;</span>,animation_opts=AnimationOpts())</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>width</strong></td><td>接收str，表示图表画布宽度。默认为900px</td></tr><tr><td><strong>height</strong></td><td>接收str，表示图表画布高度。默认为500px</td></tr><tr><td><strong>chart_id</strong></td><td>接收str，表示图表ID，图表唯一标识，可用于在多个图表合并时进行图表之间的区分。默认为None</td></tr><tr><td><strong>renderer</strong></td><td>接收str，表示渲染风格，可选canvas或svg。默认为canvas</td></tr><tr><td><strong>page_title</strong></td><td>接收str，表示网页标题。默认为Awesome-pyecharts</td></tr><tr><td><strong>theme</strong></td><td>接收str，表示图表主题。默认为white</td></tr><tr><td><strong>bg_color</strong></td><td>接收str，表示图表背景颜色。默认为None</td></tr></tbody></table><h2 id="系列配置项"><a href="#系列配置项" class="headerlink" title="系列配置项"></a>系列配置项</h2><h3 id="文字样式配置项"><a href="#文字样式配置项" class="headerlink" title="文字样式配置项"></a>文字样式配置项</h3><p>文字样式配置项是通过options模块中的TextStyleOpts类实现的，可以使用text_style_opts作为参数传递给set_series_opts()方法。TextStyleOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextStyleOpts</span>(color=<span class="literal">None</span>, font_style=<span class="literal">None</span>, font_weight=<span class="literal">None</span>, font_family=<span class="literal">None</span>, font_size=<span class="literal">None</span>, align=<span class="literal">None</span>, vertical_align=<span class="literal">None</span>, line_height=<span class="literal">None</span>, background_color=<span class="literal">None</span>, border_color=<span class="literal">None</span>, border_width=<span class="literal">None</span>， border_radius=<span class="literal">None</span>, padding=<span class="literal">None</span>, shadow_color=<span class="literal">None</span>, shadow_blur=<span class="literal">None</span>, width=<span class="literal">None</span>, height=<span class="literal">None</span>, rich=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>color</strong></td><td>接收str，表示文字颜色。默认为None</td></tr><tr><td><strong>font_style</strong></td><td>接收str，表示文字字体风格，可选normal、italic、oblique。默认为None</td></tr><tr><td><strong>font_weight</strong></td><td>接收str，表示主标题字体的粗细，可选normal、bold、bolder、lighter。默认为None</td></tr><tr><td><strong>font_family</strong></td><td>接收str，表示文字的字体系列。默认为None</td></tr><tr><td><strong>font_size</strong></td><td>接收numeric，表示文字的字体大小。默认为None</td></tr><tr><td><strong>align</strong></td><td>接收str，表示文字水平对齐方式。默认为None</td></tr><tr><td><strong>vertical_align</strong></td><td>接收str，表示文字垂直对齐方式。默认为None</td></tr><tr><td><strong>line_height</strong></td><td>接收str，表示行高。默认为None</td></tr><tr><td><strong>background_color</strong></td><td>接收str，表示文字块背景色。默认为None</td></tr><tr><td><strong>border_color</strong></td><td>接收str，表示文字块边框颜色。默认为None</td></tr><tr><td><strong>border_width</strong></td><td>接收numeric，表示文字块边框宽度。默认为None</td></tr></tbody></table><h3 id="标签配置项"><a href="#标签配置项" class="headerlink" title="标签配置项"></a>标签配置项</h3><p>标签配置项是通过options模块中的LabelOpts类实现的，可以使用label_opts作为参数传递给set_series_opts()方法。LabelOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LabelOpts</span>(is_show=<span class="literal">True</span>, position=<span class="string">&#x27;top&#x27;</span>, color=<span class="literal">None</span>, distance=<span class="literal">None</span>, font_size=<span class="number">12</span>, font_style=<span class="literal">None</span>, font_weight=<span class="literal">None</span>, font_family=<span class="literal">None</span>, rotate=<span class="literal">None</span>, margin=<span class="number">8</span>, interval=<span class="literal">None</span>, horizontal_align=<span class="literal">None</span> vertical_align=<span class="literal">None</span>, formatter=<span class="literal">None</span>, rich=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>is_show</strong></td><td>接收bool，表示是否显示标签。默认为True</td></tr><tr><td><strong>position</strong></td><td>接收str、Sequence，表示标签的位置。默认为top</td></tr><tr><td><strong>color</strong></td><td>接收str，表示文字的颜色。默认为None</td></tr><tr><td><strong>font_family</strong></td><td>接收str，表示文字的字体系列。默认为None</td></tr><tr><td><strong>font_size</strong></td><td>接收numeric，表示文字的字体大小。默认为12</td></tr><tr><td><strong>font_weight</strong></td><td>接收str，表示文字字体的粗细，可选normal、bold、bolder、lighter。默认为None</td></tr><tr><td><strong>rotate</strong></td><td>接收numeric，表示标签旋转角度，从-90度到90度。默认为None</td></tr><tr><td><strong>horizontal_align</strong></td><td>接收str，表示文字水平对齐方式，默认None</td></tr></tbody></table><h3 id="线样式配置项"><a href="#线样式配置项" class="headerlink" title="线样式配置项"></a>线样式配置项</h3><p>线样式配置项是通过options模块中的LineStyleOpts类实现的，可以使用line_style_opts作为参数传递给set_series_opts()方法。LineStyleOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LineStyleOpts</span>(is_show=<span class="literal">True</span>, width=<span class="number">1</span>, opacity=<span class="number">1</span>, curve=<span class="number">0</span>, type_=<span class="string">&#x27;solid&#x27;</span>, color=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>is_show</strong></td><td>接收bool，表示是否显示线。默认为True</td></tr><tr><td><strong>width</strong></td><td>接收numeric，表示线的宽度。默认为1</td></tr><tr><td><strong>opacity</strong></td><td>接收numeric，表示图形透明度，支持从0到1的数字。默认为1</td></tr><tr><td><strong>curve</strong></td><td>接收numeric，表示线的弯曲度，0表示完全不弯曲。默认为0</td></tr><tr><td><strong>type_</strong></td><td>接收str，表示线的类型，常用solid、dashed、dotted。默认为solid</td></tr><tr><td><strong>color</strong></td><td>接收str，表示线的颜色。默认为None</td></tr></tbody></table><h3 id="标记点配置项"><a href="#标记点配置项" class="headerlink" title="标记点配置项"></a>标记点配置项</h3><p>标记点配置项是通过options模块中的MarkPointOpts类实现的，可以使用markpoint_opts作为参数传递给set_series_opts()方法。MarkPointOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MarkPointOpts</span>(data=<span class="literal">None</span>, symbol=<span class="literal">None</span>, symbol_size=<span class="literal">None</span>, label_opts=opts.LabelOpts(position=<span class="string">&#x27;inside&#x27;</span>, color=<span class="string">&#x27;#fff&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>data</strong></td><td>接收Sequence对象，表示标记点数据。默认为None</td></tr><tr><td><strong>symbol</strong></td><td>接收str，表示标记的图形，提供的标记类型包括circle、rect、roundrect、triangle、diamond、pin、arrow、None。默认为None</td></tr><tr><td><strong>symbol_size</strong></td><td>接收numeric，表示标记的大小，可以设置成单一的数字，如10；也可以使用数组分开表示宽和高，例如，[20,  10]表示标记宽为20，高为10。默认为None</td></tr><tr><td><strong>label_opts</strong></td><td>表示标签配置项</td></tr></tbody></table><h2 id="全局配置项"><a href="#全局配置项" class="headerlink" title="全局配置项"></a>全局配置项</h2><h3 id="标题配置项"><a href="#标题配置项" class="headerlink" title="标题配置项"></a>标题配置项</h3><p>标题配置项是通过options模块中的TitleOpts类实现的，可以使用title_opts作为参数传递给set_global_opts()方法。TitleOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TitleOpts</span>(title=<span class="literal">None</span>, title_link=<span class="literal">None</span>, title_target=<span class="literal">None</span>, subtitle=<span class="literal">None</span>, subtitle_link=<span class="literal">None</span>, subtitle_target=<span class="literal">None</span>, pos_left=<span class="literal">None</span>, pos_right=<span class="literal">None</span>, pos_top=<span class="literal">None</span>, pos_bottom=<span class="literal">None</span>, padding=<span class="number">5</span>, item_gap=<span class="number">10</span>, title_textstyle_opts=<span class="literal">None</span>, subtitle_textstyle_opts=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>title</strong></td><td>接收str，表示主标题文本，支持使用\n换行。默认为None</td></tr><tr><td><strong>title_link</strong></td><td>接收str，表示主标题跳转URL链接。默认为None</td></tr><tr><td><strong>title_target</strong></td><td>接收str，表示主标题跳转链接方式，可选self、blank，self表示当前窗口打开，blank表示新窗口打开。默认为blank</td></tr><tr><td><strong>subtitle</strong></td><td>接收str，表示副标题文本，支持使用\n换行。默认为None</td></tr><tr><td><strong>subtitle_link</strong></td><td>接收str，表示副标题跳转URL链接。默认为None</td></tr><tr><td><strong>subtitle_target</strong></td><td>接收str，表示副标题跳转链接方式。默认为blank</td></tr><tr><td><strong>item_gap</strong></td><td>接收numeric，表示主副标题之间的间距。默认为10</td></tr><tr><td><strong>title_textstyle_opts</strong></td><td>表示主标题字体样式配置项</td></tr><tr><td><strong>subtitle_textstyle_opts</strong></td><td>表示副标题字体样式配置项</td></tr></tbody></table><h3 id="图例配置项"><a href="#图例配置项" class="headerlink" title="图例配置项"></a>图例配置项</h3><p>图例配置项是通过options模块中的LegendOpts类实现的，可以使用legend_opts作为参数传递给set_global_opts()方法。LegendOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LegendOpts</span>(type_=<span class="literal">None</span>, selected_mode=<span class="literal">None</span>, is_show=<span class="literal">True</span>, pos_left=<span class="literal">None</span>, pos_right=<span class="literal">None</span>, pos_top=<span class="literal">None</span>, pos_bottom=<span class="literal">None</span>, orient=<span class="literal">None</span>, align=<span class="literal">None</span>, padding=<span class="number">5</span>, item_gap=<span class="number">10</span>, item_width=<span class="number">25</span>, item_height=<span class="number">14</span>, inactive_color=<span class="literal">None</span>, textstyle_opts=<span class="literal">None</span>, legend_icon=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>type_</strong></td><td>接收str，表示图例的类型。可选plain、scroll，plain表示普通图例，scroll表示可滚动翻页的图例。默认为None</td></tr><tr><td><strong>is_show</strong></td><td>接收bool，表示是否显示图例组件，默认为True</td></tr><tr><td><strong>orient</strong></td><td>接收str，表示图例列表的布局朝向，可选horizontal、vertical。默认为None</td></tr><tr><td><strong>item_gap</strong></td><td>接收int，表示图例每项之间的间隔。默认为10</td></tr><tr><td><strong>inactive_color</strong></td><td>接收str，表示图例关闭时的颜色。默认为#ccc</td></tr><tr><td><strong>pos_left</strong></td><td>接收str、numeric，表示图例组件离容器左侧的距离。默认为None</td></tr><tr><td><strong>pos_right</strong></td><td>接收str、numeric，表示图例组件离容器右侧的距离。默认为None</td></tr><tr><td><strong>pos_top</strong></td><td>接收str、numeric，表示图例组件离容器上侧的距离。默认为None</td></tr><tr><td><strong>pos_bottom</strong></td><td>接收str、numeric，表示图例组件离容器下侧的距离。默认为None</td></tr></tbody></table><h3 id="坐标轴配置项"><a href="#坐标轴配置项" class="headerlink" title="坐标轴配置项"></a>坐标轴配置项</h3><p>坐标轴配置项是通过options模块中的AxisOpts类实现的，可以使用xaxis_opts或yaxis_opts作为参数传递给set_global_opts()方法。AxisOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AxisOpts</span>(type_=<span class="literal">None</span>, name=<span class="literal">None</span>, is_show=<span class="literal">True</span>, is_scale=<span class="literal">False</span>, is_inverse=<span class="literal">False</span>, name_location=<span class="string">&#x27;end&#x27;</span>, name_gap=<span class="number">15</span>, name_rotate=<span class="literal">None</span>, interval=<span class="literal">None</span>, grid_index =<span class="number">0</span>, position=<span class="literal">None</span>, offset=<span class="number">0</span>, split_number=<span class="number">5</span>, boundary_gap=<span class="literal">None</span>, min_=<span class="literal">None</span>, max_=<span class="literal">None</span>, min_interval=<span class="number">0</span>, max_interval=<span class="literal">None</span>, axisline_opts=<span class="literal">None</span>, axistick_opts=<span class="literal">None</span>, axislabel_opts=<span class="literal">None</span>, axispointer_opts=<span class="literal">None</span>, name_textstyle_opts=<span class="literal">None</span>, splitarea_opts=<span class="literal">None</span>, splitline_opts= SplitLineOpts(), minor_tick_opts=<span class="literal">None</span>, minor_split_line_opts=<span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>type_</strong></td><td>接收str，表示坐标轴类型。可选value、category、time、log，value表示数值轴，适用于连续数据；category表示类目轴，适用于离散的类目数据；time表示时间轴，适用于连续的时序数据；log表示对数轴，适用于对数数据。默认为None</td></tr><tr><td><strong>name</strong></td><td>接收str，表示坐标轴名称。默认为None</td></tr><tr><td><strong>is_show</strong></td><td>接收bool，表示是否显示X坐标轴。默认为True</td></tr><tr><td><strong>is_inverse</strong></td><td>接收bool，表示是否反向坐标轴。默认为False</td></tr><tr><td><strong>name_gap</strong></td><td>接收numeric，表示坐标轴名称与轴线之间的距离。默认为15</td></tr><tr><td><strong>name_rotate</strong></td><td>接收numeric，表示坐标轴名字旋转角度值。默认为None</td></tr><tr><td><strong>position</strong></td><td>接收str，表示X轴的位置，可选top、bottom，top表示在上侧，bottom表示在下侧。默认为None</td></tr><tr><td><strong>split_number</strong></td><td>接收numeric，表示坐标轴的分割段数。默认为5</td></tr><tr><td><strong>min_</strong></td><td>接收str、numeric，表示坐标轴刻度最小值。默认为None</td></tr><tr><td><strong>max_</strong></td><td>接收str、numeric，表示坐标轴刻度最大值。默认为None</td></tr></tbody></table><h1 id="绘制交互式基础图形"><a href="#绘制交互式基础图形" class="headerlink" title="绘制交互式基础图形"></a>绘制交互式基础图形</h1><p><strong>导入相关库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Scatter</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Boxplot</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Scatter3D</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br></pre></td></tr></table></figure><h2 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h2><h3 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h3><p>在pyecharts库中，可使用Bar类绘制条形图或柱形图。Bar类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add_xaxis(xaxis_data)</span><br><span class="line">.add_yaxis(series_name, y_axis, is_selected=<span class="literal">True</span>, xaxis_index=<span class="literal">None</span>, yaxis_index=<span class="literal">None</span>, is_legend_hover_link=<span class="literal">True</span>, color=<span class="literal">None</span>, is_show_background=<span class="literal">False</span>, background_style=<span class="literal">None</span>, stack=<span class="literal">None</span>, bar_width=<span class="literal">None</span>, bar_max_width=<span class="literal">None</span>, bar_min_width=<span class="literal">None</span>, bar_min_height=<span class="number">0</span>, category_gap=<span class="string">&#x27;20%&#x27;</span>, gap=<span class="string">&#x27;30%&#x27;</span>, is_large=<span class="literal">False</span>, large_threshold=<span class="number">400</span>, dimensions=<span class="literal">None</span>, series_layout_by=<span class="string">&#x27;column&#x27;</span>, dataset_index=<span class="number">0</span>, is_clip=<span class="literal">True</span>, z_level=<span class="number">0</span>, z=<span class="number">2</span>, label_opts=opts.LabelOpts(), markpoint_opts=<span class="literal">None</span>, markline_opts=<span class="literal">None</span>, tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>, encode=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;<strong>opts.InitOpts</strong>()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add_xaxis</strong>()</td><td>表示添加X轴数据项</td></tr><tr><td align="center"><strong>xaxis_data</strong></td><td>接收Sequence，表示X轴数据项。无默认值</td></tr><tr><td align="center"><strong>add_yaxis()</strong></td><td>表示添加Y轴数据项</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>y_axis</strong></td><td>接收numeric、opts.BarItem、dict型序列数据，表示系列数据。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>xaxis_index</strong></td><td>接收numeric，表示使用的x轴的index，在单个图表实例中存在多个x轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>yaxis_index</strong></td><td>接收numeric，表示使用的y轴的index，在单个图表实例中存在多个y轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>is_legend_hover_link</strong></td><td>接收bool，表示是否启用图例在hover时的联动高亮。默认为True</td></tr><tr><td align="center"><strong>color</strong></td><td>接收str，表示系列label颜色。默认为None</td></tr></tbody></table><table><thead><tr><th align="center"><strong>is_show_background</strong></th><th><strong>接收</strong>bool，表示是否显示柱条的背景色。默认为False</th></tr></thead><tbody><tr><td align="center"><strong>stack</strong></td><td>接收str，表示数据堆叠，同个类目轴上系列配置相同的stack值可以堆叠放置。默认为None</td></tr><tr><td align="center"><strong>bar_width</strong></td><td>接收types.numeric、str，表示柱条的宽度，不设置时为自适应。可以是绝对值或百分数，如40、60%。在同一坐标系上，此属性会被多个bar系列共享。此属性应设置于此坐标系中最后一个bar系列上才会生效，并且是对此坐标系中所有bar系列生效。默认为None</td></tr><tr><td align="center"><strong>bar_max_width</strong></td><td>接收types.numeric、str，表示柱条的最大宽度。默认为None</td></tr><tr><td align="center"><strong>bar_min_width</strong></td><td>接收types.numeric、str，表示柱条的最小宽度。在直角坐标系中，默认为1。否则，默认为null</td></tr><tr><td align="center"><strong>bar_min_height</strong></td><td>接收types.numeric，表示柱条最小高度，可用于防止某数据项的值过小而影响交互。默认为0</td></tr><tr><td align="center"><strong>category_gap</strong></td><td>接收numeric、str，表示同一系列的柱间距离。默认为20%</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong>()</td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例1</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar = Bar()</span><br><span class="line">bar.add_xaxis(xaxis_data=[<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">bar.add_yaxis(series_name=<span class="string">&quot;商家A&quot;</span>, y_axis=[<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914170900.png"/><p><strong>示例2：使用条形图查看手机售卖情况</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用条形图查看手机售卖情况</span></span><br><span class="line"><span class="comment"># Bar：柱状图/条形图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line">Faker.phones</span><br><span class="line">Faker.values()</span><br><span class="line">c = Bar()</span><br><span class="line">c.add_xaxis(Faker.phones)</span><br><span class="line">c.add_yaxis(<span class="string">&#x27;商家A&#x27;</span>,Faker.values())</span><br><span class="line">c.add_yaxis(<span class="string">&#x27;商家B&#x27;</span>,Faker.values())</span><br><span class="line">c.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本示例&quot;</span>, subtitle=<span class="string">&quot;我是副标题&quot;</span>))</span><br><span class="line"><span class="comment"># c.set_series_opts(label_opts=opts.LabelOpts(formatter=&#x27;&#123;b&#125;: &#123;c&#125;&#x27;))</span></span><br><span class="line">c.render(path=<span class="string">&#x27;./images/13.html&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914185508.png"/><p>示例3：</p><p>商家A和商家B的各类商品的销售数据，如下表所示</p><table><thead><tr><th><strong>商家</strong></th><th><strong>衬衫</strong></th><th><strong>毛衣</strong></th><th><strong>领带</strong></th><th><strong>裤子</strong></th><th><strong>风衣</strong></th><th><strong>高跟鞋</strong></th><th><strong>袜子</strong></th></tr></thead><tbody><tr><td>商家A</td><td>120</td><td>56</td><td>28</td><td>98</td><td>129</td><td>28</td><td>107</td></tr><tr><td>商家B</td><td>60</td><td>140</td><td>153</td><td>145</td><td>160</td><td>70</td><td>54</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_excel(<span class="string">&#x27;./data/商家A和商家B的各类商品的销售数据.xlsx&#x27;</span>,</span><br><span class="line">                   index_col=<span class="string">&#x27;商家&#x27;</span>)</span><br><span class="line">init_opts=opts.InitOpts(width=<span class="string">&#x27;1000px&#x27;</span>, height=<span class="string">&#x27;450px&#x27;</span>, theme=ThemeType.LIGHT) <span class="comment"># 主体</span></span><br><span class="line">bar = (</span><br><span class="line">    Bar(init_opts)</span><br><span class="line">    .add_xaxis(data.columns.tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts</span><br><span class="line">    (title=<span class="string">&#x27;商家A和商家B销售情况柱形图&#x27;</span>)))</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920201825609.png" alt="image-20220920201825609"></p><h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><p>当条目较多时，使用柱形图展示数据时将会显得较拥挤。此时，可以通过翻转X轴和Y轴来显示图形，即使用条形图展示数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;600px&#x27;</span>)</span><br><span class="line">bar=(</span><br><span class="line">    Bar(init_opts)</span><br><span class="line">          .add_xaxis(data.columns.tolist())</span><br><span class="line">          .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())</span><br><span class="line">          .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())</span><br><span class="line">        .reversal_axis()</span><br><span class="line">         .set_series_opts(label_opts=opts.LabelOpts(position=<span class="string">&#x27;right&#x27;</span>)) <span class="comment"># label位置</span></span><br><span class="line">         .set_global_opts(title_opts=opts.TitleOpts</span><br><span class="line">                          (title=<span class="string">&#x27;商家A和商家B销售情况条形图&#x27;</span>), </span><br><span class="line">                          legend_opts=opts.LegendOpts(pos_right=<span class="string">&#x27;20%&#x27;</span>))</span><br><span class="line">     )</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920202039096.png" alt="image-20220920202039096"></p><h3 id="堆叠柱形图"><a href="#堆叠柱形图" class="headerlink" title="堆叠柱形图"></a>堆叠柱形图</h3><p>可以将柱形图堆叠起来显示，即堆叠柱形图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>) <span class="comment"># 图大小</span></span><br><span class="line">bar=(</span><br><span class="line">    Bar(init_opts)</span><br><span class="line">          .add_xaxis(data.columns.tolist())</span><br><span class="line">          .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist(), stack=<span class="string">&#x27;stack1&#x27;</span>, </span><br><span class="line">                     label_opts=opts.LabelOpts(position=<span class="string">&#x27;insideTop&#x27;</span>)) <span class="comment"># label</span></span><br><span class="line">          .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist(), stack=<span class="string">&#x27;stack1&#x27;</span>, </span><br><span class="line">                     label_opts=opts.LabelOpts(position=<span class="string">&#x27;insideTop&#x27;</span>))</span><br><span class="line">         .set_global_opts(title_opts=opts.TitleOpts(</span><br><span class="line">         title=<span class="string">&#x27;商家A和商家B销售情况堆叠柱形图&#x27;</span>)) <span class="comment"># title</span></span><br><span class="line">     )</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920202332137.png" alt="image-20220920202332137"></p><p>通过设置系列配置项，可以在柱形图上显示最大值、最小值以及平均值等标注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>)</span><br><span class="line">bar=(</span><br><span class="line">    Bar(init_opts)</span><br><span class="line">        .add_xaxis(data.columns.tolist())</span><br><span class="line">        .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())</span><br><span class="line">        .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;指定标记点的柱形图&#x27;</span>))</span><br><span class="line">        .set_series_opts(</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>), <span class="comment"># label不展示</span></span><br><span class="line">            markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">                data=[</span><br><span class="line">                    opts.MarkPointItem(type_=<span class="string">&#x27;max&#x27;</span>, name=<span class="string">&#x27;最大值&#x27;</span>),</span><br><span class="line">                    opts.MarkPointItem(type_=<span class="string">&#x27;min&#x27;</span>, name=<span class="string">&#x27;最小值&#x27;</span>),</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920202527626.png" alt="image-20220920202527626"></p><h2 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h2><p>在pyecharts库中，可使用Scatter类绘制散点图。Scatter类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scatter</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add_xaxis(xaxis_data)</span><br><span class="line">.add_yaxis(series_name, y_axis, is_selected=<span class="literal">True</span>, xaxis_index=<span class="literal">None</span>, yaxis_index=<span class="literal">None</span>, color=<span class="literal">None</span>, symbol=<span class="literal">None</span>, symbol_size=<span class="number">10</span>, symbol_rotate=<span class="literal">None</span>, label_opts=opts.LabelOpts(position=<span class="string">&#x27;right&#x27;</span>), markpoint_opts=<span class="literal">None</span>, markline_opts=<span class="literal">None</span>, markarea_opts=<span class="literal">None</span>, tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>, encode=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add_xaxis()</strong></td><td>表示添加X轴数据项</td></tr><tr><td align="center"><strong>xaxis_data</strong></td><td>接收Sequence，表示X轴数据项。无默认值</td></tr><tr><td align="center"><strong>add_yaxis()</strong></td><td>表示添加Y轴数据项</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>y_axis</strong></td><td>接收Sequence序列数据，表示系列数据。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>xaxis_index</strong></td><td>接收numeric，表示使用的x轴的index，在单个图表实例中存在多个x轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>yaxis_index</strong></td><td>接收numeric，表示使用的y轴的index，在单个图表实例中存在多个y轴的时候有用。默认为None</td></tr></tbody></table><table><thead><tr><th align="center"><strong>color</strong></th><th>接收str，表示系列label颜色。默认为None</th></tr></thead><tbody><tr><td align="center"><strong>symbol</strong></td><td>接收str，表示标记的图形，可选的标记类型包括circle、rect、roundrect、triangle、diamond、pin、arrow、None。默认为None</td></tr><tr><td align="center"><strong>symbol_size</strong></td><td>接收numeric，表示标记的大小，可以设置成单一的数字，如10；也可以用数组分开表示宽和高，例如，[20,  10]表示标记宽为20，高为10。默认为10</td></tr><tr><td align="center"><strong>symbol_rotate</strong></td><td>接收types.numeric，表示标记的旋转角度。默认为None</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong>()</td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">y2 = np.cos(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">point1 = (Scatter()</span><br><span class="line">.add_xaxis(xaxis_data = x)</span><br><span class="line">.add_yaxis(series_name = <span class="string">&quot;sin&quot;</span>,y_axis= y)</span><br><span class="line">.add_yaxis(series_name = <span class="string">&#x27;cos&#x27;</span>,y_axis= y2,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>)))</span><br><span class="line"><span class="comment">#设置是否显示散点值</span></span><br><span class="line">point1.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914193702.png"></p><p><strong>示例2</strong></p><p>某小学部分学生的身高和体重的数据，如下表所示</p><table><thead><tr><th><strong>身高</strong></th><th><strong>0.75</strong></th><th><strong>0.85</strong></th><th><strong>0.95</strong></th><th><strong>1.08</strong></th><th><strong>1.12</strong></th><th><strong>1.16</strong></th><th><strong>1.35</strong></th><th><strong>1.51</strong></th><th><strong>1.55</strong></th><th><strong>1.6</strong></th><th><strong>1.63</strong></th><th><strong>1.67</strong></th></tr></thead><tbody><tr><td>体重</td><td><strong>10</strong></td><td><strong>12</strong></td><td><strong>15</strong></td><td><strong>17</strong></td><td><strong>20</strong></td><td><strong>22</strong></td><td><strong>35</strong></td><td><strong>42</strong></td><td><strong>48</strong></td><td><strong>50</strong></td><td><strong>51</strong></td><td><strong>54</strong></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">student_data = pd.read_excel(<span class="string">&#x27;./data/学生身高和体重数据.xlsx&#x27;</span>, header=<span class="literal">None</span>)</span><br><span class="line">student_data.set_index([<span class="number">0</span>], inplace=<span class="literal">True</span>) <span class="comment"># 设置索引 将每行第一个元素作为该行索引</span></span><br><span class="line"></span><br><span class="line">c=(Scatter(init_opts=opts.InitOpts(width=<span class="string">&#x27;700px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">   .add_xaxis(xaxis_data=student_data.loc[<span class="string">&#x27;身高&#x27;</span>].tolist())</span><br><span class="line">   .add_yaxis(<span class="string">&#x27;&#x27;</span>, y_axis=student_data.loc[<span class="string">&#x27;体重&#x27;</span>].tolist(), symbol_size=<span class="number">20</span>, </span><br><span class="line">              label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;体重与身高关系散点图&#x27;</span>, subtitle=<span class="string">&#x27;&#x27;</span>), </span><br><span class="line">        xaxis_opts=opts.AxisOpts(</span><br><span class="line">            type_=<span class="string">&#x27;value&#x27;</span>, splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>), </span><br><span class="line">            name=<span class="string">&#x27;身高（m）&#x27;</span>),</span><br><span class="line">        yaxis_opts=opts.AxisOpts(name=<span class="string">&#x27;体重（kg）&#x27;</span>,</span><br><span class="line">            type_=<span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            axistick_opts=opts.AxisTickOpts(is_show=<span class="literal">True</span>),  <span class="comment"># 设置坐标轴刻度 更加清晰</span></span><br><span class="line">            splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>), </span><br><span class="line">        ),</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(is_show=<span class="literal">False</span>), </span><br><span class="line">    ))</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920203134501.png" alt="image-20220920203134501"></p><h2 id="绘制折线图"><a href="#绘制折线图" class="headerlink" title="绘制折线图"></a>绘制折线图</h2><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><p>在pyecharts库中，可使用Line类绘制折线图。Line类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add_xaxis(xaxis_data)</span><br><span class="line">.add_yaxis(series_name, y_axis, is_selected=<span class="literal">True</span>, is_connect_nones=<span class="literal">False</span>, xaxis_index=<span class="literal">None</span>, yaxis_index=<span class="literal">None</span>, color=<span class="literal">None</span>, is_symbol_show=<span class="literal">True</span>, symbol=<span class="literal">None</span>, symbol_size=<span class="number">4</span>, stack=<span class="literal">None</span>, is_smooth=<span class="literal">False</span>, is_clip=<span class="literal">True</span>, is_step=<span class="literal">False</span>，is_hover_animation=<span class="literal">True</span>， z_level=<span class="number">0</span>， z=<span class="number">0</span>， markpoint_opts=<span class="literal">None</span>， markline_opts=<span class="literal">None</span>， tooltip_opts=<span class="literal">None</span>， label_opts=opts.LabelOpts()， linestyle_opts=opts.LineStyleOpts()， areastyle_opts=opts.AreaStyleOpts()， itemstyle_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts&#x3D;opts.InitOpts()</strong></td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add_xaxis</strong>()</td><td>表示添加X轴数据项</td></tr><tr><td align="center"><strong>xaxis_data</strong></td><td>接收Sequence，表示X轴数据项。无默认值</td></tr><tr><td align="center"><strong>add_yaxis()</strong></td><td>表示添加Y轴数据项</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>y_axis</strong></td><td>接收types.Sequence序列，表示系列数据。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>is_connect_nones</strong></td><td>接收bool，表示是否连接空数据。当含有空数据时，使用None填充。默认使False</td></tr><tr><td align="center"><strong>xaxis_index</strong></td><td>接收numeric，表示使用的x轴的index，在单个图表实例中存在多个x轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>yaxis_index</strong></td><td>接收numeric，表示使用的y轴的index，在单个图表实例中存在多个y轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>color</strong></td><td>接收str，表示系列label颜色。默认为None</td></tr></tbody></table><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">y2 = np.cos(x)</span><br><span class="line">point2 = (Line()</span><br><span class="line">          .add_xaxis(xaxis_data=x)</span><br><span class="line">          .add_yaxis(series_name=<span class="string">&#x27;sin&#x27;</span>,y_axis=y,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">          .add_yaxis(series_name=<span class="string">&#x27;cos&#x27;</span>,y_axis=y2,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">          .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;sin和cos的函数曲线&quot;</span>),</span><br><span class="line">                           tooltip_opts=opts.TooltipOpts(axis_pointer_type=<span class="string">&#x27;cross &#x27;</span>))</span><br><span class="line">          )</span><br><span class="line">point2.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914193917.png"></p><p><strong>示例2：</strong></p><p>商家A和商家B的各类商品的销售数据，如下表所示</p><table><thead><tr><th><strong>商家</strong></th><th><strong>衬衫</strong></th><th><strong>毛衣</strong></th><th><strong>领带</strong></th><th><strong>裤子</strong></th><th><strong>风衣</strong></th><th><strong>高跟鞋</strong></th><th><strong>袜子</strong></th></tr></thead><tbody><tr><td>商家A</td><td>120</td><td>56</td><td>28</td><td>98</td><td>129</td><td>28</td><td>107</td></tr><tr><td>商家B</td><td>60</td><td>140</td><td>153</td><td>145</td><td>160</td><td>70</td><td>54</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">line = (Line()</span><br><span class="line">   .add_xaxis(data.columns.tolist())</span><br><span class="line">   .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist(), is_smooth=<span class="literal">True</span>)  <span class="comment"># 设置曲线光滑</span></span><br><span class="line">   .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())</span><br><span class="line">  .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家A和商家B销售情况折线图&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置全局选项</span></span><br><span class="line">    )</span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><p>商家A的曲线设置了参数is_smooth&#x3D;True，在显示时为光滑的折线，而商家B的曲线没有进行设置，在显示时为不光滑的折线。</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920203308658.png" alt="image-20220920203308658"></p><h3 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h3><p>面积图又称区域图，强调数量随时间而变化的程度，也可用于引起人们对总值趋势的注意。Line类也可以绘制面积图，主要是在add_yaxis参数中配置区域填充样式配置项，即options.AreaStyleOpts（opacity&#x3D;0, color&#x3D;None），其中opacity参数为图形透明度，支持从0到1的数字，为0时不绘制该图形，color参数为填充的颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码5-7</span></span><br><span class="line">line=(Line()</span><br><span class="line">   .add_xaxis(data.columns.tolist())</span><br><span class="line">   .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist(), is_smooth=<span class="literal">True</span>,<span class="comment"># 设置曲线光滑</span></span><br><span class="line">              areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.5</span>, color=<span class="string">&#x27;red&#x27;</span>))</span><br><span class="line">              </span><br><span class="line">   .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist(), </span><br><span class="line">              areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.6</span>, color=<span class="string">&#x27;blue&#x27;</span>))</span><br><span class="line">  .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家A和商家B销售情况面积图&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置全局选项</span></span><br><span class="line">    )</span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920203629331.png" alt="image-20220920203629331"></p><h2 id="绘制箱线图"><a href="#绘制箱线图" class="headerlink" title="绘制箱线图"></a>绘制箱线图</h2><p>在pyecharts库中，可使用Boxplot类绘制箱线图。Boxplot类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Boxplot</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add_xaxis(xaxis_data)</span><br><span class="line">.add_yaxis(series_name, y_axis, is_selected=<span class="literal">True</span>, xaxis_index=<span class="literal">None</span>, yaxis_index=<span class="literal">None</span>， label_opts=opts.LabelOpts(), markpoint_opts=opts.MarkPointOpts(), markline_opts=opts.MarkLineOpts(), tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts&#x3D;opts.InitOpts()</strong></td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add_xaxis</strong><strong>()</strong></td><td>表示添加X轴数据项</td></tr><tr><td align="center"><strong>xaxis_data</strong></td><td>接收Sequence，表示X轴数据项。无默认值</td></tr><tr><td align="center"><strong>add_yaxis()</strong></td><td>表示添加Y轴数据项</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>y_axis</strong></td><td>接收types.Sequence序列数据，表示系列数据。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>xaxis_index</strong></td><td>接收numeric，表示使用的x轴的index，在单个图表实例中存在多个x轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>yaxis_index</strong></td><td>接收numeric，表示使用的y轴的index，在单个图表实例中存在多个y轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts()</strong></td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p>例：某学校3年级1班、2班、3班、4班的语文考试成绩，如表所示。</p><table><thead><tr><th align="center"><strong>班级</strong></th><th><strong>成绩</strong></th></tr></thead><tbody><tr><td align="center">1班</td><td>68，99，46，77，94，40，79，20，88，89，76，92，95</td></tr><tr><td align="center">2班</td><td>79，88，35，57，78，69，78，99，75，46，88，87，89</td></tr><tr><td align="center">3班</td><td>91，82，63，86，77，78，32，96，80，86，64，67，96</td></tr><tr><td align="center">4班</td><td>72，82，45，100，67，89，90，90，89，69，79，91，92</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制考试成绩的箱线图</span></span><br><span class="line">chinese_data = pd.read_excel(<span class="string">&#x27;../data/语文考试成绩.xlsx&#x27;</span>)</span><br><span class="line">chinese_data.set_index([<span class="string">&#x27;班级&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">box=Boxplot(init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">box.add_xaxis(<span class="built_in">list</span>(chinese_data.index))</span><br><span class="line">box.add_yaxis(<span class="string">&#x27;&#x27;</span>, box.prepare_data([chinese_data.loc[<span class="string">&#x27;1班&#x27;</span>].tolist(), </span><br><span class="line">                                    chinese_data.loc[<span class="string">&#x27;2班&#x27;</span>].tolist(), </span><br><span class="line">                                    chinese_data.loc[<span class="string">&#x27;3班&#x27;</span>].tolist(), </span><br><span class="line">                                    chinese_data.loc[<span class="string">&#x27;4班&#x27;</span>].tolist()]))</span><br><span class="line">box.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;4个班的考试成绩箱线图&#x27;</span>))</span><br><span class="line">box.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220919111237204.png" alt="image-20220919111237204"></p><h2 id="绘制3D散点图"><a href="#绘制3D散点图" class="headerlink" title="绘制3D散点图"></a>绘制3D散点图</h2><p>3D散点图（3D Scatter）与基本散点图类似，区别主要是3D散点图是在三维空间的点图，基本散点图是在二维平面上的点图。</p><p>在pyecharts库中，可使用Scatter3D类绘制3D散点图，Scatter3D类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scatter3D</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, data, grid3d_opacity=<span class="number">1</span>, shading=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>, xaxis3d_opts=opts.Axis3DOpts(), yaxis3d_opts=opts.Axis3DOpts(), zaxis3d_opts=opts.Axis3DOpts(), grid3d_opts=opts.Grid3DOpts(), encode=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>init_opts</strong><strong>&#x3D;<strong><strong>opts.InitOpts</strong></strong>()</strong></td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td><strong>add()</strong></td><td>表示添加数据方法</td></tr><tr><td><strong>name</strong></td><td>接收str，表示图例名称。无默认值</td></tr><tr><td><strong>data</strong></td><td>接收Sequence，表示系列数据，每一行是一个数据项，每一列属于一个维度。无默认值</td></tr><tr><td><strong>grid3d_opacity</strong></td><td>3D笛卡尔坐标系组的透明度（点的透明度），默认为1，完全不透明</td></tr><tr><td><strong>xaxis3d_opts</strong></td><td>表示添加X轴数据项</td></tr><tr><td><strong>yaxis3d_opts</strong></td><td>表示添加Y轴数据项</td></tr><tr><td><strong>zaxis3d_opts</strong></td><td>表示添加Z轴数据项</td></tr><tr><td><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td><strong>set_global_opts</strong><strong>()</strong></td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例</strong></p><p>某运动会各运动员的最大携氧能力、体重和运动后心率部分数据如下表，详见“运动员的最大携氧能力、体重和运动后心率数据.xlsx”</p><table><thead><tr><th><strong>最大携氧能力</strong></th><th><strong>体重</strong></th><th><strong>运动后心率</strong></th></tr></thead><tbody><tr><td>55.79</td><td>70.47</td><td>150</td></tr><tr><td>35.00</td><td>70.34</td><td>144</td></tr><tr><td>42.93</td><td>87.65</td><td>162</td></tr><tr><td>28.30</td><td>89.80</td><td>129</td></tr><tr><td>40.56</td><td>103.02</td><td>143</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">player_data = pd.read_excel(<span class="string">&#x27;./data/运动员的最大携氧能力、体重和运动后心率数据.xlsx&#x27;</span>)</span><br><span class="line">player_data = [player_data[<span class="string">&#x27;体重（kg）&#x27;</span>], player_data[<span class="string">&#x27;运动后心率（次/分钟）&#x27;</span>], </span><br><span class="line">               player_data[<span class="string">&#x27;最大携氧能力（ml/min）&#x27;</span>]]</span><br><span class="line">player_data = np.array(player_data).T.tolist()</span><br><span class="line">s=(Scatter3D()</span><br><span class="line">  .add(<span class="string">&#x27;&#x27;</span>, player_data, xaxis3d_opts=opts.Axis3DOpts(name=<span class="string">&#x27;体重（kg）&#x27;</span>), <span class="comment"># 设置轴名称</span></span><br><span class="line">       yaxis3d_opts=opts.Axis3DOpts(name=<span class="string">&#x27;运动后心率（次/分钟）&#x27;</span>),</span><br><span class="line">       zaxis3d_opts=opts.Axis3DOpts(name=<span class="string">&#x27;最大携氧能力（ml/min）&#x27;</span>)</span><br><span class="line">      )</span><br><span class="line">  .set_global_opts(title_opts=opts.TitleOpts(</span><br><span class="line">      title=<span class="string">&#x27;最大携氧能力、体重和运动后心率3D散点图&#x27;</span>),</span><br><span class="line">                   visualmap_opts=opts.VisualMapOpts(range_color=[</span><br><span class="line">                       <span class="string">&#x27;#1710c0&#x27;</span>, <span class="string">&#x27;#0b9df0&#x27;</span>, <span class="string">&#x27;#00fea8&#x27;</span>, <span class="string">&#x27;#00ff0d&#x27;</span>, <span class="string">&#x27;#f5f811&#x27;</span>, <span class="string">&#x27;#f09a09&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;#fe0300&#x27;</span>]), ))</span><br><span class="line">s.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920204118859.png" alt="image-20220920204118859"></p><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><p>在pyecharts库中，可使用Pie类绘制饼图。Pie类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">Pie</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, data_pair, color=<span class="literal">None</span>, radius=<span class="literal">None</span>, center=<span class="literal">None</span>, rosetype=<span class="literal">None</span>, is_clockwise=<span class="literal">True</span>，label_opts=opts.LabelOpts()，tooltip_opts=<span class="literal">None</span>，itemstyle_opts=<span class="literal">None</span>，encode=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts&#x3D;opts.InitOpts()</strong></td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>data_pair</strong></td><td>接types.Sequence序列，表示系列数据项，格式为[(key1,  value1), (key2, value2)]。无默认值</td></tr><tr><td align="center"><strong>color</strong></td><td>接收str，表示系列label颜色。默认为None</td></tr><tr><td align="center"><strong>radius</strong></td><td>接收Sequence，表示饼图的半径，数组的第一项是内半径，第二项是外半径。默认为None</td></tr><tr><td align="center"><strong>center</strong></td><td>接收Sequence，表示饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标，默认设置成百分比。当设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度。默认为None</td></tr><tr><td align="center"><strong>rosetype</strong></td><td>接收str，表示是否展示成南丁格尔图，通过半径区分数据大小，有radius和area两种模式。radius表示扇区圆心角展现数据的百分比，半径展现数据的大小，area表示所有扇区圆心角相同，仅通过半径展现数据大小。默认为None</td></tr><tr><td align="center"><strong>is_clockwise</strong></td><td>接收bool，表示饼图的扇区是否是顺时针排布。默认值是True</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong><strong>()</strong></td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#饼图</span></span><br><span class="line">num = [<span class="number">110</span>, <span class="number">136</span>, <span class="number">108</span>, <span class="number">48</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">103</span>]</span><br><span class="line">lab = [<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;萨摩耶&#x27;</span>, <span class="string">&#x27;泰迪&#x27;</span>, <span class="string">&#x27;金毛&#x27;</span>, <span class="string">&#x27;牧羊犬&#x27;</span>, <span class="string">&#x27;吉娃娃&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>]</span><br><span class="line"></span><br><span class="line">point3 = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;720px&#x27;</span>,height=<span class="string">&#x27;320px&#x27;</span>))  <span class="comment">#定义画布大小</span></span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>,data_pair = [(j,i) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(num,lab)])</span><br><span class="line">    <span class="comment">#标签在前数据在后</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">point3.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914194036.png"></p><p><strong>示例2：利用绘制折线图中的数据，绘制商家B销售数据的饼图。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie=(Pie()</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data.columns.tolist(),data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())])</span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家B销售情况饼图&#x27;</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>)) <span class="comment"># 设置数据标签</span></span><br><span class="line">)</span><br><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920204308841.png" alt="image-20220920204308841"></p><p>示例3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line">Faker.drinks</span><br><span class="line">Faker.values()</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line">c = Pie()</span><br><span class="line">c.add(series_name=<span class="string">&#x27;&#x27;</span>,data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span>  z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.drinks,Faker.values())])</span><br><span class="line">c.set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;: &#123;c&#125;&#x27;</span>)) <span class="comment"># 系列标签会显示为x：y x为drinks y为values</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs20220914224510.png"></p><h3 id="环图"><a href="#环图" class="headerlink" title="环图"></a>环图</h3><p>环形图（Circular Sector Graph）与饼图类似，但又有区别。环形图中间有一个空洞，每个样本用一个环来表示，样本中的每一部分数据用环中的一段表示。可以通过add函数中增加radius参数设置绘制环形图。</p><p><strong>示例1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pie=(Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;810px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data.columns.tolist(),</span><br><span class="line">                                    data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())], radius=[<span class="number">40</span>,<span class="number">100</span>])<span class="comment">#中间空心的比例</span></span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家B销售情况环形图&#x27;</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920204436859.png" alt="image-20220920204436859"></p><p>由饼图可知，商家B的各类商品销量中风衣的数量占比最多，占到为20.46%，而袜子只占了6.91%。</p><p><strong>示例2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环图</span></span><br><span class="line">num = [<span class="number">110</span>, <span class="number">136</span>, <span class="number">108</span>, <span class="number">48</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">103</span>]</span><br><span class="line">lab = [<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;萨摩耶&#x27;</span>, <span class="string">&#x27;泰迪&#x27;</span>, <span class="string">&#x27;金毛&#x27;</span>, <span class="string">&#x27;牧羊犬&#x27;</span>, <span class="string">&#x27;吉娃娃&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>]</span><br><span class="line"></span><br><span class="line">point4 = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;720px&#x27;</span>,height=<span class="string">&#x27;320px&#x27;</span>))  <span class="comment">#定义画布大小</span></span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>,data_pair = [(j,i) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(num,lab)],radius=[<span class="string">&#x27;40%&#x27;</span>,<span class="string">&#x27;75%&#x27;</span>])</span><br><span class="line">    <span class="comment">#标签在前数据在后   radius = [&#x27;a&#x27;,&#x27;b&#x27;] 前面是内半径 后面是外半径 默认都是按照百分比 默认是width和height里较小的一半</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">point4.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914194117.png"></p><h3 id="环形玫瑰图"><a href="#环形玫瑰图" class="headerlink" title="环形玫瑰图"></a>环形玫瑰图</h3><p>玫瑰图（Rose Graph）又称为极面积图，使用圆弧的半径长短表示数据量。读者可以通过Pie类绘制玫瑰图，只需要在add函数中增加rosetype参数设置即可完成玫瑰图的绘制。</p><p><strong>示例1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pie=(Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;810px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data.columns.tolist(),</span><br><span class="line">                                    data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())], </span><br><span class="line">          rosetype=<span class="string">&#x27;radius&#x27;</span>, radius=[<span class="number">30</span>, <span class="number">100</span>]) <span class="comment"># 空心比例</span></span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家B销售情况玫瑰图&#x27;</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920204612350.png" alt="image-20220920204612350"></p><p><strong>示例2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">110</span>, <span class="number">136</span>, <span class="number">108</span>, <span class="number">48</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">103</span>]</span><br><span class="line">lab = [<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;萨摩耶&#x27;</span>, <span class="string">&#x27;泰迪&#x27;</span>, <span class="string">&#x27;金毛&#x27;</span>, <span class="string">&#x27;牧羊犬&#x27;</span>, <span class="string">&#x27;吉娃娃&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>]</span><br><span class="line"></span><br><span class="line">point6 = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;720px&#x27;</span>, height=<span class="string">&#x27;320px&#x27;</span>))</span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>, data_pair=[(i, j)<span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(lab, num)],</span><br><span class="line">         radius=[<span class="string">&quot;30%&quot;</span>, <span class="string">&quot;75%&quot;</span>],</span><br><span class="line">         center=[<span class="string">&quot;25%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">         rosetype=<span class="string">&quot;radius&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">point6.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs20220914194337.png"></p><h3 id="玫瑰图"><a href="#玫瑰图" class="headerlink" title="玫瑰图"></a>玫瑰图</h3><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#玫瑰图</span></span><br><span class="line">num = [<span class="number">110</span>, <span class="number">136</span>, <span class="number">108</span>, <span class="number">48</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">103</span>]</span><br><span class="line">lab = [<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;萨摩耶&#x27;</span>, <span class="string">&#x27;泰迪&#x27;</span>, <span class="string">&#x27;金毛&#x27;</span>, <span class="string">&#x27;牧羊犬&#x27;</span>, <span class="string">&#x27;吉娃娃&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>]</span><br><span class="line"></span><br><span class="line">point5 = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;720px&#x27;</span>,height=<span class="string">&#x27;320px&#x27;</span>))  <span class="comment">#定义画布大小</span></span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>,data_pair = [(j,i) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(num,lab)],rosetype=<span class="string">&#x27;radius&#x27;</span>)</span><br><span class="line">    <span class="comment">#标签在前数据在后   radius = [&#x27;a&#x27;,&#x27;b&#x27;] 前面是内半径 后面是外半径 默认都是按照百分比 默认是width和height里较小的一半</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">point5.render(path=<span class="string">&#x27;./images/five.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914194222.png"></p><h1 id="绘制交互式高级图形"><a href="#绘制交互式高级图形" class="headerlink" title="绘制交互式高级图形"></a>绘制交互式高级图形</h1><p><strong>导入相关库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Line</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Scatter</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Funnel</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> HeatMap</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Sankey</span><br></pre></td></tr></table></figure><h2 id="绘制层叠多图"><a href="#绘制层叠多图" class="headerlink" title="绘制层叠多图"></a>绘制层叠多图</h2><p>在同一个绘图区域，绘制不同类型的图表，即层叠多图，如同时绘制散点图和折线图、条形图和折线图等。在pyecharts库中，使用overlap()方法将多个图形叠加在一个视图区。</p><p>示例：</p><p>某省份1<del>12月份的降水量、蒸发量、平均温度部分数据如表所示。详见“1</del>12月份的降水量、蒸发量、平均温度数据.xlsx”</p><table><thead><tr><th><strong>月份</strong></th><th><strong>蒸发量</strong></th><th><strong>降水量</strong></th><th><strong>平均温度</strong></th></tr></thead><tbody><tr><td>1月</td><td>2</td><td>2.6</td><td>2</td></tr><tr><td>2月</td><td>4.9</td><td>5.9</td><td>2.2</td></tr><tr><td>3月</td><td>7</td><td>9</td><td>3.3</td></tr><tr><td>4月</td><td>23.2</td><td>26.4</td><td>4.5</td></tr><tr><td>5月</td><td>25.6</td><td>28.7</td><td>6.3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_excel(<span class="string">&#x27;./data/1~12月份的降水量、蒸发量、平均温度数据.xlsx&#x27;</span>)</span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(data[<span class="string">&#x27;月份&#x27;</span>].tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;蒸发量&#x27;</span>, data[<span class="string">&#x27;蒸发量&#x27;</span>].tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;降水量&#x27;</span>, data[<span class="string">&#x27;降水量&#x27;</span>].tolist())</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>)) <span class="comment"># 数据标签不展示</span></span><br><span class="line">    .set_global_opts(</span><br><span class="line">        xaxis_opts=opts.AxisOpts(name=<span class="string">&#x27;月份&#x27;</span>,name_location = <span class="string">&#x27;center&#x27;</span>,name_gap = <span class="number">25</span>), <span class="comment">#设置x轴</span></span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;叠加条形图和折线图&#x27;</span>),<span class="comment">#标题</span></span><br><span class="line">        yaxis_opts=opts.AxisOpts(</span><br><span class="line">            name=<span class="string">&#x27;蒸发量/降水量（mm）&#x27;</span>,name_location = <span class="string">&#x27;center&#x27;</span>, name_gap = <span class="number">50</span>,</span><br><span class="line">            axislabel_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;value&#125;&#x27;</span>)),<span class="comment"># y轴 </span></span><br><span class="line">    )</span><br><span class="line">    .extend_axis( <span class="comment"># 添加轴</span></span><br><span class="line">        yaxis=opts.AxisOpts( <span class="comment"># y轴</span></span><br><span class="line">            name=<span class="string">&#x27;平均温度（℃）&#x27;</span>,name_location = <span class="string">&#x27;center&#x27;</span>,name_gap = <span class="number">55</span>,</span><br><span class="line">            axislabel_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;value&#125;&#x27;</span>), interval=<span class="number">2.5</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">line = Line().add_xaxis(data[<span class="string">&#x27;月份&#x27;</span>].tolist()).add_yaxis(<span class="string">&#x27;平均温度&#x27;</span>, </span><br><span class="line">                                                       data[<span class="string">&#x27;平均温度&#x27;</span>].tolist(), </span><br><span class="line">                                                       yaxis_index=<span class="number">1</span>)</span><br><span class="line">bar.overlap(line)</span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920205705979.png" alt="image-20220920205705979"></p><h2 id="绘制漏斗图"><a href="#绘制漏斗图" class="headerlink" title="绘制漏斗图"></a>绘制漏斗图</h2><p>在pyecharts库中，可使用Funnel类绘制漏斗图。Funnel类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Funnel</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, data_pair, is_selected=<span class="literal">True</span>, color=<span class="literal">None</span>, sort_=<span class="string">&#x27;descending&#x27;</span>, gap=<span class="number">0</span>, label_opts=opts.LabelOpts(), tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>data_pair</strong></td><td>接收Sequence，表示数据项，格式为[(key1,  value1), (key2, value2)]。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>color</strong></td><td>接收str，表示系列label颜色。默认为None</td></tr><tr><td align="center"><strong>sort_</strong></td><td>接收str，表示数据排序，可以取ascending、descending、None（按data顺序）。默认为descending</td></tr><tr><td align="center"><strong>gap</strong></td><td>接收numeric，表示数据图形间距。默认为0</td></tr><tr><td align="center"><strong>set_series_opts</strong>()</td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong>()</td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例1：</strong></p><p>下表是某淘宝店铺的订单转化率统计数据，根据数据绘制漏斗图。</p><table><thead><tr><th><strong>网购环节</strong></th><th><strong>人数</strong></th></tr></thead><tbody><tr><td>浏览商品</td><td>2000</td></tr><tr><td>加入购物车</td><td>900</td></tr><tr><td>生成订单</td><td>400</td></tr><tr><td>支付订单</td><td>320</td></tr><tr><td>完成交易</td><td>300</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_excel(<span class="string">&#x27;./data/某淘宝店铺的订单转化率统计数据.xlsx&#x27;</span>)</span><br><span class="line">x_data = data[<span class="string">&#x27;网购环节&#x27;</span>].tolist()</span><br><span class="line">y_data= data[<span class="string">&#x27;人数&#x27;</span>].tolist()</span><br><span class="line">data = [[x_data[i], y_data[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data))]</span><br><span class="line">funnel=(Funnel()</span><br><span class="line">    .add(<span class="string">&#x27;&#x27;</span>, data_pair=data,label_opts=opts. LabelOpts(</span><br><span class="line">        position=<span class="string">&#x27;inside&#x27;</span>, formatter=<span class="string">&quot;&#123;b&#125;:&#123;d&#125;%&quot;</span>), gap=<span class="number">2</span>,</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(trigger=<span class="string">&#x27;item&#x27;</span>),</span><br><span class="line">        itemstyle_opts=opts.ItemStyleOpts(border_color=<span class="string">&#x27;#fff&#x27;</span>, border_width=<span class="number">1</span>))</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;某淘宝店铺的订单转化率漏斗图&#x27;</span>),</span><br><span class="line">                     legend_opts=opts.LegendOpts(pos_left=<span class="string">&#x27;40%&#x27;</span>)))</span><br><span class="line">funnel.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920210259665.png" alt="image-20220920210259665"></p><p><strong>示例2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Funnel</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/funnel.json&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;data&#x27;: [&#123;&#x27;action&#x27;: &#x27;浏览商品&#x27;, &#x27;pv&#x27;: 50000&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;action&#x27;: &#x27;放入购物车&#x27;, &#x27;pv&#x27;: 35000&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;action&#x27;: &#x27;生成订单&#x27;, &#x27;pv&#x27;: 25000&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;action&#x27;: &#x27;支付订单&#x27;, &#x27;pv&#x27;: 15000&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;action&#x27;: &#x27;完成交易&#x27;, &#x27;pv&#x27;: 8000&#125;]&#125;</span></span><br><span class="line">data_ful = [(i[<span class="string">&#x27;action&#x27;</span>],i[<span class="string">&#x27;pv&#x27;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;data&#x27;</span>]]</span><br><span class="line"><span class="comment"># print(data_ful)</span></span><br><span class="line"><span class="comment"># [(&#x27;浏览商品&#x27;, 50000), (&#x27;放入购物车&#x27;, 35000), (&#x27;生成订单&#x27;, 25000), (&#x27;支付订单&#x27;, 15000), (&#x27;完成交易&#x27;, 8000)]</span></span><br><span class="line">c = Funnel()</span><br><span class="line">c.add(<span class="string">&#x27;人数&#x27;</span>,data_ful)</span><br><span class="line">c.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;Funnel 漏斗图&#x27;</span>))</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220914171936406.png" alt="image-20220914171936406"></p><h2 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h2><p>在pyecharts库中，可使用HeatMap类绘制热力图。HeatMap类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeatMap</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add_xaxis()</span><br><span class="line">.add_yaxis(series_name, yaxis_data, value, is_selected=<span class="literal">True</span>, xaxis_index=<span class="literal">None</span>, yaxis_index=<span class="literal">None</span>, label_opts=opts.LabelOpts(), markpoint_opts=<span class="literal">None</span>, markline_opts=<span class="literal">None</span>, tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add_xaxis</strong>()</td><td>表示添加x轴数据</td></tr><tr><td align="center"><strong>add_yaxis</strong>()</td><td>表示添加y轴数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>yaxis_data</strong></td><td>接收types.Sequence，表示y坐标轴数据项。无默认值</td></tr><tr><td align="center"><strong>value</strong></td><td>接收types.Sequence，表示系列数据项。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>xaxis_index</strong></td><td>接收numeric，表示使用的x轴的index，在单个图表实例中存在多个x轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>yaxis_index</strong></td><td>接收numeric，表示使用的y轴的index，在单个图表实例中存在多个y轴的时候有用。默认为None</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts()</strong></td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p>示例：</p><p>某网站某周一天24小时的点击量部分数据，详见数据文件（heatmap.xlsx），请根据数据绘制热力图。</p><table><thead><tr><th><strong>时间</strong></th><th><strong>星期一</strong></th><th><strong>星期二</strong></th><th><strong>星期三</strong></th><th><strong>星期四</strong></th><th><strong>星期五</strong></th><th><strong>星期六</strong></th><th><strong>星期日</strong></th></tr></thead><tbody><tr><td>1</td><td>3</td><td>63</td><td>3</td><td>50</td><td>78</td><td>74</td><td>92</td></tr><tr><td>2</td><td>43</td><td>40</td><td>5</td><td>39</td><td>9</td><td>32</td><td>46</td></tr><tr><td>3</td><td>57</td><td>55</td><td>71</td><td>39</td><td>26</td><td>3</td><td>48</td></tr><tr><td>4</td><td>43</td><td>73</td><td>86</td><td>37</td><td>36</td><td>96</td><td>52</td></tr><tr><td>5</td><td>99</td><td>58</td><td>80</td><td>97</td><td>30</td><td>53</td><td>37</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_excel(<span class="string">&#x27;./data/heatmap.xlsx&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">y_data = <span class="built_in">list</span>(data.columns)</span><br><span class="line">x_data = <span class="built_in">list</span>(data.index)</span><br><span class="line">values = data.iloc[: , :].values.tolist()</span><br><span class="line">value = [[i, j, values[i][j]]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y_data)) ]</span><br><span class="line">heatmap = (</span><br><span class="line">    HeatMap()</span><br><span class="line">    .add_xaxis(x_data)</span><br><span class="line">    .add_yaxis(</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        y_data,</span><br><span class="line">        value,</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>, position=<span class="string">&#x27;inside&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;网站点击量热力图&#x27;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(pos_bottom=<span class="string">&#x27;center&#x27;</span>), </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">heatmap.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920211358550.png" alt="image-20220920211358550"></p><h2 id="绘制词云图"><a href="#绘制词云图" class="headerlink" title="绘制词云图"></a>绘制词云图</h2><p>在pyecharts库中，可使用WordCloud类绘制词云图。WordCloud类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordCloud</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, data_pair, shape=<span class="string">&#x27;circle&#x27;</span>, mask_image=<span class="literal">None</span>, word_gap=<span class="number">20</span>, word_size_range=<span class="literal">None</span>, rotate_step=<span class="number">45</span>, pos_left=<span class="literal">None</span>, pos_top=<span class="literal">None</span>, pos_right=<span class="literal">None</span>, pos_bottom=<span class="literal">None</span>, width=<span class="literal">None</span>, height=<span class="literal">None</span>, is_draw_out_of_bound=<span class="literal">False</span>, tooltip_opts=<span class="literal">None</span>, textstyle_opts=<span class="literal">None</span>, emphasis_shadow_blur=<span class="literal">None</span>, emphasis_shadow_color=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>data_pair</strong></td><td>接收Sequence，表示系列数据项，形如[(word1,  count1), (word2, count2)]。无默认值</td></tr><tr><td align="center"><strong>shape</strong></td><td>接收str，表示词云图轮廓，可选circle、cardioid、diamond、triangle-forward、triangle、pentagon。默认是circle</td></tr><tr><td align="center"><strong>mask_image</strong></td><td>接收str，表示自定义的图片（目前支持jpg、jpeg、png、ico的格式）。默认为None</td></tr><tr><td align="center"><strong>word_gap</strong></td><td>接收numeric，表示单词间隔。默认为20</td></tr><tr><td align="center"><strong>word_size_range</strong></td><td>接收numeric序列，表示单词字体大小范围。默认为None</td></tr><tr><td align="center"><strong>rotate_step</strong></td><td>接收numeric，表示旋转单词角度。默认为45</td></tr></tbody></table><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>pos_left</strong></td><td>接收str，表示距离左侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_top</strong></td><td>接收str，表示距离顶部的距离。默认为None</td></tr><tr><td align="center"><strong>pos_right</strong></td><td>接收str，表示距离右侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_bottom</strong></td><td>接收str，表示距离底部的距离。默认为None</td></tr><tr><td align="center"><strong>width</strong></td><td>接收str，表示词云图的宽度。默认为None</td></tr><tr><td align="center"><strong>height</strong></td><td>接收str，表示词云图的高度。默认为None</td></tr><tr><td align="center"><strong>is_draw_out_of_bound</strong></td><td>接收bool，表示是否允许词云图的数据展示在画布范围之外。默认为False</td></tr><tr><td align="center"><strong>set_series_opts</strong>()</td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong>()</td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p>在绘制词云图前，需要统计各词的词频。例如，附件worldcloud.csv统计的部分宋词词频数据，绘制的词云图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data_read = pd.read_csv(<span class="string">&#x27;./data/worldcloud.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">words = <span class="built_in">list</span>(data_read[<span class="string">&#x27;词语&#x27;</span>].values)</span><br><span class="line">num = <span class="built_in">list</span>(data_read[<span class="string">&#x27;频数&#x27;</span>].values)</span><br><span class="line">data = [k <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">zip</span>(words, num)]</span><br><span class="line">data=[(i,<span class="built_in">str</span>(j)) <span class="keyword">for</span> i, j <span class="keyword">in</span> data]</span><br><span class="line">wordcloud = (WordCloud()</span><br><span class="line">           .add(series_name=<span class="string">&#x27;词统计&#x27;</span>, data_pair=data, word_size_range=[<span class="number">10</span>, <span class="number">100</span>])</span><br><span class="line">           .set_global_opts(title_opts=opts.TitleOpts(</span><br><span class="line">               title=<span class="string">&#x27;部分宋词词频词云图&#x27;</span>, title_textstyle_opts=</span><br><span class="line">               opts.TextStyleOpts(font_size=<span class="number">23</span>)),</span><br><span class="line">                            tooltip_opts=opts.TooltipOpts(is_show=<span class="literal">True</span>))</span><br><span class="line">      )</span><br><span class="line">wordcloud.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920212000272.png" alt="image-20220920212000272"></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span>  WordCloud</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/WordCloud.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">c = WordCloud()</span><br><span class="line">c.add(<span class="string">&#x27;&#x27;</span>,data[<span class="string">&#x27;words&#x27;</span>])</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914185435.png"/><h2 id="绘制关系图"><a href="#绘制关系图" class="headerlink" title="绘制关系图"></a>绘制关系图</h2><p>在pyecharts库中，可使用Graph类绘制关系图。Graph类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, nodes, links, categories=<span class="literal">None</span>, is_selected=<span class="literal">True</span>, is_focusnode=<span class="literal">True</span>, is_roam=<span class="literal">True</span>, is_draggable=<span class="literal">False</span>, is_rotate_label=<span class="literal">False</span>, layout=<span class="string">&#x27;force&#x27;</span>, symbol=<span class="literal">None</span>, symbol_size=<span class="number">10</span>, edge_length=<span class="number">50</span>, gravity=<span class="number">0.2</span>, repulsion=<span class="number">50</span>, edge_label=<span class="literal">None</span>, edge_symbol=<span class="literal">None</span>, edge_symbol_size=<span class="number">10</span>, label_opts=opts.LabelOpts(), linestyle_opts=opts.LineStyleOpts(), tooltip_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>nodes</strong></td><td>接收Sequence，表示关系图节点数据项列表。无默认值</td></tr><tr><td align="center"><strong>links</strong></td><td>接收Sequence，表示关系图节点间关系数据项列表。无默认值</td></tr><tr><td align="center"><strong>categories</strong></td><td>接收Sequence，表示关系图节点分类的类目列表。默认为None</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>is_roam</strong></td><td>接收bool，表示是否开启鼠标缩放和平移漫游。默认值是True</td></tr><tr><td align="center"><strong>is_draggable</strong></td><td>接收bool，表示节点是否可拖拽，只在使用力引导布局的时候有用。默认为False</td></tr><tr><td align="center"><strong>is_rotate_label</strong></td><td>接收bool，表示是否旋转标签。默认值False</td></tr><tr><td align="center"><strong>layout</strong></td><td>接收str，表示图的布局，可选none、circular、force。None表示不采用任何布局，使用节点中提供的x、y作为节点的位置；circular表示采用环形布局；force表示采用力引导布局。默认为force</td></tr></tbody></table><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>symbol</strong></td><td>接收str，表示关系图节点标记的图形，提供的标记类型包括circle、rect、roundrect、triangle、diamond、pin、arrow、None。默认为None</td></tr><tr><td align="center"><strong>symbol_size</strong></td><td>接收types.numeric，表示关系图节点标记的大小，可以设置单一的数字，如10；也可以用数组分开表示宽和高，例如，[20,  10]表示标记宽为20，高为10。默认为10</td></tr><tr><td align="center"><strong>edge_length</strong></td><td>接收numeric，表示边的两个节点之间的距离。默认为50</td></tr><tr><td align="center"><strong>gravity</strong></td><td>接收numeric，表示节点受到的向中心的引力因子，该值越大节点越往中心点靠拢。默认为0.2</td></tr><tr><td align="center"><strong>repulsion</strong></td><td>接收numeric，表示节点之间的斥力因子。默认为50</td></tr><tr><td align="center"><strong>edge_label</strong></td><td>接收types.Label，表示Graph图节点边的Label配置（即在边上显示数据或标注的配置）。默认为None</td></tr><tr><td align="center"><strong>edge_symbol</strong></td><td>接收str，表示边两端的标记类型，可以是一个数组分别指定两端，也可以是单个统一指定。默认为None</td></tr><tr><td align="center"><strong>edge_symbol_size</strong></td><td>接收numeric，表示边两端的标记大小，可以是一个数组分别指定两端，也可以是单个统一指定。默认为10</td></tr><tr><td align="center"><strong>set_series_opts</strong>()</td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong>()</td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p><strong>示例1</strong></p><p>某公司销售部的部分员工微信好友关系数据如下表所示。</p><table><thead><tr><th><strong>目标人物</strong></th><th><strong>其它人物</strong></th><th><strong>关系</strong></th></tr></thead><tbody><tr><td>周建</td><td>[贺芳, 吴大, 张三,  刘霞]</td><td>[夫妻,同事,同学,同学]</td></tr><tr><td>黄婧</td><td>[张三, 刘霞]</td><td>[朋友,同事]</td></tr><tr><td>文华</td><td>[刘霞, 吴大]</td><td>[夫妻,同事]</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">nodes = [opts.GraphNode(name=<span class="string">&#x27;张三&#x27;</span>, symbol=<span class="string">&#x27;circle&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">         opts.GraphNode(name=<span class="string">&#x27;吴大&#x27;</span>, symbol=<span class="string">&#x27;pin&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">         opts.GraphNode(name=<span class="string">&#x27;贺芳&#x27;</span>, symbol=<span class="string">&#x27;pin&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">         opts.GraphNode(name=<span class="string">&#x27;刘霞&#x27;</span>, symbol=<span class="string">&#x27;circle&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">         opts.GraphNode(name=<span class="string">&#x27;黄婧&#x27;</span>, symbol=<span class="string">&#x27;circle&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">        opts.GraphNode(name=<span class="string">&#x27;周建&#x27;</span>, symbol=<span class="string">&#x27;circle&#x27;</span>, symbol_size=<span class="number">10</span>),</span><br><span class="line">         opts.GraphNode(name=<span class="string">&#x27;文华&#x27;</span>, symbol=<span class="string">&#x27;circle&#x27;</span>, symbol_size=<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 关系</span></span><br><span class="line">links = [opts.GraphLink(source=<span class="string">&#x27;周建&#x27;</span>, target=<span class="string">&#x27;贺芳&#x27;</span>, value=<span class="string">&#x27;夫妻&#x27;</span>),</span><br><span class="line">         opts.GraphLink(source=<span class="string">&#x27;周建&#x27;</span>, target=<span class="string">&#x27;吴大&#x27;</span>, value=<span class="string">&#x27;同事&#x27;</span>),</span><br><span class="line">         opts.GraphLink(source=<span class="string">&#x27;周建&#x27;</span>, target=<span class="string">&#x27;张三&#x27;</span>, value=<span class="string">&#x27;同学&#x27;</span>),</span><br><span class="line">         opts.GraphLink(source=<span class="string">&#x27;黄婧&#x27;</span>, target=<span class="string">&#x27;张三&#x27;</span>, value=<span class="string">&#x27;朋友&#x27;</span>),</span><br><span class="line">           opts.GraphLink(source=<span class="string">&#x27;黄婧&#x27;</span>, target=<span class="string">&#x27;刘霞&#x27;</span>, value=<span class="string">&#x27;同事&#x27;</span>),</span><br><span class="line">         opts.GraphLink(source=<span class="string">&#x27;文华&#x27;</span>, target=<span class="string">&#x27;刘霞&#x27;</span>, value=<span class="string">&#x27;夫妻&#x27;</span>),</span><br><span class="line">         opts.GraphLink(source=<span class="string">&#x27;文华&#x27;</span>, target=<span class="string">&#x27;吴大&#x27;</span>, value=<span class="string">&#x27;同事&#x27;</span>),</span><br><span class="line">          opts.GraphLink(source=<span class="string">&#x27;周建&#x27;</span>, target=<span class="string">&#x27;刘霞&#x27;</span>, value=<span class="string">&#x27;同学&#x27;</span>)</span><br><span class="line">        ]</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">graph =(Graph()</span><br><span class="line">        .add(series_name=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">             nodes=nodes,</span><br><span class="line">             is_roam=<span class="literal">False</span>,</span><br><span class="line">             is_rotate_label=<span class="literal">True</span>,</span><br><span class="line">             links=links, repulsion=<span class="number">4000</span>, edge_label=opts.LabelOpts(</span><br><span class="line">                 is_show=<span class="literal">True</span>, position=<span class="string">&#x27;middle&#x27;</span>, formatter=<span class="string">&#x27;&#123;c&#125;&#x27;</span>))</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;微信好友关系图&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">graph.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920212229568.png" alt="image-20220920212229568"></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/Graph.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;nodes&#x27;:</span></span><br><span class="line"><span class="comment">#      [&#123;&#x27;name&#x27;: &#x27;结点1&#x27;, &#x27;symbolSize&#x27;: 10, &#x27;value&#x27;: 10&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点2&#x27;, &#x27;symbolSize&#x27;: 20, &#x27;value&#x27;: 20&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点3&#x27;, &#x27;symbolSize&#x27;: 30, &#x27;value&#x27;: 30&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点4&#x27;, &#x27;symbolSize&#x27;: 40, &#x27;value&#x27;: 40&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点5&#x27;, &#x27;symbolSize&#x27;: 50, &#x27;value&#x27;: 50&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点6&#x27;, &#x27;symbolSize&#x27;: 40, &#x27;value&#x27;: 40&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点7&#x27;, &#x27;symbolSize&#x27;: 30, &#x27;value&#x27;: 30&#125;,</span></span><br><span class="line"><span class="comment">#       &#123;&#x27;name&#x27;: &#x27;结点8&#x27;, &#x27;symbolSize&#x27;: 20, &#x27;value&#x27;: 20&#125;]</span></span><br><span class="line"><span class="comment">#  &#125;</span></span><br><span class="line">nodes = data[<span class="string">&#x27;nodes&#x27;</span>]</span><br><span class="line">links = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nodes:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> nodes:</span><br><span class="line">        links.append(&#123;<span class="string">&#x27;source&#x27;</span>:i.get(<span class="string">&#x27;name&#x27;</span>),<span class="string">&#x27;target&#x27;</span>:j.get(<span class="string">&#x27;name&#x27;</span>)&#125;)</span><br><span class="line"><span class="comment"># 每个结点都相互有关系</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Graph</span><br><span class="line">c = Graph()</span><br><span class="line">c.add(series_name=<span class="string">&#x27;&#x27;</span>,nodes= nodes,links=links,repulsion=<span class="number">8000</span>)</span><br><span class="line">c.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;Graph图例&#x27;</span>)) <span class="comment">#添加标题</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914172750.png"/><h2 id="绘制桑葚图"><a href="#绘制桑葚图" class="headerlink" title="绘制桑葚图"></a>绘制桑葚图</h2><p>在pyecharts库中，可使用Sankey类绘制桑基图。Sankey类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sankey</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(series_name, nodes, links, is_selected=<span class="literal">True</span>, pos_left=<span class="string">&#x27;5%&#x27;</span>, pos_top=<span class="string">&#x27;5%&#x27;</span>, pos_right=<span class="string">&#x27;20%&#x27;</span>, pos_bottom=<span class="string">&#x27;5%&#x27;</span>, node_width=<span class="number">20</span>, node_gap=<span class="number">8</span>, node_align=<span class="string">&#x27;justify&#x27;</span>, orient=<span class="string">&#x27;horizontal&#x27;</span>, is_draggable=<span class="literal">True</span>, layout_iterations=<span class="number">32</span>, focus_node_adjacency=<span class="literal">False</span>, levels=<span class="literal">None</span>, label_opts=opts.LabelOpts(), linestyle_opt=opts.LineStyleOpts(), tooltip_opts=<span class="literal">None</span>)</span><br><span class="line">.set_series_opts()</span><br><span class="line">.set_global_opts()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加数据</td></tr><tr><td align="center"><strong>series_name</strong></td><td>接收str，表示系列名称，用于tooltip的显示，legend的图例筛选。无默认值</td></tr><tr><td align="center"><strong>nodes</strong></td><td>接收Sequence，表示节点数据项列表。无默认值</td></tr><tr><td align="center"><strong>links</strong></td><td>接收Sequence，表示节点间关系数据项列表。无默认值</td></tr><tr><td align="center"><strong>is_selected</strong></td><td>接收bool，表示是否选中图例。默认为True</td></tr><tr><td align="center"><strong>pos_left</strong></td><td>接收str、types.numeric，表示Sankey组件离容器左侧的距离。默认为5%</td></tr><tr><td align="center"><strong>pos_top</strong></td><td>接收str、types.numeric，表示Sankey组件离容器上侧的距离。默认为5%</td></tr><tr><td align="center"><strong>pos_right</strong></td><td>接收str、types.numeric，表示Sankey组件离容器右侧的距离。默认为20%</td></tr><tr><td align="center"><strong>pos_bottom</strong></td><td>接收str、types.numeric，表示Sankey组件离容器下侧的距离。默认为5%</td></tr><tr><td align="center"><strong>node_width</strong></td><td>接收numeric，表示桑基图中每个矩形节点的宽度。默认为20</td></tr></tbody></table><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>node_gap</strong></td><td>接收numeric，表示桑基图中每一列任意两个矩形节点之间的间隔。默认为8</td></tr><tr><td align="center"><strong>node_align</strong></td><td>接收str，表示桑基图中节点的对齐方式，可选justify、left、right。justify表示节点双端对齐，left表示节点左对齐，right表示节点右对齐。默认为justify</td></tr><tr><td align="center"><strong>orient</strong></td><td>接收str，表示桑基图中节点的布局方向，可选horizontal、vertical。horizontal表示水平的从左往右，vertical表示垂直的从上往下。默认为horizontal</td></tr><tr><td align="center"><strong>is_draggable</strong></td><td>接收bool，表示当控制节点拖拽的交互开启后，用户可以将图中任意节点拖拽到任意位置。默认为True</td></tr><tr><td align="center"><strong>set_series_opts()</strong></td><td>表示设置系列配置项，参考5.1.2小节</td></tr><tr><td align="center"><strong>set_global_opts</strong><strong>()</strong></td><td>表示设置全局配置项，参考5.1.3小节</td></tr></tbody></table><p>示例1：</p><p>附件sanky.csv是某家庭一个月的生活开支明细数据，绘制桑基图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;./data/sanky.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, header=<span class="literal">None</span>, sep=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="comment"># 生成节nodes</span></span><br><span class="line">Nodes = []</span><br><span class="line">Nodes.append(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;总支出&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0</span>].unique():</span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;name&#x27;</span>]=i</span><br><span class="line">    Nodes.append(dic)</span><br><span class="line"><span class="comment"># 生成links</span></span><br><span class="line">Links = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data.values:</span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;source&#x27;</span>]=i[<span class="number">0</span>]</span><br><span class="line">    dic[<span class="string">&#x27;target&#x27;</span>]=i[<span class="number">1</span>]</span><br><span class="line">    dic[<span class="string">&#x27;value&#x27;</span>]=i[<span class="number">2</span>]</span><br><span class="line">    Links.append(dic)</span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">sankey = (</span><br><span class="line">        Sankey()</span><br><span class="line">        .add(<span class="string">&#x27;&#x27;</span>, Nodes, Links, pos_left=<span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            linestyle_opt=opts.LineStyleOpts(</span><br><span class="line">                opacity=<span class="number">0.2</span>, curve=<span class="number">0.5</span>, color=<span class="string">&#x27;source&#x27;</span>, type_=<span class="string">&#x27;dotted&#x27;</span>),</span><br><span class="line">            label_opts=opts.LabelOpts(position=<span class="string">&#x27;right&#x27;</span>, ),</span><br><span class="line">        )</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;生活开支桑基图&#x27;</span>))</span><br><span class="line">    )</span><br><span class="line">sankey.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920212613378.png" alt="image-20220920212613378"></p><p><strong>示例2：使用桑基图展现不同种类的迁移</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/sankey.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Sankey</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Sankey(init_opts=opts.InitOpts(width=<span class="string">&#x27;1200px&#x27;</span>,height=<span class="string">&#x27;800px&#x27;</span>)) <span class="comment">#初始化图表</span></span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;sankey&quot;</span>,</span><br><span class="line">        data[<span class="string">&#x27;nodes&#x27;</span>],</span><br><span class="line">        data[<span class="string">&#x27;links&#x27;</span>],</span><br><span class="line">        linestyle_opt=opts.LineStyleOpts(opacity=<span class="number">0.2</span>, curve=<span class="number">0.2</span>, color=<span class="string">&quot;source&quot;</span>),</span><br><span class="line">        <span class="comment"># 设置流向线条不透明度 曲率 和颜色</span></span><br><span class="line">        label_opts=opts.LabelOpts(position=<span class="string">&quot;right&quot;</span>),</span><br><span class="line">        <span class="comment"># 设置标注位置</span></span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Sankey-基本示例&quot;</span>))</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914183716.png"/><h1 id="绘制组合图形"><a href="#绘制组合图形" class="headerlink" title="绘制组合图形"></a>绘制组合图形</h1><p><strong>导入相关库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码5-20</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Pie, Grid</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Page</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline</span><br></pre></td></tr></table></figure><h2 id="绘制并行多图"><a href="#绘制并行多图" class="headerlink" title="绘制并行多图"></a>绘制并行多图</h2><p>为了进行不同数据的比较，有时需要在同一个视图区域同时绘制不同的图形，即并行多图。在pyecharts库中，可使用Grid类绘制并行多图。Grid类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">Grid</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(chart, grid_opts, grid_index=<span class="number">0</span>, is_control_axis_index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>init_opts</strong>&#x3D;opts.InitOpts()</td><td>表示设置初始配置项，参考5.1.1小节</td></tr><tr><td align="center"><strong>add()</strong></td><td>表示添加图形信息</td></tr><tr><td align="center"><strong>chart</strong></td><td>接收char对象，表示图表实例，仅Chart类或其子类。无默认值</td></tr><tr><td align="center"><strong>grid_opts</strong></td><td>接收options.GridOpts、dict，表示直角坐标系网格配置项。无默认值</td></tr><tr><td align="center"><strong>grid_index</strong></td><td>接收int，表示直角坐标系网格索引。默认为0</td></tr><tr><td align="center"><strong>is_control_axis_index</strong></td><td>接收bool，表示是否由自己控制Axis索引。默认为False</td></tr></tbody></table><p>Chart参数主要用于显示的图形对象。</p><p>为了显示正确，需要配置直角坐标系网格配置项。在pyecharts库中，可使用GridOpts类配置直角坐标系网格配置项。GridOpts类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyecharts.options.GridOpts(is_show=<span class="literal">False</span>, z_level=<span class="number">0</span>，z=<span class="number">2</span>，pos_left=<span class="literal">None</span>, pos_top=<span class="literal">None</span>, pos_right=<span class="literal">None</span>, pos_bottom=<span class="literal">None</span>, width=<span class="literal">None</span>, height=<span class="literal">None</span>, is_contain_label=<span class="literal">False</span>, background_color=<span class="string">&#x27;transparent&#x27;</span>, border_color=<span class="string">&#x27;#ccc&#x27;</span>, border_width=<span class="number">1</span>, tooltip_opts=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>is_show</strong></td><td align="center">接收bool，表示是否显示直角坐标系网格。默认为False</td></tr><tr><td align="center"><strong>pos_left</strong></td><td align="center">接收str、numeric，表示grid组件离容器左侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_top</strong></td><td align="center">接收str、numeric，表示grid组件离容器上侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_right</strong></td><td align="center">接收str、numeric，表示grid组件离容器右侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_bottom</strong></td><td align="center">接收str、numeric，表示grid组件离容器下侧的距离。默认为None</td></tr><tr><td align="center"><strong>width</strong></td><td align="center">接收str、numeric，表示grid组件的宽度。默认None</td></tr><tr><td align="center"><strong>height</strong></td><td align="center">接收str、numeric，表示grid组件的高度。默认None</td></tr><tr><td align="center"><strong>is_contain_label</strong></td><td align="center">接收bool，表示grid区域是否包含坐标轴的刻度标签。默认是False</td></tr><tr><td align="center"><strong>background_color</strong></td><td align="center">接收str，表示网格背景色。默认为transparent</td></tr><tr><td align="center"><strong>border_color</strong></td><td align="center">接收str，表示网格的边框颜色。默认为#ccc</td></tr><tr><td align="center"><strong>border_width</strong></td><td align="center">接收numeric，表示网格的边框线宽。默认为1</td></tr></tbody></table><p>通常并行多图有左右布局和上下布局两种方式。基于的商家A的销售数据，采取左右布局的方式，绘制条形图和饼图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_excel(<span class="string">&#x27;./data/商家A和商家B的各类商品的销售数据.xlsx&#x27;</span>, </span><br><span class="line">                   index_col=<span class="string">&#x27;商家&#x27;</span>)</span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(data.columns.tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商品A销售情况柱形图&#x27;</span>), </span><br><span class="line">                     legend_opts=opts.LegendOpts(pos_left=<span class="string">&#x27;30%&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">pie = (Pie()</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data.columns.tolist(), data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())], </span><br><span class="line">          radius=[<span class="number">20</span>,<span class="number">100</span>], center=[<span class="number">700</span>, <span class="number">300</span>])</span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(</span><br><span class="line">         title=<span class="string">&#x27;商品A销售情况饼图&#x27;</span>, pos_left=<span class="string">&#x27;60%&#x27;</span>), </span><br><span class="line">                      legend_opts=opts.LegendOpts(orient=<span class="string">&#x27;vertical&#x27;</span>, pos_right=<span class="number">0</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">grid=(Grid(init_opts=opts.InitOpts(width=<span class="string">&#x27;950px&#x27;</span>, height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">      .add(bar, grid_opts=opts.GridOpts(pos_right=<span class="string">&#x27;50%&#x27;</span>))</span><br><span class="line">      .add(pie, grid_opts=opts.GridOpts(pos_left=<span class="string">&#x27;70%&#x27;</span>))</span><br><span class="line">   )</span><br><span class="line">grid.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920213203924.png" alt="image-20220920213203924"></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">110</span>, <span class="number">136</span>, <span class="number">108</span>, <span class="number">48</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">103</span>]</span><br><span class="line">num2 = [<span class="number">90</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">120</span>, <span class="number">99</span>]</span><br><span class="line">lab = [<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;萨摩耶&#x27;</span>, <span class="string">&#x27;泰迪&#x27;</span>, <span class="string">&#x27;金毛&#x27;</span>, <span class="string">&#x27;牧羊犬&#x27;</span>, <span class="string">&#x27;吉娃娃&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>]</span><br><span class="line"></span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(xaxis_data=lab)</span><br><span class="line">    .add_yaxis(series_name=<span class="string">&#x27;商家A&#x27;</span>,y_axis=num,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    .add_yaxis(series_name=<span class="string">&#x27;商家B&#x27;</span>,y_axis=num2,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line = (</span><br><span class="line">    Line()</span><br><span class="line">        .add_xaxis(xaxis_data=lab)</span><br><span class="line">        .add_yaxis(series_name=<span class="string">&#x27;商家A&#x27;</span>, y_axis=num)</span><br><span class="line">        .add_yaxis(series_name=<span class="string">&#x27;商家B&#x27;</span>, y_axis=num2)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bar.overlap(line)</span><br><span class="line">bar.rendernotebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs20220914194628.png"></p><h2 id="绘制顺序多图"><a href="#绘制顺序多图" class="headerlink" title="绘制顺序多图"></a>绘制顺序多图</h2><p>如果对相关数据源，根据不同的目的进行了不同的数据可视化，进一步将所有图片集中到一个页面就显得非常完善，这样即可对不同的情况进行同时交互展示。在pyecharts库中，可使用Page类绘制顺序多图。Page类的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span>(page_title=<span class="string">&#x27;Awesome-pyecharts&#x27;</span>, js_host=<span class="string">&#x27;&#x27;</span>，interval=<span class="number">1</span>, layout=PageLayoutOpts())</span><br><span class="line">.add(* charts)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>page_title</strong></td><td align="center">接收str，表示HTML标题。默认为Awesome-pyecharts</td></tr><tr><td align="center"><strong>interval</strong></td><td align="center">接收int，表示每个图例之间的间隔。默认为1</td></tr><tr><td align="center"><strong>layout</strong></td><td align="center">接收PageLayoutOpts，表示布局配置项。</td></tr><tr><td align="center"><strong>charts</strong></td><td align="center">接收charts对象，表示任意图表实例。无默认值</td></tr></tbody></table><p>PageLayoutOpts用于配置原生CSS样式。pyecharts内置了DraggablePageLayout布局，可以通过拖放的方式设置布局，同时提供了save_resize_html()方法用于保存通过拖拉设置布局的页面。save_resize_html()方法的基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page.save_resize_html(source=<span class="string">&#x27;render.html&#x27;</span>, cfg_file=<span class="literal">None</span>, cfg_dict=<span class="literal">None</span>, dest=<span class="string">&#x27;resize_render.html&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>source</strong></td><td align="center">接收str，表示Page第一次渲染后的html文件。默认为render.html</td></tr><tr><td align="center"><strong>cfg_file</strong></td><td align="center">接收str，表示布局配置文件的路径。无默认值</td></tr><tr><td align="center"><strong>dest</strong></td><td align="center">接收str，表示重新生成的.html文件的存放路径以及文件名。默认为resize_render.html</td></tr></tbody></table><p>示例：</p><p>利用商家A和商家B的销售数据绘制柱形图、玫瑰图、环形图，并通过Page类实现顺序多图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bar = (</span><br><span class="line">   Bar(init_opts=opts.InitOpts(</span><br><span class="line">       width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;310px&#x27;</span>, theme=ThemeType.LIGHT))</span><br><span class="line">    .add_xaxis(data.columns.tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;商家A&#x27;</span>, data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())</span><br><span class="line">    .add_yaxis(<span class="string">&#x27;商家B&#x27;</span>, data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(</span><br><span class="line">        title=<span class="string">&#x27;商家A和商家B销售情况柱形图&#x27;</span>)))</span><br><span class="line">pie1 = (Pie(init_opts=opts.InitOpts(</span><br><span class="line">       width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;310px&#x27;</span>))</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">         data.columns.tolist(), data.loc[<span class="string">&#x27;商家A&#x27;</span>].tolist())], radius=[<span class="number">20</span>,<span class="number">100</span>])</span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家A销售情况环形图&#x27;</span>), </span><br><span class="line">                      legend_opts=opts.LegendOpts(orient=<span class="string">&#x27;vertical&#x27;</span>, </span><br><span class="line">                                                  pos_left=<span class="number">0</span>, </span><br><span class="line">                                                  pos_bottom=<span class="string">&#x27;40%&#x27;</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>)))  </span><br><span class="line">pie2 = (Pie(init_opts=opts.InitOpts(</span><br><span class="line">       width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;310px&#x27;</span>))</span><br><span class="line">     .add(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data.columns.tolist(), data.loc[<span class="string">&#x27;商家B&#x27;</span>].tolist())], </span><br><span class="line">          rosetype=<span class="string">&#x27;radius&#x27;</span>, radius=[<span class="number">20</span>, <span class="number">100</span>])</span><br><span class="line">     .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;商家B销售情况玫瑰图&#x27;</span>), </span><br><span class="line">                      legend_opts=opts.LegendOpts(orient=<span class="string">&#x27;vertical&#x27;</span>, </span><br><span class="line">                                                  pos_right=<span class="number">0</span>, </span><br><span class="line">                                                  pos_bottom=<span class="string">&#x27;40%&#x27;</span>))</span><br><span class="line">     .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&#x27;</span>)))  </span><br><span class="line">page = (Page(page_title=<span class="string">&#x27;Page绘制顺序多图&#x27;</span>, interval=<span class="number">2</span>, </span><br><span class="line">           layout=Page.DraggablePageLayout).add(bar, pie1, pie2))</span><br><span class="line">page.render()  <span class="comment"># 绘图结果将保存到E:/work/book/chapter 5/render.html，点开文件将看到</span></span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920213642516.png" alt="image-20220920213642516"></p><p>在图形的的左上角存在Save_config按钮，此时可以通过拖放的方式调整页面显示效果，当拖放完成后，单击Save_config按钮，将会下载一个名为“chart_config.json”的配置文件，即可保存设置的布局。</p><p><strong>示例：绘制混合图（左右多图、上下多图）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">lines = (</span><br><span class="line">    Line()</span><br><span class="line">    .add_xaxis(xaxis_data = x)</span><br><span class="line">    .add_yaxis(series_name=<span class="string">&#x27;sin&#x27;</span>,y_axis=y,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">scatters = (</span><br><span class="line">    Scatter()</span><br><span class="line">    .add_xaxis(xaxis_data = x)</span><br><span class="line">    .add_yaxis(series_name=<span class="string">&#x27;sin&#x27;</span>,y_axis=y,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">grids = (</span><br><span class="line">    Grid()</span><br><span class="line">    .add(scatters,grid_opts=opts.GridOpts(pos_bottom=<span class="string">&#x27;60%&#x27;</span>))  <span class="comment">#grid_opts 在画布的哪一个位置</span></span><br><span class="line">    .add(lines,grid_opts=opts.GridOpts(pos_top=<span class="string">&#x27;60%&#x27;</span>))  <span class="comment">#上下显示 pos_bottom = &#x27;&#x27; pos_top = &#x27;</span></span><br><span class="line">)  <span class="comment">#左右显示 pos_left = &#x27;&#x27;  pos_right = &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">grids.render(path=<span class="string">&#x27;./images/eight.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914194529.png"></p><h2 id="绘制时间线轮播多图"><a href="#绘制时间线轮播多图" class="headerlink" title="绘制时间线轮播多图"></a>绘制时间线轮播多图</h2><ul><li>当需要展示不同时间段、不同类别的数据时，如果同时在一个视图区域显示多个图形，将会显得较拥挤；</li><li>如果在同一个页面显示多个图形，将会显得冗余。</li><li>此时，可使用滚动重复的播放方式，展示所有需要显示的图形，即使用时间线轮播多图展示数据。</li></ul><p>在pyecharts库中，可使用Timeline类绘制时间线轮播多图。Timeline类得基本使用格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timeline</span>(init_opts=opts.InitOpts())</span><br><span class="line">.add(chart, time_point)</span><br><span class="line">.add_schema(axis_type=<span class="string">&#x27;category&#x27;</span>, orient=<span class="string">&#x27;horizontal&#x27;</span>, symbol=<span class="literal">None</span>, symbol_size=<span class="literal">None</span>, play_interval=<span class="literal">None</span>, control_position=<span class="string">&#x27;left&#x27;</span>, is_auto_play=<span class="literal">False</span>, is_loop_play=<span class="literal">True</span>, is_rewind_play=<span class="literal">False</span>, is_timeline_show=<span class="literal">True</span>, is_inverse=<span class="literal">False</span>, pos_left=<span class="literal">None</span>, pos_right=<span class="literal">None</span>, pos_top=<span class="literal">None</span>, pos_bottom=<span class="string">&#x27;-5px&#x27;</span>, width=<span class="literal">None</span>, height=<span class="literal">None</span>, linestyle_opts=<span class="literal">None</span>, label_opts=<span class="literal">None</span>, itemstyle_opts=<span class="literal">None</span>, graphic_opts=<span class="literal">None</span>, checkpointstyle_opts=<span class="literal">None</span>, controlstyle_opts=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>is_auto_play</strong></td><td align="left">接收bool，表示是否自动播放。默认为False</td></tr><tr><td align="center"><strong>is_loop_play</strong></td><td align="left">接收bool，表示是否循环播放。默认为True</td></tr><tr><td align="center"><strong>is_rewind_play</strong></td><td align="left">接收bool，表示是否反向播放。默认为False</td></tr><tr><td align="center"><strong>is_timeline_show</strong></td><td align="left">接收bool，表示是否显示timeline组件，如果设置为False，不会显示，但是功能还存在。默认为True</td></tr><tr><td align="center"><strong>is_inverse</strong></td><td align="left">接收bool，表示是否反向放置timeline，反向则首尾颠倒过来。默认为False</td></tr><tr><td align="center"><strong>pos_left</strong></td><td align="left">接收str，表示Timeline组件离容器左侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_right</strong></td><td align="left">接收str，表示Timeline组件离容器右侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_top</strong></td><td align="left">接收str，表示Timeline组件离容器上侧的距离。默认为None</td></tr><tr><td align="center"><strong>pos_bottom</strong></td><td align="left">接收str，表示Timeline组件离容器下侧的距离。默认为None</td></tr><tr><td align="center"><strong>width</strong></td><td align="left">接收str，表示时间轴区域的宽度。默认为None</td></tr><tr><td align="center"><strong>height</strong></td><td align="left">接收str，表示时间轴区域的高度。默认为None</td></tr></tbody></table><p>示例：</p><p>手机店A和手机店B在2019年部分的销售数据，如下表所示，具体见数据文件timeline.xlsx。</p><table><thead><tr><th><strong>月份</strong></th><th><strong>三星</strong></th><th><strong>OPPO</strong></th><th><strong>苹果</strong></th><th><strong>华为</strong></th><th><strong>小米</strong></th><th><strong>中兴</strong></th><th><strong>VIVO</strong></th><th><strong>魅族</strong></th></tr></thead><tbody><tr><td>2019年1月</td><td>531</td><td>423</td><td>409</td><td>527</td><td>209</td><td>587</td><td>573</td><td>508</td></tr><tr><td>2019年2月</td><td>451</td><td>479</td><td>298</td><td>480</td><td>214</td><td>585</td><td>575</td><td>412</td></tr><tr><td>2019年3月</td><td>366</td><td>536</td><td>539</td><td>425</td><td>600</td><td>353</td><td>448</td><td>178</td></tr><tr><td>2019年4月</td><td>548</td><td>361</td><td>520</td><td>538</td><td>571</td><td>142</td><td>237</td><td>299</td></tr><tr><td>2019年5月</td><td>478</td><td>428</td><td>290</td><td>582</td><td>570</td><td>233</td><td>478</td><td>475</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data_A = pd.read_excel(<span class="string">&#x27;./data/timeline.xlsx&#x27;</span>)</span><br><span class="line">data_B = pd.read_excel(<span class="string">&#x27;./data/timeline.xlsx&#x27;</span>, sheet_name=<span class="number">1</span>)</span><br><span class="line">x_data = data_A.columns.tolist()[<span class="number">1</span>: ]</span><br><span class="line">time = data_A[<span class="string">&#x27;月份&#x27;</span>].tolist()</span><br><span class="line">timeline = Timeline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(time)):</span><br><span class="line">    y_data_A = data_A.iloc[i, <span class="number">1</span>: <span class="number">9</span>].tolist()</span><br><span class="line">    y_data_A = [<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> y_data_A]</span><br><span class="line">    y_data_B = data_B.iloc[i, <span class="number">1</span>: <span class="number">9</span>].tolist()</span><br><span class="line">    y_data_B = [<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> y_data_B]</span><br><span class="line">    bar = (Bar()</span><br><span class="line">        .add_xaxis(x_data)</span><br><span class="line">        .add_yaxis(<span class="string">&#x27;手机店A&#x27;</span>, y_data_A)</span><br><span class="line">        .add_yaxis(<span class="string">&#x27;手机店B&#x27;</span>, y_data_B)</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(<span class="string">&#x27;手机店&#123;&#125;销售情况&#x27;</span>.<span class="built_in">format</span>(time[i])))</span><br><span class="line">        )</span><br><span class="line">    timeline.add(bar, time[i])</span><br><span class="line">timeline.add_schema(play_interval=<span class="number">1000</span>, is_auto_play=<span class="literal">True</span>, symbol=<span class="string">&#x27;pin&#x27;</span>)</span><br><span class="line">timeline.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgsimage-20220920214113050.png" alt="image-20220920214113050"></p><p>由时间线轮播多图可知，从2019年1月到2019年12月两家手机店的销售情况。在柱形图下方显示的是时间轴，通过设置播放间隔时间和自动播放，可以直观的观看随时间变化，两家手机店每个月的销售情况</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="3D柱状图"><a href="#3D柱状图" class="headerlink" title="3D柱状图"></a>3D柱状图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar3D</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">data = [(i, j, random.randint(0, 12)) for i in range(6) for j in range(24)]</span><br><span class="line"># print(data)</span><br><span class="line">c = Bar3D()</span><br><span class="line">c.add(&#x27; &#x27;,[[d[1],d[0],d[2]] for d in data])</span><br><span class="line"></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914191709.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Bar3D(init_opts=opts.InitOpts(width=<span class="string">&#x27;1200px&#x27;</span>,height=<span class="string">&#x27;900px&#x27;</span>))</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        [[d[<span class="number">1</span>], d[<span class="number">0</span>], d[<span class="number">2</span>]] <span class="keyword">for</span> d <span class="keyword">in</span> data],</span><br><span class="line">        xaxis3d_opts=opts.Axis3DOpts(Faker.clock, type_=<span class="string">&quot;category&quot;</span>),</span><br><span class="line">        yaxis3d_opts=opts.Axis3DOpts(Faker.week_en, type_=<span class="string">&quot;category&quot;</span>),</span><br><span class="line">        zaxis3d_opts=opts.Axis3DOpts(type_=<span class="string">&quot;value&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(max_=<span class="number">20</span>,is_piecewise=<span class="literal">True</span>),</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar3D-基本示例&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914191913.png"></p><h2 id="日历图"><a href="#日历图" class="headerlink" title="日历图"></a>日历图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Calendar</span><br><span class="line"></span><br><span class="line">begin = datetime.date(<span class="number">2017</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2017</span>,<span class="number">12</span>,<span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(begin+datetime.timedelta(2)) 1017-1-1 + 2 = 2017-1-3</span></span><br><span class="line">data = [</span><br><span class="line">    [<span class="built_in">str</span>(begin+datetime.timedelta(days = i)),random.randint(<span class="number">1000</span>,<span class="number">25000</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((end-begin).days+<span class="number">1</span>)</span><br><span class="line">] <span class="comment"># 列表生成表达式</span></span><br><span class="line">c = Calendar(init_opts=opts.InitOpts(width=<span class="string">&#x27;1200px&#x27;</span>,height=<span class="string">&#x27;250px&#x27;</span>))  <span class="comment">#图的大小设置</span></span><br><span class="line">c.add(<span class="string">&#x27;&#x27;</span>,data,calendar_opts=opts.CalendarOpts(range_=<span class="number">2017</span>)) <span class="comment">#添加数据 并且设置日历是2017年</span></span><br><span class="line">c.set_global_opts(title_opts = opts.TitleOpts(title=<span class="string">&#x27;日历图&#x27;</span>),  <span class="comment">#设置标题</span></span><br><span class="line">                 visualmap_opts = opts.VisualMapOpts( <span class="comment">#视觉映射配置项</span></span><br><span class="line">                 max_=<span class="number">25000</span>, <span class="comment"># 组件最大值</span></span><br><span class="line">                 min_=<span class="number">500</span>, <span class="comment"># 组件最小值</span></span><br><span class="line">                 orient=<span class="string">&#x27;horizontal&#x27;</span>, <span class="comment"># 组件放置方式</span></span><br><span class="line">                 is_piecewise=<span class="literal">True</span>, <span class="comment"># 组件是否分块</span></span><br><span class="line">                 pos_top=<span class="string">&#x27;230px&#x27;</span>, <span class="comment"># 组件离顶端230px</span></span><br><span class="line">                 pos_left=<span class="string">&#x27;100px&#x27;</span>)) <span class="comment"># 组件离左边100px</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914171449.png"/><p>仪表盘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仪表盘</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Gauge</span><br><span class="line">c = Gauge()</span><br><span class="line">c.add(series_name=<span class="string">&quot;&quot;</span>,data_pair=[(<span class="string">&quot;完成率&quot;</span>, <span class="number">66.6</span>)],</span><br><span class="line">      detail_label_opts=opts.GaugeDetailOpts(offset_center=[<span class="number">0</span>,<span class="string">&#x27;-20%&#x27;</span>],is_show = <span class="literal">False</span>))</span><br><span class="line">c.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Gauge-基本示例&quot;</span>))<span class="comment">#添加标题</span></span><br><span class="line"><span class="comment"># is_show = F/T 是否显示数据 off_Center=[x,y] 显示的数据距离表盘中心的距离</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914172829.png"/><h2 id="水球图"><a href="#水球图" class="headerlink" title="水球图"></a>水球图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#水球图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Liquid</span><br><span class="line">c = Liquid()</span><br><span class="line">c.add(<span class="string">&#x27;&#x27;</span>,[<span class="number">0.6</span>,<span class="number">0.7</span>],is_animation=<span class="literal">True</span>,<span class="comment">#是否显示动画</span></span><br><span class="line">      shape=<span class="string">&#x27;&#x27;</span>, <span class="comment">#水球外形</span></span><br><span class="line">      color=[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>])<span class="comment">#颜色 第一个数据：x 第二个数据：x ......</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914172810.png"/><h2 id="使用平行坐标系展示不同日期的PM值"><a href="#使用平行坐标系展示不同日期的PM值" class="headerlink" title="使用平行坐标系展示不同日期的PM值"></a>使用平行坐标系展示不同日期的PM值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/Parallel.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;Beijing&#x27;: [[1, 91, 45, 125, 0.82, 34],</span></span><br><span class="line"><span class="comment">#              [2, 65, 27, 78, 0.86, 45],</span></span><br><span class="line"><span class="comment">#              [3, 83, 60, 84, 1.09, 73],</span></span><br><span class="line"><span class="comment">#              [4, 109, 81, 121, 1.28, 68]],</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  &#x27;Shanghai&#x27;: [[1, 106, 77, 114, 1.07, 55],</span></span><br><span class="line"><span class="comment">#               [2, 109, 81, 121, 1.28, 68],</span></span><br><span class="line"><span class="comment">#               [3, 106, 77, 114, 1.07, 55]],</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  &#x27;Guangzhou&#x27;: [[1, 89, 65, 78, 0.86, 51, 26],</span></span><br><span class="line"><span class="comment">#                [2, 53, 33, 47, 0.64, 50, 17],</span></span><br><span class="line"><span class="comment">#                [3, 80, 55, 80, 1.01, 75, 24],</span></span><br><span class="line"><span class="comment">#                [4, 117, 81, 124, 1.03, 45]],</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  &#x27;else&#x27;: [&#123;&#x27;dim&#x27;: 0, &#x27;name&#x27;: &#x27;data&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#           &#123;&#x27;dim&#x27;: 1, &#x27;name&#x27;: &#x27;AQI&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#           &#123;&#x27;dim&#x27;: 2, &#x27;name&#x27;: &#x27;PM2.5&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#           &#123;&#x27;dim&#x27;: 3, &#x27;name&#x27;: &#x27;PM10&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#           &#123;&#x27;dim&#x27;: 4, &#x27;name&#x27;: &#x27;CO&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#           &#123;&#x27;dim&#x27;: 5, &#x27;name&#x27;: &#x27;NO2&#x27;&#125;]&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Page, Parallel</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Parallel()</span><br><span class="line">    .add_schema(data[<span class="string">&#x27;else&#x27;</span>])</span><br><span class="line">    .add(<span class="string">&quot;Beijing&quot;</span>, data[<span class="string">&quot;Beijing&quot;</span>])</span><br><span class="line">    .add(<span class="string">&quot;Shanghai&quot;</span>, data[<span class="string">&quot;Shanghai&quot;</span>])</span><br><span class="line">    .add(<span class="string">&quot;Guangzhou&quot;</span>, data[<span class="string">&quot;Guangzhou&quot;</span>])</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Parallel-基本示例&quot;</span>))</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914173143.png"/><h2 id="使用雷达图来展现客户价值分析的结果"><a href="#使用雷达图来展现客户价值分析的结果" class="headerlink" title="使用雷达图来展现客户价值分析的结果"></a>使用雷达图来展现客户价值分析的结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用雷达图来展现客户价值分析的结果</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Radar</span><br><span class="line">data = np.load(<span class="string">&#x27;./data/radar.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">price = [<span class="string">&#x27;价值一&#x27;</span>,<span class="string">&#x27;价值二&#x27;</span>,<span class="string">&#x27;价值三&#x27;</span>,<span class="string">&#x27;价值四&#x27;</span>,<span class="string">&#x27;价值五&#x27;</span>]</span><br><span class="line">c = (</span><br><span class="line">    Radar()</span><br><span class="line">    .add_schema(schema=[opts.RadarIndicatorItem(name=m, max_=n, min_=k) <span class="keyword">for</span> m, n, k <span class="keyword">in</span> <span class="built_in">zip</span>(price,</span><br><span class="line">                                                                                           data.<span class="built_in">max</span>(axis=<span class="number">0</span>),</span><br><span class="line">                                                                                           data.<span class="built_in">min</span>(axis=<span class="number">0</span>))])</span><br><span class="line">    <span class="comment"># 设置坐标轴</span></span><br><span class="line">    <span class="comment"># 即axis=1为横向，axis=0为纵向</span></span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Radar-基本示例&quot;</span>))</span><br><span class="line">)</span><br><span class="line">cols = [<span class="string">&#x27;#FF6EB4&#x27;</span>, <span class="string">&#x27;#FA8072&#x27;</span>, <span class="string">&#x27;#EECFA1&#x27;</span>, <span class="string">&#x27;#CDB5CD&#x27;</span>, <span class="string">&#x27;#B03060&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(cols):</span><br><span class="line">    c = (c.add(<span class="string">&#x27;客户群&#x27;</span>+<span class="built_in">str</span>(i), [[<span class="built_in">float</span>(y) <span class="keyword">for</span> y <span class="keyword">in</span> data[i]]],</span><br><span class="line">               areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.3</span>, color=j),  <span class="comment"># 区域填充样式配置项</span></span><br><span class="line">               label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>, formatter=&#123;<span class="string">&#x27;color&#x27;</span>:cols&#125;))  <span class="comment"># 标签配置项 （也就是价值取值）</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p>data为：</p><p>[[ 0.483 -0.799  2.483  2.424  0.308]<br> [ 1.16  -0.377 -0.087 -0.095 -0.158]<br> [-0.314  1.686 -0.574 -0.537 -0.171]<br> [-0.701 -0.415 -0.161 -0.165 -0.255]<br> [ 0.057 -0.006 -0.227 -0.23   2.191]]</p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914183439.png"/><h2 id="实现主题河流图"><a href="#实现主题河流图" class="headerlink" title="实现主题河流图"></a>实现主题河流图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现主题河流图</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/ThemeRiver.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> ThemeRiver</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    ThemeRiver()</span><br><span class="line">    .add(</span><br><span class="line">        data[<span class="string">&#x27;names&#x27;</span>],</span><br><span class="line">        data[<span class="string">&#x27;data&#x27;</span>],</span><br><span class="line">        singleaxis_opts=opts.SingleAxisOpts(type_=<span class="string">&quot;time&quot;</span>, pos_bottom=<span class="string">&quot;10%&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;ThemeRiver-基本示例&quot;</span>))</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914185446.png"/><h2 id="使用图展现不同类型的归属"><a href="#使用图展现不同类型的归属" class="headerlink" title="使用图展现不同类型的归属"></a>使用图展现不同类型的归属</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/Tree.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data[&#x27;data&#x27;])</span></span><br><span class="line"><span class="comment"># [&#123;&#x27;children&#x27;: [&#123;&#x27;name&#x27;: &#x27;豹子&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#                &#123;&#x27;children&#x27;: [&#123;&#x27;name&#x27;: &#x27;美短&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;英短&#x27;&#125;], &#x27;name&#x27;: &#x27;猫&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#                &#123;&#x27;children&#x27;: [&#123;&#x27;name&#x27;: &#x27;苏门答腊虎&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;华南虎&#x27;&#125;], &#x27;name&#x27;: &#x27;老虎&#x27;&#125;],</span></span><br><span class="line"><span class="comment">#   &#x27;name&#x27;: &#x27;猫科动物&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">c = Tree()</span><br><span class="line">c.add(<span class="string">&#x27;&#x27;</span>,data[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">c.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Tree-基本示例&quot;</span>))</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914185418.png"/><h2 id="使用矩形树图展现不同属性的归属"><a href="#使用矩形树图展现不同属性的归属" class="headerlink" title="使用矩形树图展现不同属性的归属"></a>使用矩形树图展现不同属性的归属</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用矩形树图展现不同属性的归属</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> TreeMap</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/TreeMap.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data[&#x27;data&#x27;])</span></span><br><span class="line"><span class="comment"># [&#123;&#x27;value&#x27;: 40, &#x27;name&#x27;: &#x27;我是A&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#  &#123;&#x27;value&#x27;: 180, &#x27;name&#x27;: &#x27;我是B&#x27;,</span></span><br><span class="line"><span class="comment">#   &#x27;children&#x27;: [&#123;&#x27;value&#x27;: 76, &#x27;name&#x27;: &#x27;我是B.children&#x27;,</span></span><br><span class="line"><span class="comment">#                 &#x27;children&#x27;: [&#123;&#x27;value&#x27;: 12, &#x27;name&#x27;: &#x27;我是B.children.a&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#                              &#123;&#x27;value&#x27;: 28, &#x27;name&#x27;: &#x27;我是B.children.b&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#                              &#123;&#x27;value&#x27;: 20, &#x27;name&#x27;: &#x27;我是B.children.c&#x27;&#125;,</span></span><br><span class="line"><span class="comment">#                              &#123;&#x27;value&#x27;: 16, &#x27;name&#x27;: &#x27;我是B.children.d&#x27;&#125;]&#125;]&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    TreeMap()</span><br><span class="line">    .add(<span class="string">&quot;演示数据&quot;</span>, data[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;TreeMap-基本示例&quot;</span>))</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914185404.png"/><h1 id="绘制地理图"><a href="#绘制地理图" class="headerlink" title="绘制地理图"></a>绘制地理图</h1><h2 id="地理散点图"><a href="#地理散点图" class="headerlink" title="地理散点图"></a>地理散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制地理散点图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line">data_map = [(i,j) <span class="keyword">for</span> i ,j <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.provinces,Faker.values())]</span><br><span class="line"><span class="built_in">print</span>(data_map)</span><br><span class="line">c = Geo()</span><br><span class="line">c.add_schema(maptype=<span class="string">&#x27;china&#x27;</span>)</span><br><span class="line">c.add(<span class="string">&#x27;&#x27;</span>,data_map)</span><br><span class="line">c.set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;中国地图&#x27;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(is_piecewise=<span class="literal">True</span>))</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914191036.png"></p><h2 id="地理特效散点图"><a href="#地理特效散点图" class="headerlink" title="地理特效散点图"></a>地理特效散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制地理特效散点图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ChartType</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="comment"># from example.commons import Faker</span></span><br><span class="line"><span class="built_in">print</span>(Faker.provinces)</span><br><span class="line"><span class="built_in">print</span>(Faker.values())</span><br><span class="line">(</span><br><span class="line">    Geo()</span><br><span class="line">    .add_schema(maptype=<span class="string">&#x27;china&#x27;</span>)</span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>, data_pair=[(i, j) <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.provinces, Faker.values())],</span><br><span class="line">        type_=ChartType.EFFECT_SCATTER)</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&#x27;中国地图(特效散点图)&#x27;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">            is_piecewise=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">).render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/capture_20220914190003004.bmp"></p><h2 id="地理迁徙图"><a href="#地理迁徙图" class="headerlink" title="地理迁徙图"></a>地理迁徙图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制地理迁徙图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ChartType, SymbolType</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line">city_num = [(<span class="string">&#x27;广州&#x27;</span>, <span class="number">105</span>), (<span class="string">&#x27;成都&#x27;</span>, <span class="number">70</span>), (<span class="string">&#x27;北京&#x27;</span>, <span class="number">99</span>), (<span class="string">&#x27;西安&#x27;</span>, <span class="number">80</span>)]</span><br><span class="line">start_end = [(<span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>), (<span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>), (<span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(</span><br><span class="line">    Geo()</span><br><span class="line">    .add_schema(maptype=<span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">                itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">&#x27;#323c48&#x27;</span>, border_color=<span class="string">&#x27;#111&#x27;</span>),)</span><br><span class="line">    .add(<span class="string">&#x27;&#x27;</span>, data_pair=city_num, color=<span class="string">&#x27;white&#x27;</span>,type_=ChartType.EFFECT_SCATTER)</span><br><span class="line">    .add(<span class="string">&#x27;&#x27;</span>, data_pair=start_end, type_=ChartType.LINES,<span class="comment"># 图标类型为线</span></span><br><span class="line">         effect_opts=opts.EffectOpts(symbol=SymbolType.ARROW,<span class="comment"># 设置流向表示为箭头</span></span><br><span class="line">                                     color=<span class="string">&#x27;blue&#x27;</span>, <span class="comment"># 拉屎呢箭头</span></span><br><span class="line">                                     symbol_size=<span class="number">8</span>),</span><br><span class="line">         label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>)) <span class="comment"># 箭头大小</span></span><br><span class="line">).render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914191724.png"></p><h2 id="地理热力图"><a href="#地理热力图" class="headerlink" title="地理热力图"></a>地理热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ChartType</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line">    Geo()</span><br><span class="line">    .add_schema(maptype=<span class="string">&#x27;广东&#x27;</span>)</span><br><span class="line">    .add(series_name=<span class="string">&#x27;&#x27;</span>, data_pair=[(i, j) <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.guangdong_city, Faker.values())],</span><br><span class="line">         type_=ChartType.HEATMAP)</span><br><span class="line">    .set_global_opts(visualmap_opts=opts.VisualMapOpts())</span><br><span class="line">).render_notebook()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914191745.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>matplolib学习笔记</title>
      <link href="/2022/09/14/matplolib%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/14/matplolib%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="折线图和散点图"><a href="#折线图和散点图" class="headerlink" title="折线图和散点图"></a>折线图和散点图</h1><p><strong>均在jupyter notebook上进行演示</strong></p><p>图片展示用plt.show()</p><p>图片保存用plt.savefig(“path”)</p><p>要保存图片完毕后才可以用show 不然保存的图片为空白</p><h2 id="随机数据作图"><a href="#随机数据作图" class="headerlink" title="随机数据作图"></a>随机数据作图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#折线图</span></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#没有子图的绘图</span></span><br><span class="line">plt.title(<span class="string">&#x27;line&#x27;</span>)  <span class="comment"># 添加标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 添加x轴名称‘x’</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)  <span class="comment"># 添加y轴名称‘y’</span></span><br><span class="line"></span><br><span class="line">plt.plot(x,y)  <span class="comment"># 绘制折线图</span></span><br><span class="line">plt.scatter(x,y)  <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.text(<span class="number">2.5</span>,<span class="number">2</span>,<span class="string">&#x27;y = x&#x27;</span>)  <span class="comment"># 在图中x=2.5,y=2处添加‘y=x’</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;_mpl-gallery&#x27;</span>) <span class="comment">#设置绘图风格：_mpl-gallery</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914103431.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有子图的绘图</span></span><br><span class="line">p = plt.figure(figsize=(<span class="number">4</span>,<span class="number">6</span>),dpi=<span class="number">80</span>) <span class="comment"># 创建画布。大小为4×6，像素为80</span></span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">ax1 = p.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 分为2×1图形阵，选择第1张图片绘图</span></span><br><span class="line">plt.title(<span class="string">&#x27;折线图&#x27;</span>) <span class="comment"># 添加标题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;lines.linestyle&#x27;</span>] = <span class="string">&#x27;--&#x27;</span> <span class="comment"># 修改线条类型</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;lines.linewidth&#x27;</span>] = <span class="number">3</span> <span class="comment"># 修改线条宽度</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.edgecolor&#x27;</span>] = <span class="string">&#x27;r&#x27;</span>  <span class="comment"># 轴颜色设置为红色</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.spines.top&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 去除顶部轴</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.spines.right&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 去除右侧轴</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span>  <span class="comment"># 设置字体为SimHei</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号“-”显示异常</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">ax2 = p.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)  <span class="comment"># 分为2×1图形阵，选择第2张图片绘图</span></span><br><span class="line">plt.title(<span class="string">&quot;散点图&quot;</span>)</span><br><span class="line">plt.scatter(x,y)  <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914103847.png"></p><h2 id="读取数据作图"><a href="#读取数据作图" class="headerlink" title="读取数据作图"></a>读取数据作图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">data = np.load(<span class="string">r&#x27;./data/国民经济核算季度数据.npz&#x27;</span>,allow_pickle=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(len(data[&#x27;values&#x27;]))六十九个数据</span></span><br><span class="line"><span class="comment"># print(data.files)  #[&#x27;columns&#x27;, &#x27;values&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;columns&#x27;</span>])   <span class="comment"># 提取columns数组，视为数据的标签</span></span><br><span class="line">values = data[<span class="string">&#x27;values&#x27;</span>]  <span class="comment"># 提取values数组，数据的存在位置</span></span><br><span class="line">values</span><br></pre></td></tr></table></figure><p>运行结果为</p><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914104650.png"></p><p>作散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2000-2017年三大产业个季度国民生产总值&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;生产总值（亿元）&#x27;</span>)</span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">2</span>],marker=<span class="string">&#x27;D&#x27;</span>,c = <span class="string">&#x27;r&#x27;</span>,alpha = <span class="number">0.5</span>) <span class="comment"># 国内生产总值散点为红色</span></span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">3</span>],c=<span class="string">&#x27;y&#x27;</span>) <span class="comment"># 第一产业增加值散点为黄色</span></span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">4</span>],c=<span class="string">&#x27;g&#x27;</span>) <span class="comment"># 第二产业增加值散点为绿色</span></span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">5</span>]) <span class="comment"># 第三产业增加值散点颜色默认值 此处为蓝色</span></span><br><span class="line">plt.xticks(values[::<span class="number">4</span>,<span class="number">0</span>],values[::<span class="number">4</span>,<span class="number">1</span>],rotation = <span class="number">90</span>)  <span class="comment">#添加x轴坐标，并旋转45/90度</span></span><br><span class="line">plt.legend([<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>])  <span class="comment"># 添加图例</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914105206.png"></p><p>有子图绘制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">p = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">ax1 = p.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;2000-2017年度三大产业国民生产总值&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;生产总值（亿元）&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;lines.linestyle&#x27;</span>] = <span class="string">&#x27;-&#x27;</span> <span class="comment"># 修改线条类型</span></span><br><span class="line">plt.plot(values[:,<span class="number">0</span>],values[:,<span class="number">3</span>])</span><br><span class="line">plt.plot(values[:,<span class="number">0</span>],values[:,<span class="number">4</span>])</span><br><span class="line">plt.plot(values[:,<span class="number">0</span>],values[:,<span class="number">5</span>])</span><br><span class="line">plt.xticks(values[::<span class="number">4</span>,<span class="number">0</span>],values[::<span class="number">4</span>,<span class="number">1</span>],rotation = <span class="number">90</span>) <span class="comment"># x轴的标识点是否rotation旋转</span></span><br><span class="line">plt.legend([<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>])</span><br><span class="line">ax2 = p.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2000-2017年三大产业个季度国民生产总值&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;生产总值（亿元）&#x27;</span>)</span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">2</span>],marker=<span class="string">&#x27;D&#x27;</span>,c = <span class="string">&#x27;r&#x27;</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># marker = &#x27;D&#x27; 散点为方形  c = &#x27;r&#x27; 散点为红色 alpha = 0.5 透明度为0.5</span></span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">3</span>],c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">4</span>])</span><br><span class="line">plt.scatter(values[:,<span class="number">0</span>],values[:,<span class="number">5</span>])</span><br><span class="line">plt.xticks(values[::<span class="number">4</span>,<span class="number">0</span>],values[::<span class="number">4</span>,<span class="number">1</span>],rotation = <span class="number">45</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914105636.png"></p><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直方图</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10000</span>)  <span class="comment"># 生成10000个服从标准正态分布数据</span></span><br><span class="line">plt.title(<span class="string">&#x27;标准正太分布直方图&#x27;</span>)</span><br><span class="line">plt.hist(x)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914110113.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直方图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10000</span>)  <span class="comment"># 生成10000个服从标准正态分布数据</span></span><br><span class="line">plt.title(<span class="string">&#x27;标准正太分布直方图&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.hist(x)</span></span><br><span class="line">n, bins, patches = plt.hist(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    plt.text(bins[i], n[i]*<span class="number">1</span>, <span class="built_in">int</span>(n[i]), fontsize=<span class="number">12</span>, horizontalalignment=<span class="string">&quot;center&quot;</span>,va=<span class="string">&quot;bottom&quot;</span>) <span class="comment">#打标签，在合适的位置标注每个直方图上面样本数)</span></span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914111913.png"></p><h2 id="柱状图（条形图）"><a href="#柱状图（条形图）" class="headerlink" title="柱状图（条形图）"></a>柱状图（条形图）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#条形图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">x = values[-<span class="number">1</span>,<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="number">3</span>),x,width = <span class="number">0.5</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2017年第一季度三大产业生产总值&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;类别&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;生产总值（亿元）&#x27;</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">3</span>),[<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    plt.text(i,x[i],x[i],ha = <span class="string">&#x27;center&#x27;</span>,va = <span class="string">&#x27;bottom&#x27;</span>)<span class="comment"># 打标签，在合适的位置标注每个直方图上面样本数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914111148.png"></p><h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#饼图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">x = values[-<span class="number">1</span>,<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">plt.title(<span class="string">&#x27;2017年第一季度三大产业生产总值分布情况&#x27;</span>)</span><br><span class="line">plt.pie(x,labels=[<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>],autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>,explode = [<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>],labeldistance=<span class="number">1.2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914143540.png"></p><h1 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#箱线图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">x = values[:,<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">plt.title(<span class="string">&#x27;三大产业分布情况&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;类别&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;分布&#x27;</span>)</span><br><span class="line">plt.boxplot(x,labels=[<span class="string">&#x27;第一产业&#x27;</span>,<span class="string">&#x27;第二产业&#x27;</span>,<span class="string">&#x27;第三产业&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914144143.png"></p><h1 id="一个示例：分析人口数据"><a href="#一个示例：分析人口数据" class="headerlink" title="一个示例：分析人口数据"></a>一个示例：分析人口数据</h1><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = np.load(<span class="string">r&#x27;./data/populations.npz&#x27;</span>,allow_pickle = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(data.files)  #[&#x27;data&#x27;, &#x27;feature_names&#x27;]</span></span><br><span class="line">values = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"><span class="comment"># print(data[&#x27;feature_names&#x27;])</span></span><br><span class="line"><span class="comment"># [&#x27;时间&#x27; &#x27;年末总人口(万人)&#x27; &#x27;男性人口(万人)&#x27; &#x27;女性人口(万人)&#x27; &#x27;城镇人口(万人)&#x27; &#x27;乡村人口(万人)&#x27;]</span></span><br><span class="line">data[<span class="string">&#x27;data&#x27;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914151048.png"></p><h2 id="绘制散点图和折线图"><a href="#绘制散点图和折线图" class="headerlink" title="绘制散点图和折线图"></a>绘制散点图和折线图</h2><p>plt.plot()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, format_string, **kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>X轴数据，列表或数组，可选</td></tr><tr><td><code>y</code></td><td>Y轴数据，列表或数组</td></tr><tr><td><code>format_string</code></td><td>控制曲线的格式字符串，可选</td></tr><tr><td><code>**kwargs</code></td><td>第二组或更多(x,y,format_string)，可画多条曲线</td></tr></tbody></table><p><code>format_string</code> 由颜色字符、风格字符、标记字符组成</p><p>color : 控制颜色, color&#x3D;‘green’<br>linestyle : 线条风格, linestyle&#x3D;‘dashed’<br>marker : 标记风格, marker&#x3D;‘o’<br>markerfacecolor: 标记颜色, markerfacecolor&#x3D;‘blue’<br>markersize: 标记尺寸, markersize&#x3D;2</p><p>颜色字符</p><ul><li>‘b’ 蓝色 ‘m’ 洋红色 magenta</li><li>‘g’ 绿色 ‘y’ 黄色</li><li>‘r’ 红色 ‘k’ 黑色</li><li>‘w’ 白色 ‘c’ 青绿色 cyan</li><li>‘#008000’ RGB某颜色 ‘0.8’ 灰度值字符串</li><li>多条曲线不指定颜色时，会自动选择不同颜色</li></ul><p>风格字符</p><ul><li>‘‐’ 实线</li><li>‘‐‐’ 破折线</li><li>‘‐.’ 点划线</li><li>‘:’ 虚线</li><li>‘’ ‘ ‘ 无线条</li></ul><p>标记字符</p><ul><li>‘.’ 点标记</li><li>‘,’ 像素标记(极小点)</li><li>‘o’ 实心圈标记</li><li>‘v’ 倒三角标记</li><li>‘^’ 上三角标记</li><li>‘&gt;’ 右三角标记</li><li>‘&lt;’ 左三角标记…等等</li></ul><p>plt.scatter()函数用于生成一个散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, </span><br><span class="line">y, </span><br><span class="line">s=<span class="number">20</span>, </span><br><span class="line">c=<span class="string">&#x27;b&#x27;</span>, </span><br><span class="line">marker=<span class="string">&#x27;o&#x27;</span>, </span><br><span class="line">cmap=<span class="literal">None</span>, </span><br><span class="line">norm=<span class="literal">None</span>, </span><br><span class="line">vmin=<span class="literal">None</span>, </span><br><span class="line">vmax=<span class="literal">None</span>, </span><br><span class="line">alpha=<span class="literal">None</span>, </span><br><span class="line">linewidths=<span class="literal">None</span>, </span><br><span class="line">verts=<span class="literal">None</span>, </span><br><span class="line">hold=<span class="literal">None</span>, </span><br><span class="line">**kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>x，y：表示的是shape大小为(n,)的数组，也就是我们即将绘制散点图的数据点，输入数据。</p></li><li><p>s：表示的是大小，是一个标量或者是一个shape大小为(n,)的数组，可选，默认20。</p></li><li><p>c：表示的是色彩或颜色序列，可选，默认蓝色’b’。但是c不应该是一个单一的RGB数字，也不应该是一个RGBA的序列，因为不便区分。c可以是一个RGB或RGBA二维行数组。</p></li><li><p>marker：MarkerStyle，表示的是标记的样式，可选，默认’o’。</p></li><li><p>cmap：Colormap，标量或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmap，可选，默认None。</p></li><li><p>norm：Normalize，数据亮度在0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认None。</p></li><li><p>vmin，vmax：标量，当norm存在的时候忽略。用来进行亮度数据的归一化，可选，默认None。</p></li><li><p>alpha：标量，0-1之间，可选，默认None。</p></li><li><p>linewidths：也就是标记点的长度，默认None。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">p = plt.figure(figsize=(<span class="number">12</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment">#子图1</span></span><br><span class="line">ax1 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;人口总数散点图&#x27;</span>)</span><br><span class="line">plt.scatter(values[<span class="number">0</span>:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">1</span>])</span><br><span class="line">plt.xticks(rotation = <span class="number">45</span>)</span><br><span class="line"><span class="comment">#子图2</span></span><br><span class="line">ax2 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各类别人口数散点图&#x27;</span>)</span><br><span class="line">plt.scatter(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">2</span>],c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">3</span>],c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">4</span>],c=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">plt.scatter(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">5</span>])</span><br><span class="line">plt.legend([<span class="string">&quot;男性人口&quot;</span>,<span class="string">&quot;女性人口&quot;</span>,<span class="string">&quot;城镇人口&quot;</span>,<span class="string">&quot;农村人口&quot;</span>],loc=<span class="string">&#x27;lower left&#x27;</span>)</span><br><span class="line">plt.xticks(rotation = <span class="number">45</span>)</span><br><span class="line"><span class="comment">#子图3</span></span><br><span class="line">ax3 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;人口总数折线图&#x27;</span>)</span><br><span class="line">plt.plot(values[<span class="number">0</span>:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">1</span>])</span><br><span class="line">plt.xticks(rotation = <span class="number">45</span>)</span><br><span class="line"><span class="comment">#子图4</span></span><br><span class="line">ax4 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各类别人口数折线图&#x27;</span>)</span><br><span class="line">plt.plot(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">2</span>])</span><br><span class="line">plt.plot(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">3</span>])</span><br><span class="line">plt.plot(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">4</span>])</span><br><span class="line">plt.plot(values[:<span class="number">20</span>,<span class="number">0</span>],values[:<span class="number">20</span>,<span class="number">5</span>])</span><br><span class="line">plt.legend([<span class="string">&quot;男性人口&quot;</span>,<span class="string">&quot;女性人口&quot;</span>,<span class="string">&quot;城镇人口&quot;</span>,<span class="string">&quot;农村人口&quot;</span>],loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"><span class="comment"># loc 图例位置 upper right lower left</span></span><br><span class="line">plt.xticks(rotation = <span class="number">45</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914153529.png"></p><h2 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h2><p>plt. bar添加数据标签<br>plt.bar_label()函数，为条形图添加数据标签<br>函数参数</p><ul><li><p>container</p><p>  container ：添加数据标签的条形图名称</p></li><li><p>labels</p><p>  labels：数据标签列表</p></li><li><p>fmt</p><p>  fimt：数据标签的格式，默认：%g</p></li><li><p>label_type</p><p>  label_type：数据标签所处的位置，取值为‘center’或’edge’</p><p>  center：数据标签位于条形图的条形中间</p><p>  edge：数据标签位于条形图的顶端</p><p>  默认值：edge</p></li><li><p>padding</p><p>  padding：数据标签与条形图中的每个条形的水平距离</p><p>  默认值：0</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">p = plt.figure(figsize=(<span class="number">12</span>,<span class="number">10</span>))</span><br><span class="line">ax1 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1996年男女人口分布&#x27;</span>)</span><br><span class="line">p1 = plt.bar(<span class="built_in">range</span>(<span class="number">2</span>),values[-<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>],width=<span class="number">0.4</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>),[<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>])</span><br><span class="line">plt.bar_label(p1,labels=values[-<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>],padding=<span class="number">5</span>,fontsize = <span class="number">20</span>)</span><br><span class="line"><span class="comment">#padding：数据标签与条形图中的每个条形的水平距离 默认为0</span></span><br><span class="line"></span><br><span class="line">ax2 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2015年男女人口分布&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="number">2</span>),values[<span class="number">0</span>,<span class="number">2</span>:<span class="number">4</span>],width=<span class="number">0.3</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>),[<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>])</span><br><span class="line"></span><br><span class="line">ax3 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1996年城乡人口分布&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="number">2</span>),values[-<span class="number">3</span>,<span class="number">4</span>:],width=<span class="number">0.3</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>),[<span class="string">&#x27;城&#x27;</span>,<span class="string">&#x27;乡&#x27;</span>])</span><br><span class="line"></span><br><span class="line">ax4 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1996年城乡人口分布&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="number">2</span>),values[<span class="number">0</span>,<span class="number">4</span>:],width=<span class="number">0.3</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>),[<span class="string">&#x27;城&#x27;</span>,<span class="string">&#x27;乡&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914154927.png"></p><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.pie(x, explode=<span class="literal">None</span>, labels=<span class="literal">None</span>, colors=<span class="literal">None</span>, autopct=<span class="literal">None</span>, pctdistance=<span class="number">0.6</span>, shadow=<span class="literal">False</span>, labeldistance=<span class="number">1.1</span>,</span><br><span class="line"> startangle=<span class="number">0</span>, radius=<span class="number">1</span>, counterclock=<span class="literal">True</span>, wedgeprops=<span class="literal">None</span>, textprops=<span class="literal">None</span>, center=<span class="number">0</span>, <span class="number">0</span>, frame=<span class="literal">False</span>, </span><br><span class="line"> rotatelabels=<span class="literal">False</span>, *, normalize=<span class="literal">None</span>, data=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li>x即每个扇形的占比的序列或数组</li><li>explode如果不是None，则是一个len(x)长度的数组，指定每一块的突出程度；突出显示，设置每一块分割出来的间隙大小</li><li>labels为每个扇形提供标签的字符串序列</li><li>colors为每个扇形提供颜色的字符串序列</li><li>autopct如果它是一个格式字符串，标签将是fmt % pct。如果它是一个函数，它将被调用。</li><li>shadow阴影</li><li>startangle从x轴逆时针旋转,饼的旋转角度</li><li>pctdistance, default: 0.6每个饼片的中心与由autopct生成的文本的开头之间距离与半径的比率，大于1的话会显示在圆外</li><li>labeldistance, default: 1.1饼状图标签绘制时的径向距离（我认为这个也与8类似是个比率）。如果设置为None，则不绘制标签，而是存储在图例()中使用。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#饼图</span></span><br><span class="line">p = plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1996年男女人口占比&#x27;</span>)</span><br><span class="line">plt.pie(values[-<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>],labels=[<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>],autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2015年男女人口占比&#x27;</span>)</span><br><span class="line">plt.pie(values[<span class="number">0</span>,<span class="number">2</span>:<span class="number">4</span>],labels=[<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>],autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax3 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1996城乡人口占比&#x27;</span>)</span><br><span class="line">plt.pie(values[-<span class="number">3</span>,<span class="number">4</span>:],labels= [<span class="string">&#x27;城&#x27;</span>,<span class="string">&#x27;乡&#x27;</span>],autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax4 = p.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2015城乡人口占比&#x27;</span>)</span><br><span class="line">plt.pie(values[<span class="number">0</span>,<span class="number">4</span>:],labels= [<span class="string">&#x27;城&#x27;</span>,<span class="string">&#x27;乡&#x27;</span>],autopct=<span class="string">&#x27;%0.2f%%&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914155721.png"></p><h2 id="绘制箱线图"><a href="#绘制箱线图" class="headerlink" title="绘制箱线图"></a>绘制箱线图</h2><p>参数详解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(x,                      <span class="comment"># x：指定要绘制箱图的数据</span></span><br><span class="line">            notch=<span class="literal">None</span>,           <span class="comment"># notch：是否是凹口的形式展现箱线图，默认非凹口</span></span><br><span class="line">            sym=<span class="literal">None</span>,              <span class="comment"># sym：指定异常点的形状，默认为+号显示</span></span><br><span class="line">            vert=<span class="literal">None</span>,              <span class="comment"># vert：是否需要将箱线图垂直摆放，默认垂直摆放</span></span><br><span class="line">            whis=<span class="literal">None</span>,             <span class="comment"># whis：指定上下须与上下四分位的距离，默认为1.5倍的四分位差</span></span><br><span class="line">            positions=<span class="literal">None</span>,   <span class="comment"># positions：指定箱线图的位置，默认为[0,1,2…]</span></span><br><span class="line">            widths=<span class="literal">None</span>,         <span class="comment"># widths：指定箱线图的宽度，默认为0.5</span></span><br><span class="line">            patch_artist=<span class="literal">None</span>,        <span class="comment"># patch_artist：是否填充箱体的颜色</span></span><br><span class="line">            meanline=<span class="literal">None</span>,             <span class="comment"># meanline：是否用线的形式表示均值，默认用点来表示</span></span><br><span class="line">            showmeans=<span class="literal">None</span>,       <span class="comment"># showmeans：是否显示均值，默认不显示</span></span><br><span class="line">            showcaps=<span class="literal">None</span>,           <span class="comment"># showcaps：是否显示箱线图顶端和末端的两条线，默认显示</span></span><br><span class="line">            showbox=<span class="literal">None</span>,             <span class="comment"># showbox：是否显示箱线图的箱体，默认显示</span></span><br><span class="line">            showfliers=<span class="literal">None</span>,          <span class="comment"># showfliers：是否显示异常值，默认显示</span></span><br><span class="line">            boxprops=<span class="literal">None</span>,           <span class="comment"># boxprops：设置箱体的属性，如边框色，填充色等</span></span><br><span class="line">            labels=<span class="literal">None</span>,                  <span class="comment"># labels：为箱线图添加标签，类似于图例的作用</span></span><br><span class="line">            flierprops=<span class="literal">None</span>,          <span class="comment"># filerprops：设置异常值的属性，如异常点的形状、大小、填充色等</span></span><br><span class="line">            medianprops=<span class="literal">None</span>,   <span class="comment"># medianprops：设置中位数的属性，如线的类型、粗细等</span></span><br><span class="line">            meanprops=<span class="literal">None</span>,       <span class="comment"># meanprops：设置均值的属性，如点的大小、颜色等</span></span><br><span class="line">            capprops=<span class="literal">None</span>,           <span class="comment"># capprops：设置箱线图顶端和末端线条的属性，如颜色、粗细等</span></span><br><span class="line">            whiskerprops=<span class="literal">None</span>)   <span class="comment"># whiskerprops：设置须的属性，如颜色、粗细、线的类型等</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#箱线图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line">plt.boxplot(values[<span class="number">0</span>:<span class="number">20</span>,<span class="number">1</span>:],labels=[<span class="string">&#x27;总体&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;城&#x27;</span>,<span class="string">&#x27;乡&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220914155950.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>numpy常用命令</title>
      <link href="/2022/09/13/numpy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/09/13/numpy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>ndarrary：NumPy库的心脏</strong></p><p><strong>ndarray：多维数组，具有矢量运算能力，且快速、节省空间</strong></p><p><strong>可对整组数据进行快速运算的标准数学函数、线性代数、随机数生成等功能</strong></p><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="string">&#x27;K&#x27;</span>,subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>object</strong></td><td>接收array_like。表示想要创建的数组。无默认。</td></tr><tr><td><strong>dtype</strong></td><td>接收data-type。表示数组所需的数据类型。如果未给定，则选择保存对象所需的最小类型。默认为None。</td></tr><tr><td><strong>ndmin</strong></td><td>接收int。指定生成数组应该具有的最小维数。默认为None。</td></tr></tbody></table><h2 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">4.2</span>])         <span class="comment"># 创建一维数组</span></span><br><span class="line">arr2 = np.array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">                 [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]])  <span class="comment"># 创建二维数组</span></span><br><span class="line"><span class="built_in">print</span>(arr1) <span class="comment"># [0.3 0.5 4.2]</span></span><br><span class="line"><span class="built_in">print</span>(arr2) <span class="comment"># [[3 4 5]</span></span><br><span class="line">            <span class="comment"># [4 2 1]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(arr1)) <span class="comment">#&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用arrange函数创建数组"><a href="#使用arrange函数创建数组" class="headerlink" title="使用arrange函数创建数组"></a>使用arrange函数创建数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr3 = np.arange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">arr4 = np.arange(<span class="number">10</span>)</span><br><span class="line">arr5 = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(arr3) <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(arr4) <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(arr5) <span class="comment"># [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]</span></span><br></pre></td></tr></table></figure><h2 id="使用linspace函数创建等差数组"><a href="#使用linspace函数创建等差数组" class="headerlink" title="使用linspace函数创建等差数组"></a>使用linspace函数创建等差数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr6 = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(arr6) <span class="comment"># [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]</span></span><br></pre></td></tr></table></figure><h2 id="使用zero函数创建数组"><a href="#使用zero函数创建数组" class="headerlink" title="使用zero函数创建数组"></a>使用zero函数创建数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr7 = np.zeros([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># 三层四排五列全零元素构成的数组</span></span><br><span class="line"><span class="built_in">print</span>(arr7)</span><br></pre></td></tr></table></figure><p><img src="https://storage-1310438473.cos.ap-nanjing.myqcloud.com/imgs/20220913174126.png"></p><h2 id="使用logspace函数创建等比数列"><a href="#使用logspace函数创建等比数列" class="headerlink" title="使用logspace函数创建等比数列"></a>使用logspace函数创建等比数列</h2><h1 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h1><p>ndarray（数组）是存储单一数据类型的多维数组。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>ndim</strong></td><td>返回 int。表示数组的维数</td></tr><tr><td><strong>shape</strong></td><td>返回 tuple。表示数组的尺寸，对于  n 行 m 列的矩阵，形状为(n,m)</td></tr><tr><td><strong>size</strong></td><td>返回 int。表示数组的元素总数，等于数组形状的乘积</td></tr><tr><td><strong>dtype</strong></td><td>返回 data-type。描述数组中元素的类型</td></tr><tr><td><strong>itemsize</strong></td><td>返回 int。表示数组的每个元素的大小（以字节为单位）。</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数组的基础属性</span></span><br><span class="line"><span class="built_in">print</span>(arr1.shape)  <span class="comment"># (3,)</span></span><br><span class="line"><span class="built_in">print</span>(arr1.ndim)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(arr1.dtype) <span class="comment"># float64</span></span><br><span class="line"><span class="built_in">print</span>(arr2.shape) <span class="comment"># (2,3)</span></span><br><span class="line"><span class="built_in">print</span>(arr2.ndim)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(arr2.dtype) <span class="comment"># int32</span></span><br><span class="line"><span class="built_in">print</span>(arr1.size) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(arr1.itemsize) <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的hexo命令</title>
      <link href="/2022/09/04/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84hexo%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/09/04/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84hexo%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="使用git给github传输文件"><a href="#使用git给github传输文件" class="headerlink" title="使用git给github传输文件"></a>使用git给github传输文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin xxxx(网址)</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>更新代码</p><h2 id="第一步：查看当前的git仓库状态"><a href="#第一步：查看当前的git仓库状态" class="headerlink" title="第一步：查看当前的git仓库状态"></a>第一步：查看当前的git仓库状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="第二步：更新全部"><a href="#第二步：更新全部" class="headerlink" title="第二步：更新全部"></a>第二步：更新全部</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="第三步：接着输入git-commit-m-“更新说明”"><a href="#第三步：接着输入git-commit-m-“更新说明”" class="headerlink" title="第三步：接着输入git commit -m “更新说明”"></a>第三步：接着输入git commit -m “更新说明”</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;更新说明&quot;</span><br></pre></td></tr></table></figure><h2 id="第四步：先git-pull，拉去当前分支最新代码"><a href="#第四步：先git-pull，拉去当前分支最新代码" class="headerlink" title="第四步：先git pull，拉去当前分支最新代码"></a>第四步：先git pull，拉去当前分支最新代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="第五步：push到远程master分支上"><a href="#第五步：push到远程master分支上" class="headerlink" title="第五步：push到远程master分支上"></a>第五步：push到远程master分支上</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h1 id="使用git将github上面的代码拉下来"><a href="#使用git将github上面的代码拉下来" class="headerlink" title="使用git将github上面的代码拉下来"></a>使用git将github上面的代码拉下来</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone xxxx.git</span><br></pre></td></tr></table></figure><h1 id="hexo几个命令让网站刷新"><a href="#hexo几个命令让网站刷新" class="headerlink" title="hexo几个命令让网站刷新"></a>hexo几个命令让网站刷新</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s #本地查看</span><br><span class="line">hexo d #部署</span><br><span class="line">hexo new [title] # 新的blog</span><br></pre></td></tr></table></figure><h1 id="hexo常用指令"><a href="#hexo常用指令" class="headerlink" title="hexo常用指令"></a>hexo常用指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 搭建网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2022/09/04/my-first-blog/"/>
      <url>/2022/09/04/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>免责声明：</p><p>本文涉及内容以及相关软件，仅供技术交流。如产生任何法律纠纷与本人无关。如有侵犯版权，请联系立即删除。本人支持正版，强烈建议购买正版！</p><p>一次性付费，售价89元，支持3台设备。价格不算贵，鼓励大家支持正版</p><p>相关软件、插件在此</p><p><a href="https://www.aliyundrive.com/s/fYd7s4m7qnw">https://www.aliyundrive.com/s/fYd7s4m7qnw</a>  提取码q12u</p><p>非常简单 安装typora后找到typora.exe所在目录 记住最后一步安装不要打开Typora 也就是Launch Typora不要勾选 然后破解插件文件夹中的winmm.dll复制到typora.exe所在目录即可</p><p>然后打开Typora 依次点击帮助→我的许可证 弹出激活成功窗口即ok</p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora破解版 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
